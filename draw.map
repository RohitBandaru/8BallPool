{"version":3.0,"file":"draw.js","sourceRoot":"","names":["init_player","init_vel","fmt","erase_rel","rest","rest$0","rest$1","rest$2","rest$3","rest$4","rest$5","rest$6","rest$7","ty","rest$8","ty1","rest$9","rest$10","rest$11","rest$12","rest$13","concat_fmtty","fmtty1","fmtty2","ty2","concat_fmt","fmt1","fmt2","pad","pad$0","prec","pad$1","iconv","prec$0","pad$2","iconv$0","prec$1","pad$3","iconv$1","prec$2","pad$4","iconv$2","prec$3","pad$5","fconv","pad$6","str","chr","fmtty","pad$7","fmtty$0","pad$8","rest$14","rest$15","rest$16","fmting_lit","rest$17","fmting_gen","rest$18","rest$19","char_set","width_opt","rest$20","counter","rest$21","rest$22","ign","rest$23","f","arity","failwith","s","invalid_arg","max","x","y","abs","_a_","s1","s2","l1","l2","string_of_bool","b","string_of_float","l","i","i$0","oc","output_string","do_at_exit","iter","a","iteri","l$0","fold_left","accu","accu$0","l$1","accu$1","exists","p","find","find_all","l1$0","l2$0","split","ry","rx","n","lowercase","c","make","copy","len","r","to_string","sub_string","ofs","blit","ofs1","ofs2","blit$0","index_rec","lim","i$1","contains_from","contains","os_type","max_array_length","max_string_length","height","h","create","d","hl","hr","singleton","bal","h$0","lr","ld","lv","ll","lrr","lrd","lrv","lrl","rr","rd","rv","rl","rlr","rld","rlv","rll","empty","is_empty","add","data","m","v","param$1","find_first","r$0","d$0","v$0","find_first_opt","find_last","find_last_opt","find_opt","mem","min_binding","min_binding_opt","max_binding","max_binding_opt","remove_min_binding","t","match","remove","update","data$0","map","mapi","fold","m$0","for_all","add_min_binding","k","add_max_binding","join","rh","lh","concat","concat_or_join","t1","t2","pres","pres$0","merge","h1","r1","d1","v1","r2","d2","r2$0","d2$0","v2","r1$0","d1$0","union","h2","d2$1","d1$1","filter","pvd","partition","lf","lt","rf","rt","cons_enum","e","e$0","m$1","e$1","compare","cmp","m1","m2","e2$2","e1$2","e1","e2","e2$0","e1$0","c$0","e2$1","e1$1","equal","cardinal","bindings_aux","bindings","raise_undefined","force_lazy_block","blk","closure","result","resize","more","new_len","new_buffer","add_string","new_position","default_float_precision","buffer_create","init_size","buffer_check_size","buf","overhead","min_len","new_str","buffer_add_char","buffer_add_string","str_len","buffer_contents","string_of_formatting_lit","formatting_lit","str$0","bprint_fmtty","sub_fmtty","sub_fmtty$0","symm","fmtty_rel_det","de","ed","af","fa","de$0","ed$0","af$0","fa$0","de$1","ed$1","af$1","fa$1","de$2","ed$2","af$2","fa$2","de$3","ed$3","af$3","fa$3","de$4","ed$4","af$4","fa$4","de$5","ed$5","af$5","fa$5","de$6","ed$6","af$6","fa$6","de$7","ed$7","af$7","fa$7","de$8","ed$8","af$8","fa$8","trans","jd","dj","ga","ag","de$9","ed$9","af$9","fa$9","de$10","ed$10","af$10","fa$10","de$11","ed$11","af$11","fa$11","de$12","ed$12","af$12","fa$12","de$13","ed$13","af$13","fa$13","rest2","rest2$0","rest2$1","rest2$2","rest2$3","rest2$4","rest2$5","rest2$6","rest2$7","rest2$8","ty22","ty21","f4","f2","rest2$9","rest2$10","rest2$11","rest2$12","rest2$13","type_padding","w","padty","padty$0","type_padprec","type_ignored_param_one","type_format_gen","fmt$0","fmtty_rest","fmt_rest","fmtty_rest$0","fmt_rest$0","fmtty$1","fmt$1","fmt_rest$1","fmtty_rest$1","fmtty$2","fmt$2","fmt_rest$2","fmtty_rest$2","fmtty$3","fmt$3","fmt_rest$3","fmtty_rest$3","fmtty$4","fmt$4","fmt_rest$4","fmtty_rest$4","fmtty$5","fmt$5","fmt_rest$5","fmtty_rest$5","fmtty$6","fmt$6","fmt_rest$6","fmtty_rest$6","fmtty$7","fmt$7","fmt_rest$7","fmtty_rest$7","fmtty$8","fmt$8","fmt_rest$8","fmtty_rest$8","fmtty$9","fmt$9","fmt_rest$9","fmtty$10","fmt$10","fmt_rest$10","fmtty$11","fmt$11","fmt_rest$11","fmtty$12","fmt$12","fmtty_rest$9","fmt_rest$12","pad_opt","fmtty$13","fmt$13","fmtty_rest$10","sub_fmtty1","fmt_rest$13","sub_fmtty$1","pad_opt$0","fmtty$14","fmt$14","fmtty_rest$11","fmt_rest$14","fmtty$15","fmt$15","fmtty_rest$12","fmt_rest$15","fmtty$16","fmt$16","fmt_rest$16","fmtty$17","fmt$17","fmt_rest$17","formatting_gen","fmtty3","fmt3","str$1","fmt1$0","fmtty2$0","fmt2$0","fmtty3$0","fmt3$0","fmtty_rest$13","fmt_rest$18","fmtty$18","fmt$18","fmtty_rest$14","fmt_rest$19","fmtty$19","fmt$19","fmtty_rest$15","fmt_rest$20","fmtty$20","fmt$20","fmtty_rest$16","fmtty$21","fmt$21","sub_fmtty$2","pad_opt$1","sub_fmtty$3","pad_opt$2","type_ignored_format_substitution","fmtty$22","fmt$22","sub_fmtty$4","sub_fmtty_rest","sub_fmtty_rest$0","sub_fmtty_rest$1","sub_fmtty_rest$2","sub_fmtty_rest$3","sub_fmtty_rest$4","sub_fmtty_rest$5","sub_fmtty_rest$6","sub_fmtty_rest$7","sub_fmtty_rest$8","sub_fmtty_rest$9","sub_fmtty_rest$10","sub_fmtty_rest$11","sub_fmtty_rest$12","sub_fmtty_rest$13","sub_fmtty_rest$14","sub2_fmtty","sub_fmtty_rest$15","sub2_fmtty$0","sub_fmtty_rest$16","sub2_fmtty$1","sub1_fmtty","sub_fmtty_rest$17","sub2_fmtty$2","sub1_fmtty$0","sub_fmtty_rest$18","sub_fmtty_rest$19","sub_fmtty_rest$20","sub_fmtty_rest$21","sub_fmtty_rest$22","sub_fmtty_rest$23","sub_fmtty_rest$24","sub_fmtty_rest$25","sub_fmtty_rest$26","fix_padding","width","res","fix_int_precision","res$1","res$0","string_to_caml_string","i$2","convert_int","convert_int32","convert_nativeint","convert_int64","convert_float","sign","symb","make_int_padding_precision","o","acc","make_printf","p$0","p$1","make_padding","new_acc","make_printf$0","k$0","acc$0","s$0","acc$1","acc$2","acc$3","acc$4","k$3","koc","kacc","k$1","k$4","k$2","make_invalid_arg","make_from_fmtty$0","make_custom$0","make_from_fmtty","arity$0","make_custom","output_acc","p$2","p$3","msg","p$4","strput_acc","pos","sprintf","n$0","printers","register_printer","fn","bits","curval","newval","newval30","float$0","scale","params","randomized_default","prng","seed$0","seed","j","opt","initial_size","sth","random","x$0","register_exception","name","exn","slot","change_velocity","update_position","ts","vy","vx","new_pos","init_pos","init_state","g","search_ball","ball_id","is_overlap","y1","x1","y2","x2","dot","v2y","v2x","v1y","v1x","diff","b2","b1","a2","a1","sum","norm","apply_friction","old_vy","old_vx","new_v","key","new_val","ne_dy","pocket_nw","match$0","pocket_n","pocket_s","pocket_ne","pocket_se","left_dx","right_dx","left_dy","right_dy","top_dx","bot_dx","top_dy","bot_dy","ne_dx","nw_dx","nw_dy","collide_pocket","ball","pocket_pos","simulate_timestep","ball_list$1","ball_list$2","ball_list$0","cur_index$2","t$0","cur_index$3","by","bx","norm_r","y1$0","x1$0","norm_r$0","norm_vector$3","tangent_angle$2","tan_vector$2","v1nb$2","v1t$2","v1na$2","v1ca$2","norm_vector$4","tan_vector$3","v1nb$3","v1t$3","v1na$3","v1ca$3","norm_vector$6","tangent_angle$4","tan_vector$5","v1nb$5","v1t$5","v1na$5","v1ca$5","norm_vector$5","tangent_angle$3","tan_vector$4","v1nb$4","v1t$4","v1na$4","v1ca$4","norm_vector$2","tangent_angle$1","tan_vector$1","v1nb$1","v1t$1","v1na$1","v1ca$1","norm_angle$0","norm_vector$1","tangent_angle$0","tan_vector$0","v1nb$0","v1t$0","v1na$0","v1ca$0","h_diff$0","h_id$0","cur_index$4","ball_list","cur_index","norm_angle","norm_vector","norm_magnitude","norm_vector$0","tan_vector","tangent_angle","v1nb","v2nb","v1t","v2t","v1na","v2na","v1ca","v2ca","ball_diff","h_diff","h_id","cur_index$0","cur_index$1","cur_index$5","new_balls","event","old_v","v_diff","new_ball","moved_ball_list2","document$0","cur_state","cur_mode","mouseX","mouseY","stick_color","stick_angle","power","debug","draw_ball","canvas","ctx","ballsrc","ballimg","draw_stick","cue_pos","loop","cw","ch","tablesrc","tableimg","ctx$3","txt8ballsrc","txtp1turnsrc","txtp2turnsrc","txtscratchsrc","txtb2sinksrc","txt8ballimg","txtp1turnimg","txtp2turnimg","txtscratchimg","txtb2sinkimg","ctx$2","logic$0","p1","p2","b_id","ball_lst","param$0","ctx$1","ctx$0","cw$0","ch$0","logic","player","winner_id","gameoversrc","gameoverimg","logic$1","tdelta","ball_lst$0","balls$0","speed","ball_vel","balls","rect","canvasX","canvasY","updateX","updateY","position","fake_ball","ball_pos","txtinvalidsrc","txtinvalidimg"],"mappings":"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","sources":["/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/stdlib.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/mlString.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/ieee_754.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/int64.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/jslib.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/jslib_js_of_ocaml.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/md5.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/io.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/fs.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/fs_fake.js","/home/max/.opam/4.06.0/lib/js_of_ocaml-compiler/fs_node.js","/home/max/CS 3110/8BallPool/_build/data.ml","/home/max/.opam/4.06.0/lib/ocaml/printf.ml","/home/max/.opam/4.06.0/lib/ocaml/camlinternalFormatBasics.ml","/home/max/.opam/4.06.0/lib/ocaml/pervasives.ml","/home/max/.opam/4.06.0/lib/ocaml/list.ml","/home/max/.opam/4.06.0/lib/ocaml/char.ml","/home/max/.opam/4.06.0/lib/ocaml/bytes.ml","/home/max/.opam/4.06.0/lib/ocaml/string.ml","/home/max/.opam/4.06.0/lib/ocaml/sys.ml","/home/max/.opam/4.06.0/lib/ocaml/map.ml","/home/max/.opam/4.06.0/lib/ocaml/camlinternalLazy.ml","/home/max/.opam/4.06.0/lib/ocaml/buffer.ml","/home/max/.opam/4.06.0/lib/ocaml/camlinternalFormat.ml","/home/max/.opam/4.06.0/lib/ocaml/printexc.ml","/home/max/.opam/4.06.0/lib/ocaml/random.ml","/home/max/.opam/4.06.0/lib/ocaml/hashtbl.ml","/home/max/.opam/4.06.0/lib/ocaml/digest.ml","/home/max/.opam/4.06.0/lib/ocaml/callback.ml","/home/max/.opam/4.06.0/lib/ocaml/filename.ml","/home/max/CS 3110/8BallPool/_build/ball.ml","/home/max/CS 3110/8BallPool/_build/draw.ml","/home/max/CS 3110/8BallPool/_build/physics.ml","/home/max/.opam/4.06.0/lib/ocaml/std_exit.ml"],"sourcesContent":["// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Core\n\n//Provides: raw_array_sub\nfunction raw_array_sub (a,i,l) {\n  var b = new Array(l);\n  for(var j = 0; j < l; j++) b[j] = a[i+j];\n  return b\n}\n\n//Provides: raw_array_copy\nfunction raw_array_copy (a) {\n  var l = a.length;\n  var b = new Array(l);\n  for(var i = 0; i < l; i++ ) b[i] = a[i];\n  return b\n}\n\n//Provides: raw_array_cons\nfunction raw_array_cons (a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  b[0]=x;\n  for(var i = 1; i <= l; i++ ) b[i] = a[i-1];\n  return b\n}\n\n//Provides: raw_array_append_one\nfunction raw_array_append_one(a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  var i = 0;\n  for(; i < l; i++ ) b[i] = a[i];\n  b[i]=x;\n  return b\n}\n\n//Provides: caml_call_gen (const, shallow)\n//Requires: raw_array_sub\n//Requires: raw_array_append_one\nfunction caml_call_gen(f, args) {\n  if(f.fun)\n    return caml_call_gen(f.fun, args);\n  var n = f.length;\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0)\n    return f.apply(null, args);\n  else if (d < 0)\n    return caml_call_gen(f.apply(null,\n                                 raw_array_sub(args,0,n)),\n                         raw_array_sub(args,n,argsLen - n));\n  else\n    return function (x){ return caml_call_gen(f, raw_array_append_one(args,x)); };\n}\n\n//Provides: caml_named_values\nvar caml_named_values = {};\n\n//Provides: caml_register_named_value (const,const)\n//Requires: caml_named_values, caml_bytes_of_string\nfunction caml_register_named_value(nm,v) {\n  caml_named_values[caml_bytes_of_string(nm)] = v;\n  return 0;\n}\n\n//Provides: caml_named_value\n//Requires: caml_named_values\nfunction caml_named_value(nm) {\n  return caml_named_values[nm]\n}\n\n//Provides: caml_global_data\nvar caml_global_data = [0];\n\n//Provides: caml_register_global (const, shallow, const)\n//Requires: caml_global_data\nfunction caml_register_global (n, v, name_opt) {\n  caml_global_data[n + 1] = v;\n  if(name_opt) caml_global_data[name_opt] = v;\n}\n\n//Provides: caml_get_global_data mutable\n//Requires: caml_global_data\nfunction caml_get_global_data () { return caml_global_data; }\n\n//Raise exception\n\n\n//Provides: caml_raise_constant (const)\n//Version: < 4.02\nfunction caml_raise_constant (tag) { throw [0, tag]; }\n\n//Provides: caml_raise_constant (const)\n//Version: >= 4.02\nfunction caml_raise_constant (tag) { throw tag; }\n\n//Provides: caml_return_exn_constant (const)\n//Version: < 4.02\nfunction caml_return_exn_constant (tag) { return [0, tag]; }\n\n//Provides: caml_return_exn_constant (const)\n//Version: >= 4.02\nfunction caml_return_exn_constant (tag) { return tag; }\n\n//Provides: caml_raise_with_arg (const, const)\nfunction caml_raise_with_arg (tag, arg) { throw [0, tag, arg]; }\n\n//Provides: caml_raise_with_string (const, const)\n//Requires: caml_raise_with_arg,caml_new_string\nfunction caml_raise_with_string (tag, msg) {\n  caml_raise_with_arg (tag, caml_new_string (msg));\n}\n\n//Provides: caml_raise_sys_error (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_raise_sys_error (msg) {\n  caml_raise_with_string(caml_global_data.Sys_error, msg);\n}\n\n//Provides: caml_failwith (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_failwith (msg) {\n  caml_raise_with_string(caml_global_data.Failure, msg);\n}\n\n//Provides: caml_wrap_exception const (const)\n//Requires: caml_global_data,caml_js_to_string,caml_named_value\n//Requires: caml_return_exn_constant\nfunction caml_wrap_exception(e) {\n  if(e instanceof Array) return e;\n  //Stack_overflow: chrome, safari\n  if(joo_global_object.RangeError\n     && e instanceof joo_global_object.RangeError\n     && e.message\n     && e.message.match(/maximum call stack/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Stack_overflow: firefox\n  if(joo_global_object.InternalError\n     && e instanceof joo_global_object.InternalError\n     && e.message\n     && e.message.match(/too much recursion/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Wrap Error in Js.Error exception\n  if(e instanceof joo_global_object.Error && caml_named_value(\"jsError\"))\n    return [0,caml_named_value(\"jsError\"),e];\n  //fallback: wrapped in Failure\n  return [0,caml_global_data.Failure,caml_js_to_string (String(e))];\n}\n\n// Experimental\n//Provides: caml_exn_with_js_backtrace\n//Requires: caml_global_data\nfunction caml_exn_with_js_backtrace(exn, force) {\n  if(!exn.js_error || force) exn.js_error = new joo_global_object.Error(\"Js exception containing backtrace\");\n  return exn;\n}\n//Provides: caml_js_error_of_exception\nfunction caml_js_error_of_exception(exn) {\n  if(exn.js_error) { return exn.js_error; }\n  return null;\n}\n\n//Provides: caml_invalid_argument (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_invalid_argument (msg) {\n  caml_raise_with_string(caml_global_data.Invalid_argument, msg);\n}\n\n//Provides: caml_raise_end_of_file\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_end_of_file () {\n  caml_raise_constant(caml_global_data.End_of_file);\n}\n\n//Provides: caml_raise_zero_divide\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_zero_divide () {\n  caml_raise_constant(caml_global_data.Division_by_zero);\n}\n\n//Provides: caml_raise_not_found\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_not_found () {\n  caml_raise_constant(caml_global_data.Not_found); }\n\n\n//Provides: caml_array_bound_error\n//Requires: caml_invalid_argument\nfunction caml_array_bound_error () {\n  caml_invalid_argument(\"index out of bounds\");\n}\n\n//Provides: caml_update_dummy\nfunction caml_update_dummy (x, y) {\n  if( typeof y===\"function\" ) { x.fun = y; return 0; }\n  if( y.fun ) { x.fun = y.fun; return 0; }\n  var i = y.length; while (i--) x[i] = y[i]; return 0;\n}\n\n//Provides: caml_obj_is_block const (const)\nfunction caml_obj_is_block (x) { return +(x instanceof Array); }\n//Provides: caml_obj_tag const (const)\n//Requires: MlString\nfunction caml_obj_tag (x) { return (x instanceof Array)?x[0]:(x instanceof MlString)?252:1000; }\n//Provides: caml_obj_set_tag (mutable, const)\nfunction caml_obj_set_tag (x, tag) { x[0] = tag; return 0; }\n//Provides: caml_obj_block const (const,const)\nfunction caml_obj_block (tag, size) {\n  var o = new Array(size+1);\n  o[0]=tag;\n  for (var i = 1; i <= size; i++) o[i] = 0;\n  return o;\n}\n//Provides: caml_obj_dup mutable (const)\nfunction caml_obj_dup (x) {\n  var l = x.length;\n  var a = new Array(l);\n  for(var i = 0; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n//Provides: caml_obj_truncate (mutable, const)\n//Requires: caml_invalid_argument\nfunction caml_obj_truncate (x, s) {\n  if (s<=0 || s + 1 > x.length)\n    caml_invalid_argument (\"Obj.truncate\");\n  if (x.length != s + 1) x.length = s + 1;\n  return 0;\n}\n\n//Provides: caml_lazy_make_forward const (const)\nfunction caml_lazy_make_forward (v) { return [250, v]; }\n\n//Provides: caml_mul const\nif (!Math.imul)\n  Math.imul =\n    function (x,y)\n    { y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; };\nvar caml_mul = Math.imul;\n\n//slightly slower\n// function mul32(x,y) {\n//   var xlo = x & 0xffff;\n//   var xhi = x - xlo;\n//   return (((xhi * y) |0) + xlo * y)|0;\n// }\n\n//Provides: caml_div\n//Requires: caml_raise_zero_divide\nfunction caml_div(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return (x/y)|0;\n}\n\n//Provides: caml_mod\n//Requires: caml_raise_zero_divide\nfunction caml_mod(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return x%y;\n}\n\n///////////// Pervasive\n//Provides: caml_array_set (mutable, const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_set (array, index, newval) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  array[index+1]=newval; return 0;\n}\n\n//Provides: caml_array_get mutable (const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_get (array, index) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  return array[index+1];\n}\n\n//Provides: caml_check_bound (const, const)\n//Requires: caml_array_bound_error\nfunction caml_check_bound (array, index) {\n  if (index >>> 0 >= array.length - 1) caml_array_bound_error();\n  return array;\n}\n\n//Provides: caml_make_vect const (const, const)\nfunction caml_make_vect (len, init) {\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=0;\n  for (var i = 1; i < len; i++) b[i] = init;\n  return b;\n}\n\n//Provides: caml_make_float_vect const (const)\nfunction caml_make_float_vect(len){\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n//Provides: caml_floatarray_create const (const)\nfunction caml_floatarray_create(len){\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n\n//Provides: caml_compare_val (const, const, const)\n//Requires: MlString, caml_int64_compare, caml_int_compare, caml_string_compare\n//Requires: caml_invalid_argument\nfunction caml_compare_val (a, b, total) {\n  var stack = [];\n  for(;;) {\n    if (!(total && a === b)) {\n      if (a instanceof MlString) {\n        if (b instanceof MlString) {\n            if (a !== b) {\n\t\tvar x = caml_string_compare(a, b);\n\t\tif (x != 0) return x;\n\t    }\n        } else\n          // Should not happen\n          return 1;\n      } else if (a instanceof Array && a[0] === (a[0]|0)) {\n        var ta = a[0];\n        // ignore double_array_tag\n        if (ta === 254) ta=0;\n        // Forward object\n        if (ta === 250) {\n          a = a[1];\n          continue;\n        } else if (b instanceof Array && b[0] === (b[0]|0)) {\n          var tb = b[0];\n          // ignore double_array_tag\n          if (tb === 254) tb=0;\n          // Forward object\n          if (tb === 250) {\n            b = b[1];\n            continue;\n          } else if (ta != tb) {\n            return (ta < tb)?-1:1;\n          } else {\n            switch (ta) {\n            case 248: {\n\t\t// Object\n\t\tvar x = caml_int_compare(a[2], b[2]);\n\t\tif (x != 0) return x;\n\t\tbreak;\n\t    }\n            case 251: {\n                caml_invalid_argument(\"equal: abstract value\");\n            }\n            case 255: {\n\t\t// Int64\n\t\tvar x = caml_int64_compare(a, b);\n\t\tif (x != 0) return x;\n\t\tbreak;\n\t    }\n            default:\n              if (a.length != b.length) return (a.length < b.length)?-1:1;\n              if (a.length > 1) stack.push(a, b, 1);\n            }\n          }\n        } else\n          return 1;\n      } else if (b instanceof MlString ||\n                 (b instanceof Array && b[0] === (b[0]|0))) {\n        return -1;\n      } else if (typeof a != \"number\" && a && a.compare) {\n        return a.compare(b,total);\n      } else if (typeof a == \"function\") {\n        caml_invalid_argument(\"compare: functional value\");\n      } else {\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n      }\n    }\n    if (stack.length == 0) return 0;\n    var i = stack.pop();\n    b = stack.pop();\n    a = stack.pop();\n    if (i + 1 < a.length) stack.push(a, b, i + 1);\n    a = a[i];\n    b = b[i];\n  }\n}\n//Provides: caml_compare (const, const)\n//Requires: caml_compare_val\nfunction caml_compare (a, b) { return caml_compare_val (a, b, true); }\n//Provides: caml_int_compare mutable (const, const)\nfunction caml_int_compare (a, b) {\n  if (a < b) return (-1); if (a == b) return 0; return 1;\n}\n//Provides: caml_equal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_equal (x, y) { return +(caml_compare_val(x,y,false) == 0); }\n//Provides: caml_notequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_notequal (x, y) { return +(caml_compare_val(x,y,false) != 0); }\n//Provides: caml_greaterequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterequal (x, y) { return +(caml_compare_val(x,y,false) >= 0); }\n//Provides: caml_greaterthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterthan (x, y) { return +(caml_compare_val(x,y,false) > 0); }\n//Provides: caml_lessequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessequal (x, y) { return +(caml_compare_val(x,y,false) <= 0); }\n//Provides: caml_lessthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessthan (x, y) { return +(caml_compare_val(x,y,false) < 0); }\n\n//Provides: caml_parse_sign_and_base\n//Requires: caml_string_unsafe_get, caml_ml_string_length\nfunction caml_parse_sign_and_base (s) {\n  var i = 0, len = caml_ml_string_length(s), base = 10,\n     sign = (len > 0 && caml_string_unsafe_get(s,0) == 45)?(i++,-1):1;\n  if (i + 1 < len && caml_string_unsafe_get(s, i) == 48)\n    switch (caml_string_unsafe_get(s, i + 1)) {\n    case 120: case 88: base = 16; i += 2; break;\n    case 111: case 79: base =  8; i += 2; break;\n    case  98: case 66: base =  2; i += 2; break;\n    }\n  return [i, sign, base];\n}\n\n//Provides: caml_parse_digit\nfunction caml_parse_digit(c) {\n  if (c >= 48 && c <= 57)  return c - 48;\n  if (c >= 65 && c <= 90)  return c - 55;\n  if (c >= 97 && c <= 122) return c - 87;\n  return -1;\n}\n\n//Provides: caml_int_of_string (const)\n//Requires: caml_ml_string_length, caml_string_unsafe_get\n//Requires: caml_parse_sign_and_base, caml_parse_digit, caml_failwith\nfunction caml_int_of_string (s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var len = caml_ml_string_length(s);\n  var threshold = -1 >>> 0;\n  var c = (i < len)?caml_string_unsafe_get(s, i):0;\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = d;\n  for (i++;i<len;i++) {\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    res = base * res + d;\n    if (res > threshold) caml_failwith(\"int_of_string\");\n  }\n  if (i != len) caml_failwith(\"int_of_string\");\n  // For base different from 10, we expect an unsigned representation,\n  // hence any value of 'res' (less than 'threshold') is acceptable.\n  // But we have to convert the result back to a signed integer.\n  res = sign * res;\n  if ((base == 10) && ((res | 0) != res))\n    /* Signed representation expected, allow -2^(nbits-1) to 2^(nbits-1) - 1 */\n    caml_failwith(\"int_of_string\");\n  return res | 0;\n}\n\n//Provides: caml_float_of_string (const)\n//Requires: caml_failwith, caml_bytes_of_string\nfunction caml_float_of_string(s) {\n  var res;\n  s = caml_bytes_of_string (s);\n  res = +s;\n  if ((s.length > 0) && (res === res)) return res;\n  s = s.replace(/_/g,\"\");\n  res = +s;\n  if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) return res;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);\n//            1        2             3           4\n  if(m){\n    var m3 = m[3].replace(/0+$/,'');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[4]|0) - 4*m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n  if(/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if(/^-inf(inity)?$/i.test(s)) return -Infinity;\n  caml_failwith(\"float_of_string\");\n}\n\n//Provides: caml_is_printable const (const)\nfunction caml_is_printable(c) { return +(c > 31 && c < 127); }\n\n///////////// Format\n//Provides: caml_parse_format\n//Requires: caml_bytes_of_string, caml_invalid_argument\nfunction caml_parse_format (fmt) {\n  fmt = caml_bytes_of_string(fmt);\n  var len = fmt.length;\n  if (len > 31) caml_invalid_argument(\"format_int: format too long\");\n  var f =\n    { justify:'+', signstyle:'-', filler:' ', alternate:false,\n      base:0, signedconv:false, width:0, uppercase:false,\n      sign:1, prec:-1, conv:'f' };\n  for (var i = 0; i < len; i++) {\n    var c = fmt.charAt(i);\n    switch (c) {\n    case '-':\n      f.justify = '-'; break;\n    case '+': case ' ':\n      f.signstyle = c; break;\n    case '0':\n      f.filler = '0'; break;\n    case '#':\n      f.alternate = true; break;\n    case '1': case '2': case '3': case '4': case '5':\n    case '6': case '7': case '8': case '9':\n      f.width = 0;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.width = f.width * 10 + c; i++\n      }\n      i--;\n     break;\n    case '.':\n      f.prec = 0;\n      i++;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.prec = f.prec * 10 + c; i++\n      }\n      i--;\n    case 'd': case 'i':\n      f.signedconv = true; /* fallthrough */\n    case 'u':\n      f.base = 10; break;\n    case 'x':\n      f.base = 16; break;\n    case 'X':\n      f.base = 16; f.uppercase = true; break;\n    case 'o':\n      f.base = 8; break;\n    case 'e': case 'f': case 'g':\n      f.signedconv = true; f.conv = c; break;\n    case 'E': case 'F': case 'G':\n      f.signedconv = true; f.uppercase = true;\n      f.conv = c.toLowerCase (); break;\n    }\n  }\n  return f;\n}\n\n//Provides: caml_finish_formatting\n//Requires: caml_new_string\nfunction caml_finish_formatting(f, rawbuffer) {\n  if (f.uppercase) rawbuffer = rawbuffer.toUpperCase();\n  var len = rawbuffer.length;\n  /* Adjust len to reflect additional chars (sign, etc) */\n  if (f.signedconv && (f.sign < 0 || f.signstyle != '-')) len++;\n  if (f.alternate) {\n    if (f.base == 8) len += 1;\n    if (f.base == 16) len += 2;\n  }\n  /* Do the formatting */\n  var buffer = \"\";\n  if (f.justify == '+' && f.filler == ' ')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  if (f.signedconv) {\n    if (f.sign < 0) buffer += '-';\n    else if (f.signstyle != '-') buffer += f.signstyle;\n  }\n  if (f.alternate && f.base == 8) buffer += '0';\n  if (f.alternate && f.base == 16) buffer += \"0x\";\n  if (f.justify == '+' && f.filler == '0')\n    for (var i = len; i < f.width; i++) buffer += '0';\n  buffer += rawbuffer;\n  if (f.justify == '-')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  return caml_new_string (buffer);\n}\n\n//Provides: caml_format_int const (const, const)\n//Requires: caml_parse_format, caml_finish_formatting, caml_str_repeat\n//Requires: caml_new_string, caml_bytes_of_string\nfunction caml_format_int(fmt, i) {\n  if (caml_bytes_of_string(fmt) == \"%d\") return caml_new_string(\"\"+i);\n  var f = caml_parse_format(fmt);\n  if (i < 0) { if (f.signedconv) { f.sign = -1; i = -i; } else i >>>= 0; }\n  var s = i.toString(f.base);\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - s.length;\n    if (n > 0) s = caml_str_repeat (n, '0') + s;\n  }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_format_float const\n//Requires: caml_parse_format, caml_finish_formatting\nfunction caml_format_float (fmt, x) {\n  var s, f = caml_parse_format(fmt);\n  var prec = (f.prec < 0)?6:f.prec;\n  if (x < 0 || (x == 0 && 1/x == -Infinity)) { f.sign = -1; x = -x; }\n  if (isNaN(x)) { s = \"nan\"; f.filler = ' '; }\n  else if (!isFinite(x)) { s = \"inf\"; f.filler = ' '; }\n  else\n    switch (f.conv) {\n    case 'e':\n      var s = x.toExponential(prec);\n      // exponent should be at least two digits\n      var i = s.length;\n      if (s.charAt(i - 3) == 'e')\n        s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n      break;\n    case 'f':\n      s = x.toFixed(prec); break;\n    case 'g':\n      prec = prec?prec:1;\n      s = x.toExponential(prec - 1);\n      var j = s.indexOf('e');\n      var exp = +s.slice(j + 1);\n      if (exp < -4 || x >= 1e21 || x.toFixed(0).length > prec) {\n        // remove trailing zeroes\n        var i = j - 1; while (s.charAt(i) == '0') i--;\n        if (s.charAt(i) == '.') i--;\n        s = s.slice(0, i + 1) + s.slice(j);\n        i = s.length;\n        if (s.charAt(i - 3) == 'e')\n          s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n        break;\n      } else {\n        var p = prec;\n        if (exp < 0) { p -= exp + 1; s = x.toFixed(p); }\n        else while (s = x.toFixed(p), s.length > prec + 1) p--;\n        if (p) {\n          // remove trailing zeroes\n          var i = s.length - 1; while (s.charAt(i) == '0') i--;\n          if (s.charAt(i) == '.') i--;\n          s = s.slice(0, i + 1);\n        }\n      }\n      break;\n    }\n  return caml_finish_formatting(f, s);\n}\n\n///////////// Hashtbl\n//Provides: caml_hash_univ_param mutable\n//Requires: MlString, caml_convert_string_to_bytes\n//Requires: caml_int64_to_bytes, caml_int64_bits_of_float\nfunction caml_hash_univ_param (count, limit, obj) {\n  var hash_accu = 0;\n  function hash_aux (obj) {\n    limit --;\n    if (count < 0 || limit < 0) return;\n    if (obj instanceof Array && obj[0] === (obj[0]|0)) {\n      switch (obj[0]) {\n      case 248:\n        // Object\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[2]) | 0;\n        break;\n      case 250:\n        // Forward\n        limit++; hash_aux(obj); break;\n      case 255:\n        // Int64\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[1] + (obj[2] << 24)) | 0;\n        break;\n      default:\n        count --;\n        hash_accu = (hash_accu * 19 + obj[0]) | 0;\n        for (var i = obj.length - 1; i > 0; i--) hash_aux (obj[i]);\n      }\n    } else if (obj instanceof MlString) {\n      count --;\n      switch (obj.t & 6) {\n      default: /* PARTIAL */\n        caml_convert_string_to_bytes(obj);\n      case 0: /* BYTES */\n        for (var b = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n        break;\n      case 2: /* ARRAY */\n        for (var a = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + a[i]) | 0;\n      }\n    } else if (obj === (obj|0)) {\n      // Integer\n      count --;\n      hash_accu = (hash_accu * 65599 + obj) | 0;\n    } else if (obj === +obj) {\n      // Float\n      count--;\n      var p = caml_int64_to_bytes (caml_int64_bits_of_float (obj));\n      for (var i = 7; i >= 0; i--) hash_accu = (hash_accu * 19 + p[i]) | 0;\n    }\n  }\n  hash_aux (obj);\n  return hash_accu & 0x3FFFFFFF;\n}\n\n//function ROTL32(x,n) { return ((x << n) | (x >>> (32-n))); }\n//Provides: caml_hash_mix_int\n//Requires: caml_mul\nfunction caml_hash_mix_int(h,d) {\n  d = caml_mul(d, 0xcc9e2d51|0);\n  d = ((d << 15) | (d >>> (32-15))); // ROTL32(d, 15);\n  d = caml_mul(d, 0x1b873593);\n  h ^= d;\n  h = ((h << 13) | (h >>> (32-13)));   //ROTL32(h, 13);\n  return (((h + (h << 2))|0) + (0xe6546b64|0))|0;\n}\n\n//Provides: caml_hash_mix_final\n//Requires: caml_mul\nfunction caml_hash_mix_final(h) {\n  h ^= h >>> 16;\n  h = caml_mul (h, 0x85ebca6b|0);\n  h ^= h >>> 13;\n  h = caml_mul (h, 0xc2b2ae35|0);\n  h ^= h >>> 16;\n  return h;\n}\n\n//Provides: caml_hash_mix_float\n//Requires: caml_hash_mix_int, caml_int64_bits_of_float\nfunction caml_hash_mix_float (h, v0) {\n  var v = caml_int64_bits_of_float (v0);\n  var lo = v[1] | (v[2] << 24);\n  var hi = (v[2] >>> 8) | (v[3] << 16);\n  h = caml_hash_mix_int(h, lo);\n  h = caml_hash_mix_int(h, hi);\n  return h;\n}\n//Provides: caml_hash_mix_int64\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_int64 (h, v) {\n  var lo = v[1] | (v[2] << 24);\n  var hi = (v[2] >>> 8) | (v[3] << 16);\n  h = caml_hash_mix_int(h, hi ^ lo);\n  return h;\n}\n\n//Provides: caml_hash_mix_string_str\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_string_str(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s.charCodeAt(i)\n        | (s.charCodeAt(i+1) << 8)\n        | (s.charCodeAt(i+2) << 16)\n        | (s.charCodeAt(i+3) << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s.charCodeAt(i+2) << 16;\n  case 2: w |= s.charCodeAt(i+1) << 8;\n  case 1: w |= s.charCodeAt(i);\n          h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_string_arr\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_string_arr(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s[i]\n      | (s[i+1] << 8)\n      | (s[i+2] << 16)\n      | (s[i+3] << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s[i+2] << 16;\n  case 2: w |= s[i+1] << 8;\n  case 1: w |= s[i];\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_string\n//Requires: caml_convert_string_to_bytes\n//Requires: caml_hash_mix_string_str\n//Requires: caml_hash_mix_string_arr\nfunction caml_hash_mix_string(h, v) {\n    switch (v.t & 6) {\n    default:\n        caml_convert_string_to_bytes (v);\n    case 0: /* BYTES */\n        h = caml_hash_mix_string_str(h, v.c);\n        break;\n    case 2: /* ARRAY */\n        h = caml_hash_mix_string_arr(h, v.c);\n    }\n    return h\n}\n\n\n//Provides: caml_hash mutable\n//Requires: MlString\n//Requires: caml_int64_bits_of_float, caml_hash_mix_int, caml_hash_mix_final\n//Requires: caml_hash_mix_int64, caml_hash_mix_float, caml_hash_mix_string\nvar HASH_QUEUE_SIZE = 256;\nfunction caml_hash (count, limit, seed, obj) {\n    var queue, rd, wr, sz, num, h, v, i, len;\n    sz = limit;\n    if (sz < 0 || sz > HASH_QUEUE_SIZE) sz = HASH_QUEUE_SIZE;\n    num = count;\n    h = seed;\n    queue = [obj]; rd = 0; wr = 1;\n    while (rd < wr && num > 0) {\n        v = queue[rd++];\n        if (v instanceof Array && v[0] === (v[0]|0)) {\n            switch (v[0]) {\n            case 248:\n                // Object\n                h = caml_hash_mix_int(h, v[2]);\n                num--;\n                break;\n            case 250:\n                // Forward\n                queue[--rd] = v[1];\n                break;\n            case 255:\n                // Int64\n                h = caml_hash_mix_int64 (h, v);\n                num --;\n                break;\n            default:\n                var tag = ((v.length - 1) << 10) | v[0];\n                h = caml_hash_mix_int(h, tag);\n                for (i = 1, len = v.length; i < len; i++) {\n                    if (wr >= sz) break;\n                    queue[wr++] = v[i];\n                }\n                break;\n            }\n        } else if (v instanceof MlString) {\n            h = caml_hash_mix_string(h,v)\n            num--;\n        } else if (v === (v|0)) {\n            // Integer\n            h = caml_hash_mix_int(h, v+v+1);\n            num--;\n        } else if (v === +v) {\n            // Float\n            h = caml_hash_mix_float(h,v);\n            num--;\n        }\n    }\n    h = caml_hash_mix_final(h);\n    return h & 0x3FFFFFFF;\n}\n\n///////////// Sys\n//Provides: caml_sys_time mutable\nvar caml_initial_time = new Date() * 0.001;\nfunction caml_sys_time () { return new Date() * 0.001 - caml_initial_time; }\n//Provides: caml_sys_get_config const\n//Requires: caml_new_string\nfunction caml_sys_get_config () {\n  return [0, caml_new_string(\"Unix\"), 32, 0];\n}\n\n//Provides: caml_sys_const_backend_type const\n//Requires: caml_new_string\nfunction caml_sys_const_backend_type () {\n  return [0, caml_new_string(\"js_of_ocaml\")];\n}\n\n\n//Provides: caml_sys_random_seed mutable\n//Version: < 4.00\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var x = new Date()^0xffffffff*Math.random();\n  return x;\n}\n\n//Provides: caml_sys_random_seed mutable\n//Version: >= 4.00\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var x = new Date()^0xffffffff*Math.random();\n  return [0,x];\n}\n\n\n\n//Provides: caml_sys_const_big_endian const\nfunction caml_sys_const_big_endian () { return 0; }\n//Provides: caml_sys_const_word_size const\nfunction caml_sys_const_word_size () { return 32; }\n//Provides: caml_sys_const_int_size const\nfunction caml_sys_const_int_size () { return 32; }\n\n//Provides: caml_sys_const_max_wosize const\n// max_int / 4 so that the following does not overflow\n//let max_string_length = word_size / 8 * max_array_length - 1;;\nfunction caml_sys_const_max_wosize () { return (0x7FFFFFFF/4) | 0;}\n\n//Provides: caml_sys_const_ostype_cygwin const\nfunction caml_sys_const_ostype_cygwin () { return 0; }\n//Provides: caml_sys_const_ostype_unix const\nfunction caml_sys_const_ostype_unix () { return 1; }\n//Provides: caml_sys_const_ostype_win32 const\nfunction caml_sys_const_ostype_win32 () { return 0; }\n\n//Provides: caml_sys_system_command\nfunction caml_sys_system_command(cmd){\n  var cmd = cmd.toString();\n  joo_global_object.console.log(cmd);\n  if (typeof require != \"undefined\"\n      && require('child_process')\n      && require('child_process').execSync) {\n    try {require('child_process').execSync(cmd); return 0}\n    catch (e) {return 1}\n  }\n  else return 127;\n}\n\n///////////// Array\n//Provides: caml_array_sub mutable\nfunction caml_array_sub (a, i, len) {\n  var a2 = new Array(len+1);\n  a2[0]=0;\n  for(var i2 = 1, i1= i+1; i2 <= len; i2++,i1++ ){\n    a2[i2]=a[i1];\n  }\n  return a2;\n}\n\n//Provides: caml_array_append mutable\nfunction caml_array_append(a1, a2) {\n  var l1 = a1.length, l2 = a2.length;\n  var l = l1+l2-1\n  var a = new Array(l);\n  a[0] = 0;\n  var i = 1,j = 1;\n  for(;i<l1;i++) a[i]=a1[i];\n  for(;i<l;i++,j++) a[i]=a2[j];\n  return a;\n}\n\n//Provides: caml_array_concat mutable\nfunction caml_array_concat(l) {\n  var a = [0];\n  while (l !== 0) {\n    var b = l[1];\n    for (var i = 1; i < b.length; i++) a.push(b[i]);\n    l = l[2];\n  }\n  return a;\n}\n\n//Provides: caml_array_blit\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n///////////// CamlinternalOO\n//Provides: caml_get_public_method const\nvar caml_method_cache = [];\nfunction caml_get_public_method (obj, tag, cacheid) {\n  var meths = obj[1];\n  var ofs = caml_method_cache[cacheid];\n  if (ofs === null) {\n    // Make sure the array is not sparse\n    for (var i = caml_method_cache.length; i < cacheid; i++)\n      caml_method_cache[i] = 0;\n  } else if (meths[ofs] === tag) {\n    return meths[ofs - 1];\n  }\n  var li = 3, hi = meths[1] * 2 + 1, mi;\n  while (li < hi) {\n    mi = ((li+hi) >> 1) | 1;\n    if (tag < meths[mi+1]) hi = mi-2;\n    else li = mi;\n  }\n  caml_method_cache[cacheid] = li + 1;\n  /* return 0 if tag is not there */\n  return (tag == meths[li+1] ? meths[li] : 0);\n}\n\n//Provides: caml_final_register const\nfunction caml_final_register () { return 0; }\n//Provides: caml_final_register_called_without_value const\nfunction caml_final_register_called_without_value () { return 0; }\n//Provides: caml_final_release const\nfunction caml_final_release () { return 0; }\n//Provides: caml_backtrace_status const\nfunction caml_backtrace_status () { return 0; }\n//Provides: caml_get_exception_backtrace const\nfunction caml_get_exception_backtrace () { return 0; }\n//Provides: caml_get_exception_raw_backtrace const\nfunction caml_get_exception_raw_backtrace () { return [0]; }\n//Provides: caml_record_backtrace\nfunction caml_record_backtrace () { return 0; }\n//Provides: caml_convert_raw_backtrace const\nfunction caml_convert_raw_backtrace () { return [0]; }\n//Provides: caml_raw_backtrace_length\nfunction caml_raw_backtrace_length() { return 0; }\n//Provides: caml_raw_backtrace_next_slot\nfunction caml_raw_backtrace_next_slot() { return 0 }\n//Provides: caml_raw_backtrace_slot\n//Requires: caml_invalid_argument\nfunction caml_raw_backtrace_slot () {\n  caml_invalid_argument(\"Printexc.get_raw_backtrace_slot: index out of bounds\");\n}\n//Provides: caml_get_current_callstack const\nfunction caml_get_current_callstack () { return [0]; }\n//Provides: caml_sys_getenv (const)\n//Requires: caml_raise_not_found\n//Requires: caml_js_to_string\nfunction caml_sys_getenv (name) {\n  var g = joo_global_object;\n  var n = name.toString();\n  //nodejs env\n  if(g.process\n     && g.process.env\n     && g.process.env[n] != undefined)\n    return caml_js_to_string(g.process.env[n]);\n  caml_raise_not_found ();\n}\n//Provides: caml_sys_exit\n//Requires: caml_invalid_argument\nfunction caml_sys_exit (code) {\n  var g = joo_global_object;\n  if(g.quit) g.quit(code);\n  //nodejs\n  if(g.process && g.process.exit)\n    g.process.exit(code);\n  caml_invalid_argument(\"Function 'exit' not implemented\");\n}\n\n//Provides: caml_sys_get_argv const\n//Requires: caml_js_to_string\n//Requires: raw_array_sub\nfunction caml_sys_get_argv () {\n  var g = joo_global_object;\n  var main = \"a.out\";\n  var args = []\n\n  if(g.process\n     && g.process.argv\n     && g.process.argv.length > 1) {\n    var argv = g.process.argv\n    //nodejs\n    main = argv[1];\n    args = raw_array_sub(argv,2,argv.length - 2);\n  }\n\n  var p = caml_js_to_string(main);\n  var args2 = [0, p];\n  for(var i = 0; i < args.length; i++)\n    args2.push(caml_js_to_string(args[i]));\n  return [0, p, args2];\n}\n\n//Provides: unix_inet_addr_of_string\nfunction unix_inet_addr_of_string () {return 0;}\n\n//Provides: caml_oo_last_id\nvar caml_oo_last_id = 0;\n\n//Provides: caml_set_oo_id\n//Requires: caml_oo_last_id\nfunction caml_set_oo_id (b) {\n  b[2]=caml_oo_last_id++;\n  return b;\n}\n\n//Provides: caml_fresh_oo_id\n//Requires: caml_oo_last_id\nfunction caml_fresh_oo_id() {\n  return caml_oo_last_id++;\n}\n\n//Provides: caml_install_signal_handler const\nfunction caml_install_signal_handler(){return 0}\n\n\n//Provides: caml_convert_raw_backtrace_slot\n//Requires: caml_failwith\nfunction caml_convert_raw_backtrace_slot(){\n  caml_failwith(\"caml_convert_raw_backtrace_slot\");\n}\n\n//Provides: caml_bswap16\nfunction caml_bswap16(x) {\n  return ((((x & 0x00FF) << 8) |\n           ((x & 0xFF00) >> 8)));\n}\n//Provides: caml_int32_bswap\nfunction caml_int32_bswap(x) {\n  return (((x & 0x000000FF) << 24) |\n          ((x & 0x0000FF00) << 8) |\n          ((x & 0x00FF0000) >>> 8) |\n          ((x & 0xFF000000) >>> 24));\n}\n//Provides: caml_int64_bswap\nfunction caml_int64_bswap(x) {\n  return [\n    255,\n    (((x[3] & 0x0000ff00) >> 8) |\n     ((x[3] & 0x000000ff) << 8) |\n     ((x[2] & 0x00ff0000))),\n    (((x[2] & 0x0000ff00) >> 8) |\n     ((x[2] & 0x000000ff) << 8) |\n     ((x[1] & 0x00ff0000))),\n    (((x[1] & 0x0000ff00) >> 8) |\n     ((x[1] & 0x000000ff) << 8))]\n}\n\n//Provides: caml_list_of_js_array const (const)\nfunction caml_list_of_js_array(a){\n  var l = 0;\n  for(var i=a.length - 1; i>=0; i--){\n    var e = a[i];\n    l = [0,e,l];\n  }\n  return l\n}\n\n//Provides: caml_runtime_warnings\nvar caml_runtime_warnings = 0;\n\n//Provides: caml_ml_enable_runtime_warnings\n//Requires: caml_runtime_warnings\nfunction caml_ml_enable_runtime_warnings (bool) {\n  caml_runtime_warnings = bool;\n  return 0;\n}\n\n//Provides: caml_ml_runtime_warnings_enabled\n//Requires: caml_runtime_warnings\nfunction caml_ml_runtime_warnings_enabled (_unit) {\n  return caml_runtime_warnings;\n}\n\n//Provides: caml_runtime_variant\n//Requires: caml_new_string\nfunction caml_runtime_variant(_unit) {\n  return caml_new_string(\"\");\n}\n//Provides: caml_runtime_parameters\n//Requires: caml_new_string\nfunction caml_runtime_parameters(_unit) {\n  return caml_new_string(\"\");\n}\n\n\n//Provides: caml_sys_isatty\nfunction caml_sys_isatty(_chan) {\n  return 0;\n}\n\n//Provides: caml_spacetime_enabled const (const)\nfunction caml_spacetime_enabled(_unit) {\n  return 0;\n}\n\n//Provides: caml_register_channel_for_spacetime const (const)\nfunction caml_register_channel_for_spacetime(_channel) {\n  return 0;\n}\n\n//Provides: caml_spacetime_only_works_for_native_code\n//Requires: caml_failwith\nfunction caml_spacetime_only_works_for_native_code() {\n  caml_failwith(\"Spacetime profiling only works for native code\");\n}\n\n\n//Provides: caml_is_js\nfunction caml_is_js() {\n  return 1;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010-2014 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// An OCaml string is an object with three fields:\n// - tag 't'\n// - length 'l'\n// - contents 'c'\n//\n// The contents of the string can be either a JavaScript array or\n// a JavaScript string. The length of this string can be less than the\n// length of the OCaml string. In this case, remaining bytes are\n// assumed to be zeroes. Arrays are mutable but consumes more memory\n// than strings. A common pattern is to start from an empty string and\n// progressively fill it from the start. Partial strings makes it\n// possible to implement this efficiently.\n//\n// When converting to and from UTF-16, we keep track of whether the\n// string is composed only of ASCII characters (in which case, no\n// conversion needs to be performed) or not.\n//\n// The string tag can thus take the following values:\n//   full string     BYTE | UNKNOWN:      0\n//                   BYTE | ASCII:        9\n//                   BYTE | NOT_ASCII:    8\n//   string prefix   PARTIAL:             2\n//   array           ARRAY:               4\n//\n// One can use bit masking to discriminate these different cases:\n//   known_encoding(x) = x&8\n//   is_ascii(x) =       x&1\n//   kind(x) =           x&6\n\n//Provides: caml_str_repeat\nfunction caml_str_repeat(n, s) {\n  if (s.repeat) return s.repeat(n); // ECMAscript 6 and Firefox 24+\n  var r = \"\", l = 0;\n  if (n == 0) return r;\n  for(;;) {\n    if (n & 1) r += s;\n    n >>= 1;\n    if (n == 0) return r;\n    s += s;\n    l++;\n    if (l == 9) {\n      s.slice(0,1); // flatten the string\n      // then, the flattening of the whole string will be faster,\n      // as it will be composed of larger pieces\n    }\n  }\n}\n\n//Provides: caml_subarray_to_string\n//Requires: raw_array_sub\nfunction caml_subarray_to_string (a, i, len) {\n  var f = String.fromCharCode;\n  if (i == 0 && len <= 4096 && len == a.length) return f.apply (null, a);\n  var s = \"\";\n  for (; 0 < len; i += 1024,len-=1024)\n    s += f.apply (null, raw_array_sub(a,i, Math.min(len, 1024)));\n  return s;\n}\n\n//Provides: caml_utf8_of_utf16\nfunction caml_utf8_of_utf16(s) {\n  for (var b = \"\", t = b, c, d, i = 0, l = s.length; i < l; i++) {\n    c = s.charCodeAt(i);\n    if (c < 0x80) {\n      for (var j = i + 1; (j < l) && (c = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    if (c < 0x800) {\n      t += String.fromCharCode(0xc0 | (c >> 6));\n      t += String.fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0xd800 || c >= 0xdfff) {\n      t += String.fromCharCode(0xe0 | (c >> 12),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    } else if (c >= 0xdbff || i + 1 == l ||\n               (d = s.charCodeAt(i + 1)) < 0xdc00 || d > 0xdfff) {\n      // Unmatched surrogate pair, replaced by \\ufffd (replacement character)\n      t += \"\\xef\\xbf\\xbd\";\n    } else {\n      i++;\n      c = (c << 10) + d - 0x35fdc00;\n      t += String.fromCharCode(0xf0 | (c >> 18),\n                               0x80 | ((c >> 12) & 0x3f),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    }\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_utf16_of_utf8\nfunction caml_utf16_of_utf8(s) {\n  for (var b = \"\", t = \"\", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {\n    c1 = s.charCodeAt(i);\n    if (c1 < 0x80) {\n      for (var j = i + 1; (j < l) && (c1 = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    v = 1;\n    if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n      c = c2 + (c1 << 6);\n      if (c1 < 0xe0) {\n        v = c - 0x3080;\n        if (v < 0x80) v = 1;\n      } else {\n        v = 2;\n        if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n          c = c2 + (c << 6);\n          if (c1 < 0xf0) {\n            v = c - 0xe2080;\n            if ((v < 0x800) || ((v >= 0xd7ff) && (v < 0xe000))) v = 2;\n          } else {\n              v = 3;\n              if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128) &&\n                  (c1 < 0xf5)) {\n                v = c2 - 0x3c82080 + (c << 6);\n                if (v < 0x10000 || v > 0x10ffff) v = 3;\n              }\n          }\n        }\n      }\n    }\n    if (v < 4) { // Invalid sequence\n      i -= v;\n      t += \"\\ufffd\";\n    } else if (v > 0xffff)\n      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF))\n    else\n      t += String.fromCharCode(v);\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_is_ascii\nfunction caml_is_ascii (s) {\n  // The regular expression gets better at around this point for all browsers\n  if (s.length < 24) {\n    // Spidermonkey gets much slower when s.length >= 24 (on 64 bit archs)\n    for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 127) return false;\n    return true;\n  } else\n    return !/[^\\x00-\\x7f]/.test(s);\n}\n\n//Provides: caml_to_js_string\n//Requires: caml_convert_string_to_bytes, caml_is_ascii, caml_utf16_of_utf8\nfunction caml_to_js_string(s) {\n  switch (s.t) {\n  case 9: /*BYTES | ASCII*/\n    return s.c;\n  default:\n    caml_convert_string_to_bytes(s);\n  case 0: /*BYTES | UNKOWN*/\n    if (caml_is_ascii(s.c)) {\n      s.t = 9; /*BYTES | ASCII*/\n      return s.c;\n    }\n    s.t = 8; /*BYTES | NOT_ASCII*/\n  case 8: /*BYTES | NOT_ASCII*/\n    return caml_utf16_of_utf8(s.c);\n  }\n}\n\n//Provides: caml_string_unsafe_get mutable\nfunction caml_string_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_bytes_unsafe_get mutable\nfunction caml_bytes_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_convert_string_to_array\nfunction caml_string_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_string_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_bytes_unsafe_set\n//Requires: caml_convert_string_to_array\nfunction caml_bytes_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_string_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_string_bound_error\n//Requires: caml_invalid_argument\nfunction caml_string_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_string_get\n//Requires: caml_string_bound_error, caml_string_unsafe_get\nfunction caml_string_get (s, i) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_get (s, i);\n}\n\n//Provides: caml_string_get16\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_string_get16(s,i) {\n  if (i >>> 0 >= s.l + 1) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_string_get32\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_string_get32(s,i) {\n  if (i >>> 0 >= s.l + 3) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1),\n      b3 = caml_string_unsafe_get (s, i + 2),\n      b4 = caml_string_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_string_get64\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_int64_of_bytes\nfunction caml_string_get64(s,i) {\n  if (i >>> 0 >= s.l + 7) caml_string_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_string_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get\n//Requires: caml_string_bound_error, caml_bytes_unsafe_get\nfunction caml_bytes_get (s, i) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_bytes_unsafe_get (s, i);\n}\n\n//Provides: caml_string_set\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_string_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_set (s, i, c);\n}\n\n//Provides: caml_string_set16\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_string_set16(s,i,i16){\n  if (i >>> 0 >= s.l + 1) caml_string_bound_error();\n  var b2 = 0xFF & i16 >> 8,\n      b1 = 0xFF & i16;\n  caml_string_unsafe_set (s, i + 0, b1);\n  caml_string_unsafe_set (s, i + 1, b2);\n  return 0\n}\n\n//Provides: caml_string_set32\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_string_set32(s,i,i32){\n  if (i >>> 0 >= s.l + 3) caml_string_bound_error();\n  var b4 = 0xFF & i32 >> 24,\n      b3 = 0xFF & i32 >> 16,\n      b2 = 0xFF & i32 >> 8,\n      b1 = 0xFF & i32;\n  caml_string_unsafe_set (s, i + 0, b1);\n  caml_string_unsafe_set (s, i + 1, b2);\n  caml_string_unsafe_set (s, i + 2, b3);\n  caml_string_unsafe_set (s, i + 3, b4);\n  return 0\n}\n\n//Provides: caml_string_set64\n//Requires: caml_string_bound_error, caml_string_unsafe_set\n//Requires: caml_int64_to_bytes\nfunction caml_string_set64(s,i,i64){\n  if (i >>> 0 >= s.l + 7) caml_string_bound_error();\n  var a = caml_int64_to_bytes(i64);\n  for(var j = 0; j < 8; j++) {\n    caml_string_unsafe_set (s, i + 7 - j, a[j]);\n  }\n  return 0\n}\n\n\n\n//Provides: caml_bytes_set\n//Requires: caml_string_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_bytes_unsafe_set (s, i, c);\n}\n\n//Provides: MlString\n//Requires: caml_to_js_string\nfunction MlString (tag, contents, length) {\n  this.t=tag; this.c=contents; this.l=length;\n}\nMlString.prototype.toString = function(){return caml_to_js_string(this)};\n\n//Provides: caml_convert_string_to_bytes\n//Requires: caml_str_repeat, caml_subarray_to_string\nfunction caml_convert_string_to_bytes (s) {\n  /* Assumes not BYTES */\n  if (s.t == 2 /* PARTIAL */)\n    s.c += caml_str_repeat(s.l - s.c.length, '\\0')\n  else\n    s.c = caml_subarray_to_string (s.c, 0, s.c.length);\n  s.t = 0; /*BYTES | UNKOWN*/\n}\n\n//Provides: caml_convert_string_to_array\nfunction caml_convert_string_to_array (s) {\n  /* Assumes not ARRAY */\n  if(joo_global_object.Uint8Array) {\n    var a = new joo_global_object.Uint8Array(s.l);\n  } else {\n    var a = new Array(s.l);\n  }\n  var b = s.c, l = b.length, i = 0;\n  for (; i < l; i++) a[i] = b.charCodeAt(i);\n  for (l = s.l; i < l; i++) a[i] = 0;\n  s.c = a;\n  s.t = 4; /* ARRAY */\n  return a;\n}\n\n//Provides: caml_array_of_string mutable\n//Requires: caml_convert_string_to_array\nfunction caml_array_of_string (s) {\n  if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n  return s.c;\n}\n\n//Provides: caml_bytes_of_string mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_of_string (s) {\n  if ((s.t & 6) != 0 /* BYTES */) caml_convert_string_to_bytes(s);\n  return s.c;\n}\n\n//Provides: caml_js_to_string const\n//Requires: caml_is_ascii, caml_utf8_of_utf16, MlString\nfunction caml_js_to_string (s) {\n  var tag = 9 /* BYTES | ASCII */;\n  if (!caml_is_ascii(s))\n    tag = 8 /* BYTES | NOT_ASCII */, s = caml_utf8_of_utf16(s);\n  return new MlString(tag, s, s.length);\n}\n\n//Provides: caml_create_string const\n//Requires: MlString,caml_invalid_argument\nfunction caml_create_string(len) {\n  if (len < 0) caml_invalid_argument(\"String.create\");\n  return new MlString(len?2:9,\"\",len);\n}\n//Provides: caml_create_bytes const\n//Requires: MlString,caml_invalid_argument\nfunction caml_create_bytes(len) {\n  if (len < 0) caml_invalid_argument(\"Bytes.create\");\n  return new MlString(len?2:9,\"\",len);\n}\n\n//Provides: caml_new_string\n//Requires: MlString\nfunction caml_new_string (s) { return new MlString(0,s,s.length); }\n//Provides: caml_string_of_array\n//Requires: MlString\nfunction caml_string_of_array (a) { return new MlString(4,a,a.length); }\n\n//Provides: caml_string_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n\n//Provides: caml_bytes_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n//Provides: caml_string_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_bytes_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_string_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_string_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_bytes_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_bytes_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_string_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_string_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_string_greaterequal\n//Requires: caml_string_lessequal\nfunction caml_string_greaterequal(s1, s2) {\n  return caml_string_lessequal(s2,s1);\n}\n//Provides: caml_bytes_greaterequal\n//Requires: caml_bytes_lessequal\nfunction caml_bytes_greaterequal(s1, s2) {\n  return caml_bytes_lessequal(s2,s1);\n}\n\n//Provides: caml_string_greaterthan\n//Requires: caml_string_lessthan\nfunction caml_string_greaterthan(s1, s2) {\n  return caml_string_lessthan(s2, s1);\n}\n\n//Provides: caml_bytes_greaterthan\n//Requires: caml_bytes_lessthan\nfunction caml_bytes_greaterthan(s1, s2) {\n  return caml_bytes_lessthan(s2, s1);\n}\n\n//Provides: caml_fill_string\n//Requires: caml_str_repeat, caml_convert_string_to_array\nfunction caml_fill_string(s, i, l, c) {\n  if (l > 0) {\n    if (i == 0 && (l >= s.l || (s.t == 2 /* PARTIAL */ && l >= s.c.length))) {\n      if (c == 0) {\n        s.c = \"\";\n        s.t = 2; /* PARTIAL */\n      } else {\n        s.c = caml_str_repeat (l, String.fromCharCode(c));\n        s.t = (l == s.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n      }\n    } else {\n      if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n      for (l += i; i < l; i++) s.c[i] = c;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_fill_bytes\n//Requires: caml_fill_string\nvar caml_fill_bytes = caml_fill_string\n\n//Provides: caml_blit_string\n//Requires: caml_subarray_to_string, caml_convert_string_to_array\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len == 0) return 0;\n  if ((i2 == 0) &&\n      (len >= s2.l || (s2.t == 2 /* PARTIAL */ && len >= s2.c.length))) {\n    s2.c = (s1.t == 4 /* ARRAY */)?\n             caml_subarray_to_string(s1.c, i1, len):\n             (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else if (s2.t == 2 /* PARTIAL */ && i2 == s2.c.length) {\n    s2.c += (s1.t == 4 /* ARRAY */)?\n             caml_subarray_to_string(s1.c, i1, len):\n             (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else {\n    if (s2.t != 4 /* ARRAY */) caml_convert_string_to_array(s2);\n    var c1 = s1.c, c2 = s2.c;\n    if (s1.t == 4 /* ARRAY */) {\n        if (i2 <= i1) {\n          for (var i = 0; i < len; i++) c2 [i2 + i] = c1 [i1 + i];\n        } else {\n          for (var i = len - 1; i >= 0; i--) c2 [i2 + i] = c1 [i1 + i];\n        }\n   } else {\n      var l = Math.min (len, c1.length - i1);\n      for (var i = 0; i < l; i++) c2 [i2 + i] = c1.charCodeAt(i1 + i);\n      for (; i < len; i++) c2 [i2 + i] = 0;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_bytes\n//Requires: caml_blit_string\nvar caml_blit_bytes = caml_blit_string\n\n//Provides: caml_ml_string_length const\nfunction caml_ml_string_length(s) { return s.l }\n\n//Provides: caml_ml_bytes_length const\nfunction caml_ml_bytes_length(s) { return s.l }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: jsoo_floor_log2\nvar log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020\nfunction jsoo_floor_log2(x) {\n    if(log2_ok) return Math.floor(Math.log2(x))\n    var i = 0;\n    if (x == 0) return -Infinity;\n    if(x>=1) {while (x>=2) {x/=2; i++} }\n    else {while (x < 1) {x*=2; i--} };\n    return i;\n}\n\n//Provides: caml_int64_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int64_bits_of_float (x) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return [255, 1, 0, 0x7ff0];\n    return (x > 0)?[255,0,0,0x7ff0]:[255,0,0,0xfff0];\n  }\n  var sign = (x==0 && 1/x == -Infinity)?0x8000:(x>=0)?0:0x8000;\n  if (sign) x = -x;\n  // Int64.bits_of_float 1.1235582092889474E+307 = 0x7fb0000000000000L\n  // using Math.LOG2E*Math.log(x) in place of Math.log2 result in precision lost\n  var exp = jsoo_floor_log2(x) + 1023;\n  if (exp <= 0) {\n    exp = 0;\n    x /= Math.pow(2,-1026);\n  } else {\n    x /= Math.pow(2,exp-1027);\n    if (x < 16) {\n      x *= 2; exp -=1; }\n    if (exp == 0) {\n      x /= 2; }\n  }\n  var k = Math.pow(2,24);\n  var r3 = x|0;\n  x = (x - r3) * k;\n  var r2 = x|0;\n  x = (x - r2) * k;\n  var r1 = x|0;\n  r3 = (r3 &0xf) | sign | exp << 4;\n  return [255, r1, r2, r3];\n}\n\n//Provides: caml_int32_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int32_bits_of_float (x) {\n  var float32a = new joo_global_object.Float32Array(1);\n  float32a[0] = x;\n  var int32a = new joo_global_object.Int32Array(float32a.buffer);\n  return int32a[0] | 0;\n}\n\n//FP literals can be written using the hexadecimal\n//notation 0x<mantissa in hex>p<exponent> from ISO C99.\n//https://github.com/dankogai/js-hexfloat/blob/master/hexfloat.js\n//Provides: caml_hexstring_of_float const\n//Requires: caml_js_to_string, caml_str_repeat\nfunction caml_hexstring_of_float (x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return caml_js_to_string(\"nan\");\n    return caml_js_to_string ((x > 0)?\"infinity\":\"-infinity\");\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n      var cst = Math.pow(2,prec * 4);\n      x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n      var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' + caml_str_repeat(prec, '0');\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += caml_str_repeat(size - x_str.length, '0');\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return caml_js_to_string (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n}\n\n//Provides: caml_int64_float_of_bits const\nfunction caml_int64_float_of_bits (x) {\n  var exp = (x[3] & 0x7fff) >> 4;\n  if (exp == 2047) {\n      if ((x[1]|x[2]|(x[3]&0xf)) == 0)\n        return (x[3] & 0x8000)?(-Infinity):Infinity;\n      else\n        return NaN;\n  }\n  var k = Math.pow(2,-24);\n  var res = (x[1]*k+x[2])*k+(x[3]&0xf);\n  if (exp > 0) {\n    res += 16;\n    res *= Math.pow(2,exp-1027);\n  } else\n    res *= Math.pow(2,-1026);\n  if (x[3] & 0x8000) res = - res;\n  return res;\n}\n\n//Provides: caml_int32_float_of_bits const\nfunction caml_int32_float_of_bits (x) {\n  var int32a = new joo_global_object.Int32Array(1);\n  int32a[0] = x;\n  var float32a = new joo_global_object.Float32Array(int32a.buffer);\n  return float32a[0];\n}\n\n//Provides: caml_classify_float const\nfunction caml_classify_float (x) {\n  if (isFinite (x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) return 0;\n    if (x != 0) return 1;\n    return 2;\n  }\n  return isNaN(x)?4:3;\n}\n//Provides: caml_modf_float const\nfunction caml_modf_float (x) {\n  if (isFinite (x)) {\n    var neg = (1/x) < 0;\n    x = Math.abs(x);\n    var i = Math.floor (x);\n    var f = x - i;\n    if (neg) { i = -i; f = -f; }\n    return [0, f, i];\n  }\n  if (isNaN (x)) return [0, NaN, NaN];\n  return [0, 1/x, x];\n}\n//Provides: caml_ldexp_float const\nfunction caml_ldexp_float (x,exp) {\n  exp |= 0;\n  if (exp > 1023) {\n    exp -= 1023;\n    x *= Math.pow(2, 1023);\n    if (exp > 1023) {  // in case x is subnormal\n      exp -= 1023;\n      x *= Math.pow(2, 1023);\n    }\n  }\n  if (exp < -1023) {\n    exp += 1023;\n    x *= Math.pow(2, -1023);\n  }\n  x *= Math.pow(2, exp);\n  return x;\n}\n//Provides: caml_frexp_float const\n//Requires: jsoo_floor_log2\nfunction caml_frexp_float (x) {\n  if ((x == 0) || !isFinite(x)) return [0, x, 0];\n  var neg = x < 0;\n  if (neg) x = - x;\n  var exp = jsoo_floor_log2(x) + 1;\n  x *= Math.pow(2,-exp);\n  if (x < 0.5) { x *= 2; exp -= 1; }\n  if (neg) x = - x;\n  return [0, x, exp];\n}\n\n//Provides: caml_float_compare const\nfunction caml_float_compare (x, y) {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  if (x > y) return 1;\n  if (x === x) return 1;\n  if (y === y) return -1;\n  return 0;\n}\n\n//Provides: caml_copysign_float const\nfunction caml_copysign_float (x, y) {\n  if (y == 0) y = 1 / y;\n  x = Math.abs(x);\n  return (y < 0)?(-x):x;\n}\n\n//Provides: caml_expm1_float const\nfunction caml_expm1_float (x) {\n  var y = Math.exp(x), z = y - 1;\n  return (Math.abs(x)>1?z:(z==0?x:x*z/Math.log(y)));\n}\n\n//Provides: caml_log1p_float const\nfunction caml_log1p_float (x) {\n  var y = 1 + x, z = y - 1;\n  return (z==0?x:x*Math.log(y)/z);\n}\n\n//Provides: caml_hypot_float const\nfunction caml_hypot_float (x, y) {\n  var x = Math.abs(x), y = Math.abs(y);\n  var a = Math.max(x, y), b = Math.min(x,y) / (a?a:1);\n  return (a * Math.sqrt(1 + b*b));\n}\n\n// FIX: these five functions only give approximate results.\n//Provides: caml_log10_float const\nfunction caml_log10_float (x) { return Math.LOG10E * Math.log(x); }\n//Provides: caml_cosh_float const\nfunction caml_cosh_float (x) { return (Math.exp(x) + Math.exp(-x)) / 2; }\n//Provides: caml_sinh_float const\nfunction caml_sinh_float (x) { return (Math.exp(x) - Math.exp(-x)) / 2; }\n//Provides: caml_tanh_float const\nfunction caml_tanh_float (x) {\n  var y = Math.exp(x), z = Math.exp(-x);\n  return (y - z) / (y + z);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_int64_offset\nvar caml_int64_offset = Math.pow(2, -24);\n\n//Provides: caml_int64_ucompare const\nfunction caml_int64_ucompare(x,y) {\n  if (x[3] > y[3]) return 1;\n  if (x[3] < y[3]) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_ult const\n//Requires: caml_int64_ucompare\nfunction caml_int64_ult(x,y) { return caml_int64_ucompare(x,y) < 0; }\n\n//Provides: caml_int64_compare const\nfunction caml_int64_compare(x,y) {\n  var x3 = x[3] << 16;\n  var y3 = y[3] << 16;\n  if (x3 > y3) return 1;\n  if (x3 < y3) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_neg const\nfunction caml_int64_neg (x) {\n  var y1 = - x[1];\n  var y2 = - x[2] + (y1 >> 24);\n  var y3 = - x[3] + (y2 >> 24);\n  return [255, y1 & 0xffffff, y2 & 0xffffff, y3 & 0xffff];\n}\n\n//Provides: caml_int64_add const\nfunction caml_int64_add (x, y) {\n  var z1 = x[1] + y[1];\n  var z2 = x[2] + y[2] + (z1 >> 24);\n  var z3 = x[3] + y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_sub const\nfunction caml_int64_sub (x, y) {\n  var z1 = x[1] - y[1];\n  var z2 = x[2] - y[2] + (z1 >> 24);\n  var z3 = x[3] - y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_mul const\n//Requires: caml_int64_offset\nfunction caml_int64_mul(x,y) {\n  var z1 = x[1] * y[1];\n  var z2 = ((z1 * caml_int64_offset) | 0) + x[2] * y[1] + x[1] * y[2];\n  var z3 = ((z2 * caml_int64_offset) | 0) + x[3] * y[1] + x[2] * y[2] + x[1] * y[3];\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_is_zero const\nfunction caml_int64_is_zero(x) {\n  return (x[3]|x[2]|x[1]) == 0;\n}\n\n//Provides: caml_int64_is_negative const\nfunction caml_int64_is_negative(x) {\n  return (x[3] << 16) < 0;\n}\n\n//Provides: caml_int64_is_min_int const\nfunction caml_int64_is_min_int(x) {\n  return x[3] == 0x8000 && (x[1]|x[2]) == 0;\n}\n\n//Provides: caml_int64_is_minus_one const\nfunction caml_int64_is_minus_one(x) {\n  return x[3] == 0xffff && (x[1]&x[2]) == 0xffffff;\n}\n\n//Provides: caml_int64_and const\nfunction caml_int64_and (x, y) {\n  return [255, x[1]&y[1], x[2]&y[2], x[3]&y[3]];\n}\n\n//Provides: caml_int64_or const\nfunction caml_int64_or (x, y) {\n  return [255, x[1]|y[1], x[2]|y[2], x[3]|y[3]];\n}\n\n//Provides: caml_int64_xor const\nfunction caml_int64_xor (x, y) {\n  return [255, x[1]^y[1], x[2]^y[2], x[3]^y[3]];\n}\n\n//Provides: caml_int64_shift_left const\nfunction caml_int64_shift_left (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            (x[1] << s) & 0xffffff,\n            ((x[2] << s) | (x[1] >> (24 - s))) & 0xffffff,\n            ((x[3] << s) | (x[2] >> (24 - s))) & 0xffff];\n  if (s < 48)\n    return [255, 0,\n            (x[1] << (s - 24)) & 0xffffff,\n            ((x[2] << (s - 24)) | (x[1] >> (48 - s))) & 0xffff];\n  return [255, 0, 0, (x[1] << (s - 48)) & 0xffff];\n}\n\n//Provides: caml_int64_shift_right_unsigned const\nfunction caml_int64_shift_right_unsigned (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (x[3] << (24 - s))) & 0xffffff,\n            (x[3] >> s)];\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            (x[3] >> (s - 24)),\n            0];\n  return [255, (x[3] >> (s - 48)), 0, 0];\n}\n\n//Provides: caml_int64_shift_right const\nfunction caml_int64_shift_right (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  var h = (x[3] << 16) >> 16;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (h << (24 - s))) & 0xffffff,\n            ((x[3] << 16) >> s) >>> 16];\n  var sign = (x[3] << 16) >> 31;\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            ((x[3] << 16) >> (s - 24) >> 16) & 0xffffff,\n            sign & 0xffff];\n  return [255,\n          ((x[3] << 16) >> (s - 32)) & 0xffffff,\n          sign & 0xffffff, sign & 0xffff];\n}\n\n//Provides: caml_int64_lsl1 const\nfunction caml_int64_lsl1 (x) {\n  x[3] = (x[3] << 1) | (x[2] >> 23);\n  x[2] = ((x[2] << 1) | (x[1] >> 23)) & 0xffffff;\n  x[1] = (x[1] << 1) & 0xffffff;\n}\n\n//Provides: caml_int64_lsr1 const\nfunction caml_int64_lsr1 (x) {\n  x[1] = ((x[1] >>> 1) | (x[2] << 23)) & 0xffffff;\n  x[2] = ((x[2] >>> 1) | (x[3] << 23)) & 0xffffff;\n  x[3] = x[3] >>> 1;\n}\n\n//Provides: caml_int64_udivmod const\n//Requires: caml_int64_ucompare, caml_int64_lsl1, caml_int64_lsr1\n//Requires: caml_int64_sub\n//Requires: caml_obj_dup\nfunction caml_int64_udivmod (x, y) {\n  var offset = 0;\n  var modulus = caml_obj_dup(x);\n  var divisor = caml_obj_dup(y);\n  var quotient = [255, 0, 0, 0];\n  while (caml_int64_ucompare (modulus, divisor) > 0) {\n    offset++;\n    caml_int64_lsl1 (divisor);\n  }\n  while (offset >= 0) {\n    offset --;\n    caml_int64_lsl1 (quotient);\n    if (caml_int64_ucompare (modulus, divisor) >= 0) {\n      quotient[1] ++;\n      modulus = caml_int64_sub (modulus, divisor);\n    }\n    caml_int64_lsr1 (divisor);\n  }\n  return [0,quotient, modulus];\n}\n\n//Provides: caml_int64_div const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_div (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3] ^ y[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var q = caml_int64_udivmod(x, y)[1];\n  if (sign & 0x8000) q = caml_int64_neg(q);\n  return q;\n}\n\n//Provides: caml_int64_mod const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_mod (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var r = caml_int64_udivmod(x, y)[2];\n  if (sign & 0x8000) r = caml_int64_neg(r);\n  return r;\n}\n\n//Provides: caml_int64_of_int32 const\nfunction caml_int64_of_int32 (x) {\n  return [255, x & 0xffffff, (x >> 24) & 0xffffff, (x >> 31) & 0xffff]\n}\n\n//Provides: caml_int64_to_int32 const\nfunction caml_int64_to_int32 (x) {\n  return x[1] | (x[2] << 24);\n}\n\n//Provides: caml_int64_to_float const\nfunction caml_int64_to_float (x) {\n  return ((x[3] << 16) * Math.pow(2, 32) + x[2] * Math.pow(2, 24)) + x[1];\n}\n\n//Provides: caml_int64_of_float const\n//Requires: caml_int64_offset\nfunction caml_int64_of_float (x) {\n  if (x < 0) x = Math.ceil(x);\n  return [255,\n          x & 0xffffff,\n          Math.floor(x * caml_int64_offset) & 0xffffff,\n          Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff];\n}\n\n//Provides: caml_int64_format const\n//Requires: caml_parse_format, caml_finish_formatting\n//Requires: caml_int64_is_negative, caml_int64_neg\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_to_int32\n//Requires: caml_int64_is_zero, caml_str_repeat\nfunction caml_int64_format (fmt, x) {\n  var f = caml_parse_format(fmt);\n  if (f.signedconv && caml_int64_is_negative(x)) {\n    f.sign = -1; x = caml_int64_neg(x);\n  }\n  var buffer = \"\";\n  var wbase = caml_int64_of_int32(f.base);\n  var cvtbl = \"0123456789abcdef\";\n  do {\n    var p = caml_int64_udivmod(x, wbase);\n    x = p[1];\n    buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer;\n  } while (! caml_int64_is_zero(x));\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - buffer.length;\n    if (n > 0) buffer = caml_str_repeat (n, '0') + buffer;\n  }\n  return caml_finish_formatting(f, buffer);\n}\n\n//Provides: caml_int64_of_string\n//Requires: caml_parse_sign_and_base, caml_failwith, caml_parse_digit, MlString\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_ult\n//Requires: caml_int64_add, caml_int64_mul, caml_int64_neg\n//Requires: caml_ml_string_length,caml_string_unsafe_get\nfunction caml_int64_of_string(s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var base64 = caml_int64_of_int32(base);\n  var threshold =\n    caml_int64_udivmod([255, 0xffffff, 0xfffffff, 0xffff], base64)[1];\n  var c = caml_string_unsafe_get(s, i);\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = caml_int64_of_int32(d);\n  for (;;) {\n    i++;\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    /* Detect overflow in multiplication base * res */\n    if (caml_int64_ult(threshold, res)) caml_failwith(\"int_of_string\");\n    d = caml_int64_of_int32(d);\n    res = caml_int64_add(caml_int64_mul(base64, res), d);\n    /* Detect overflow in addition (base * res) + d */\n    if (caml_int64_ult(res, d)) caml_failwith(\"int_of_string\");\n  }\n  if (i != caml_ml_string_length(s)) caml_failwith(\"int_of_string\");\n  if (r[2] == 10 && caml_int64_ult([255, 0, 0, 0x8000], res))\n    caml_failwith(\"int_of_string\");\n  if (sign < 0) res = caml_int64_neg(res);\n  return res;\n}\n\n//Provides: caml_int64_of_bytes\nfunction caml_int64_of_bytes(a) {\n  return [255, a[7] | (a[6] << 8) | (a[5] << 16),\n          a[4] | (a[3] << 8) | (a[2] << 16), a[1] | (a[0] << 8)];\n}\n//Provides: caml_int64_to_bytes\nfunction caml_int64_to_bytes(x) {\n  return [x[3] >> 8, x[3] & 0xff, x[2] >> 16, (x[2] >> 8) & 0xff, x[2] & 0xff,\n          x[1] >> 16, (x[1] >> 8) & 0xff, x[1] & 0xff];\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib\n\n//Provides: caml_js_pure_expr const\nfunction caml_js_pure_expr (f) { return f(); }\n\n//Provides: caml_js_set (mutable, const, const)\nfunction caml_js_set(o,f,v) { o[f]=v;return 0}\n//Provides: caml_js_get mutable (const, const)\nfunction caml_js_get(o,f) { return o[f]; }\n//Provides: caml_js_delete (mutable, const)\nfunction caml_js_delete(o,f) { delete o[f]; return 0}\n\n//Provides: caml_js_instanceof (const, const)\nfunction caml_js_instanceof(o,c) { return o instanceof c; }\n\n//Provides: caml_js_typeof (const)\nfunction caml_js_typeof(o) { return typeof o; }\n\n//Provides: caml_js_on_ie const\nfunction caml_js_on_ie () {\n  var ua =\n    joo_global_object.navigator?joo_global_object.navigator.userAgent:\"\";\n  return ua.indexOf(\"MSIE\") != -1 && ua.indexOf(\"Opera\") != 0;\n}\n\n//Provides: caml_js_html_escape const (const)\nvar caml_js_regexps = { amp:/&/g, lt:/</g, quot:/\\\"/g, all:/[&<\\\"]/ };\nfunction caml_js_html_escape (s) {\n  if (!caml_js_regexps.all.test(s)) return s;\n  return s.replace(caml_js_regexps.amp, \"&amp;\")\n          .replace(caml_js_regexps.lt, \"&lt;\")\n          .replace(caml_js_regexps.quot, \"&quot;\");\n}\n\n//Provides: caml_js_html_entities const (const)\nfunction caml_js_html_entities(s) {\n    var str, temp = document.createElement('p');\n    temp.innerHTML= s;\n    str= temp.textContent || temp.innerText;\n    temp=null;\n    return str;\n}\n\n/////////// Debugging console\n//Provides: caml_js_get_console const\nfunction caml_js_get_console () {\n  var c = joo_global_object.console?joo_global_object.console:{};\n  var m = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"assert\", \"dir\", \"dirxml\",\n           \"trace\", \"group\", \"groupCollapsed\", \"groupEnd\", \"time\", \"timeEnd\"];\n  function f () {}\n  for (var i = 0; i < m.length; i++) if (!c[m[i]]) c[m[i]]=f;\n  return c;\n}\n\n//Provides:caml_trampoline\nfunction caml_trampoline(res) {\n  var c = 1;\n  while(res && res.joo_tramp){\n    res = res.joo_tramp.apply(null, res.joo_args);\n    c++;\n  }\n  return res;\n}\n\n//Provides:caml_trampoline_return\nfunction caml_trampoline_return(f,args) {\n  return {joo_tramp:f,joo_args:args};\n}\n\n//Provides: js_print_stdout (const)\nfunction js_print_stdout(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stdout.write(s)\n  } else {\n  // Do not output the last \\n if present\n  // as console logging display a newline at the end\n  if(s.charCodeAt(s.length - 1) == 10)\n    s = s.substr(0,s.length - 1 );\n  var v = g.console;\n  v  && v.log && v.log(s);\n  }\n}\n//Provides: js_print_stderr (const)\nfunction js_print_stderr(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stderr.write(s)\n  } else {\n  // Do not output the last \\n if present\n  // as console logging display a newline at the end\n  if(s.charCodeAt(s.length - 1) == 10)\n    s = s.substr(0,s.length - 1 );\n  var v = g.console;\n  v && v.error && v.error(s);\n  }\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib: code specific to Js_of_ocaml\n\n//Provides: caml_js_from_bool const (const)\nfunction caml_js_from_bool(x) { return !!x; }\n//Provides: caml_js_to_bool const (const)\nfunction caml_js_to_bool(x) { return +x; }\n//Provides: caml_js_from_float const (const)\nfunction caml_js_from_float(x) { return x; }\n//Provides: caml_js_to_float const (const)\nfunction caml_js_to_float(x) { return x; }\n//Provides: caml_js_from_string mutable (const)\n//Requires: MlString\nfunction caml_js_from_string(s) { return s.toString(); }\n//Provides: caml_js_from_array mutable (shallow)\n//Requires: raw_array_sub\nfunction caml_js_from_array(a) { return raw_array_sub(a,1,a.length-1); }\n//Provides: caml_js_to_array mutable (shallow)\n//Requires: raw_array_cons\nfunction caml_js_to_array(a) { return raw_array_cons(a,0); }\n\n//Provides: caml_js_var mutable (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_js_var(x) {\n  var x = x.toString();\n  //Checks that x has the form ident[.ident]*\n  if(!x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/)){\n    js_print_stderr(\"caml_js_var: \\\"\" + x + \"\\\" is not a valid JavaScript variable. continuing ..\");\n    //joo_global_object.console.error(\"Js.Unsafe.eval_string\")\n  }\n  return eval(x);\n}\n//Provides: caml_js_call (const, mutable, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_call(f, o, args) { return f.apply(o, caml_js_from_array(args)); }\n//Provides: caml_js_fun_call (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_fun_call(f, a) {\n  switch (a.length) {\n  case 1: return f();\n  case 2: return f (a[1]);\n  case 3: return f (a[1],a[2]);\n  case 4: return f (a[1],a[2],a[3]);\n  case 5: return f (a[1],a[2],a[3],a[4]);\n  case 6: return f (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return f (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return f (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  return f.apply(null, caml_js_from_array(a));\n}\n//Provides: caml_js_meth_call (mutable, const, shallow)\n//Requires: MlString\n//Requires: caml_js_from_array\nfunction caml_js_meth_call(o, f, args) {\n  return o[f.toString()].apply(o, caml_js_from_array(args));\n}\n//Provides: caml_js_new (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_new(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[1]);\n  case 3: return new c (a[1],a[2]);\n  case 4: return new c (a[1],a[2],a[3]);\n  case 5: return new c (a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return new c (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  function F() { return c.apply(this, caml_js_from_array(a)); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_ojs_new_arr (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_ojs_new_arr(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[0]);\n  case 3: return new c (a[0],a[1]);\n  case 4: return new c (a[0],a[1],a[2]);\n  case 5: return new c (a[0],a[1],a[2],a[3]);\n  case 6: return new c (a[0],a[1],a[2],a[3],a[4]);\n  case 7: return new c (a[0],a[1],a[2],a[3],a[4],a[5]);\n  case 8: return new c (a[0],a[1],a[2],a[3],a[4],a[5],a[6]);\n  }\n  function F() { return c.apply(this, a); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_js_wrap_callback const (const)\n//Requires: caml_call_gen\nfunction caml_js_wrap_callback(f) {\n  return function () {\n    if(arguments.length > 0){\n      return caml_call_gen(f, arguments);\n    } else {\n      return caml_call_gen(f, [undefined]);\n    }\n  }\n}\n\n//Provides: caml_js_wrap_callback_arguments\n//Requires: caml_js_wrap_callback\nfunction caml_js_wrap_callback_arguments(f) {\n  return function() {\n    return caml_js_wrap_callback(f)(arguments);\n  }\n}\n//Provides: caml_js_wrap_callback_strict const\n//Requires: caml_call_gen\nfunction caml_js_wrap_callback_strict(arity, f) {\n  return function () {\n    var n = arguments.length;\n    if(n == arity) return caml_call_gen(f, arguments);\n    var args = new Array(arity);\n    for (var i = 0; i < n && i < arity; i++) args[i] = arguments[i];\n    return caml_call_gen(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback(f) {\n  return function () {\n    return caml_call_gen(f,raw_array_cons(arguments,this));\n  }\n}\n//Provides: caml_js_wrap_meth_callback_arguments const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback_arguments(f) {\n  return function () {\n    return caml_call_gen(f,[this,arguments]);\n  }\n}\n//Provides: caml_js_wrap_meth_callback_strict const\n//Requires: caml_call_gen, raw_array_cons\nfunction caml_js_wrap_meth_callback_strict(arity, f) {\n  return function () {\n    var n = arguments.length;\n    if(n == arity) return caml_call_gen(f, raw_array_cons(arguments,this));\n    var args = new Array(arity + 1);\n    args[0] = this;\n    for (var i = 1; i < n && i <= arity; i++) args[i] = arguments[i];\n    return caml_call_gen(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback_unsafe const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback_unsafe(f) {\n  return function () { f.apply(null, raw_array_cons(arguments,this)); }\n}\n//Provides: caml_js_equals mutable (const, const)\nfunction caml_js_equals (x, y) { return +(x == y); }\n//Provides: caml_js_to_byte_string const\n//Requires: caml_new_string\nfunction caml_js_to_byte_string (s) {return caml_new_string (s);}\n\n//Provides: caml_js_eval_string (const)\n//Requires: MlString\nfunction caml_js_eval_string (s) {return eval(s.toString());}\n\n//Provides: caml_js_expr (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_js_expr(s) {\n  js_print_stderr(\"caml_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_pure_js_expr const (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_pure_js_expr (s){\n  js_print_stderr(\"caml_pure_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_js_object (object_literal)\n//Requires: MlString\nfunction caml_js_object (a) {\n  var o = {};\n  for (var i = 1; i < a.length; i++) {\n    var p = a[i];\n    o[p[1].toString()] = p[2];\n  }\n  return o;\n}\n\n\n//Provides: caml_js_export_var\nfunction caml_js_export_var (){\n  if(typeof module !== 'undefined' && module && module.exports)\n    return module.exports\n  else\n    return joo_global_object;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\n//Provides: caml_md5_chan\n//Requires: caml_md5_string, caml_string_of_array,caml_ml_string_length, caml_ml_channels\n//Requires: caml_raise_end_of_file, caml_create_string  \nfunction caml_md5_chan(chanid,len){\n  var chan = caml_ml_channels[chanid];\n  var chan_len = chan.file.length();\n  if(len<0) len = chan_len - chan.offset;\n  if(chan.offset + len >= chan_len) caml_raise_end_of_file;\n  var buf = caml_create_string(len);\n  chan.file.read(chan.offset,buf,0,len);\n  return caml_md5_string(buf,0,len);\n}\n\n//Provides: caml_md5_string\n//Requires: caml_string_of_array, caml_convert_string_to_bytes\nvar caml_md5_string =\nfunction () {\n  function add (x, y) { return (x + y) | 0; }\n  function xx(q,a,b,x,s,t) {\n    a = add(add(a, q), add(x, t));\n    return add((a << s) | (a >>> (32 - s)), b);\n  }\n  function ff(a,b,c,d,x,s,t) {\n    return xx((b & c) | ((~b) & d), a, b, x, s, t);\n  }\n  function gg(a,b,c,d,x,s,t) {\n    return xx((b & d) | (c & (~d)), a, b, x, s, t);\n  }\n  function hh(a,b,c,d,x,s,t) { return xx(b ^ c ^ d, a, b, x, s, t); }\n  function ii(a,b,c,d,x,s,t) { return xx(c ^ (b | (~d)), a, b, x, s, t); }\n\n  function md5(buffer, length) {\n    var i = length;\n    buffer[i >> 2] |= 0x80 << (8 * (i & 3));\n    for (i = (i & ~0x3) + 8;(i & 0x3F) < 60 ;i += 4)\n      buffer[(i >> 2) - 1] = 0;\n    buffer[(i >> 2) -1] = length << 3;\n    buffer[i >> 2] = (length >> 29) & 0x1FFFFFFF;\n\n    var w = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476];\n\n    for(i = 0; i < buffer.length; i += 16) {\n      var a = w[0], b = w[1], c = w[2], d = w[3];\n\n      a = ff(a, b, c, d, buffer[i+ 0], 7, 0xD76AA478);\n      d = ff(d, a, b, c, buffer[i+ 1], 12, 0xE8C7B756);\n      c = ff(c, d, a, b, buffer[i+ 2], 17, 0x242070DB);\n      b = ff(b, c, d, a, buffer[i+ 3], 22, 0xC1BDCEEE);\n      a = ff(a, b, c, d, buffer[i+ 4], 7, 0xF57C0FAF);\n      d = ff(d, a, b, c, buffer[i+ 5], 12, 0x4787C62A);\n      c = ff(c, d, a, b, buffer[i+ 6], 17, 0xA8304613);\n      b = ff(b, c, d, a, buffer[i+ 7], 22, 0xFD469501);\n      a = ff(a, b, c, d, buffer[i+ 8], 7, 0x698098D8);\n      d = ff(d, a, b, c, buffer[i+ 9], 12, 0x8B44F7AF);\n      c = ff(c, d, a, b, buffer[i+10], 17, 0xFFFF5BB1);\n      b = ff(b, c, d, a, buffer[i+11], 22, 0x895CD7BE);\n      a = ff(a, b, c, d, buffer[i+12], 7, 0x6B901122);\n      d = ff(d, a, b, c, buffer[i+13], 12, 0xFD987193);\n      c = ff(c, d, a, b, buffer[i+14], 17, 0xA679438E);\n      b = ff(b, c, d, a, buffer[i+15], 22, 0x49B40821);\n\n      a = gg(a, b, c, d, buffer[i+ 1], 5, 0xF61E2562);\n      d = gg(d, a, b, c, buffer[i+ 6], 9, 0xC040B340);\n      c = gg(c, d, a, b, buffer[i+11], 14, 0x265E5A51);\n      b = gg(b, c, d, a, buffer[i+ 0], 20, 0xE9B6C7AA);\n      a = gg(a, b, c, d, buffer[i+ 5], 5, 0xD62F105D);\n      d = gg(d, a, b, c, buffer[i+10], 9, 0x02441453);\n      c = gg(c, d, a, b, buffer[i+15], 14, 0xD8A1E681);\n      b = gg(b, c, d, a, buffer[i+ 4], 20, 0xE7D3FBC8);\n      a = gg(a, b, c, d, buffer[i+ 9], 5, 0x21E1CDE6);\n      d = gg(d, a, b, c, buffer[i+14], 9, 0xC33707D6);\n      c = gg(c, d, a, b, buffer[i+ 3], 14, 0xF4D50D87);\n      b = gg(b, c, d, a, buffer[i+ 8], 20, 0x455A14ED);\n      a = gg(a, b, c, d, buffer[i+13], 5, 0xA9E3E905);\n      d = gg(d, a, b, c, buffer[i+ 2], 9, 0xFCEFA3F8);\n      c = gg(c, d, a, b, buffer[i+ 7], 14, 0x676F02D9);\n      b = gg(b, c, d, a, buffer[i+12], 20, 0x8D2A4C8A);\n\n      a = hh(a, b, c, d, buffer[i+ 5], 4, 0xFFFA3942);\n      d = hh(d, a, b, c, buffer[i+ 8], 11, 0x8771F681);\n      c = hh(c, d, a, b, buffer[i+11], 16, 0x6D9D6122);\n      b = hh(b, c, d, a, buffer[i+14], 23, 0xFDE5380C);\n      a = hh(a, b, c, d, buffer[i+ 1], 4, 0xA4BEEA44);\n      d = hh(d, a, b, c, buffer[i+ 4], 11, 0x4BDECFA9);\n      c = hh(c, d, a, b, buffer[i+ 7], 16, 0xF6BB4B60);\n      b = hh(b, c, d, a, buffer[i+10], 23, 0xBEBFBC70);\n      a = hh(a, b, c, d, buffer[i+13], 4, 0x289B7EC6);\n      d = hh(d, a, b, c, buffer[i+ 0], 11, 0xEAA127FA);\n      c = hh(c, d, a, b, buffer[i+ 3], 16, 0xD4EF3085);\n      b = hh(b, c, d, a, buffer[i+ 6], 23, 0x04881D05);\n      a = hh(a, b, c, d, buffer[i+ 9], 4, 0xD9D4D039);\n      d = hh(d, a, b, c, buffer[i+12], 11, 0xE6DB99E5);\n      c = hh(c, d, a, b, buffer[i+15], 16, 0x1FA27CF8);\n      b = hh(b, c, d, a, buffer[i+ 2], 23, 0xC4AC5665);\n\n      a = ii(a, b, c, d, buffer[i+ 0], 6, 0xF4292244);\n      d = ii(d, a, b, c, buffer[i+ 7], 10, 0x432AFF97);\n      c = ii(c, d, a, b, buffer[i+14], 15, 0xAB9423A7);\n      b = ii(b, c, d, a, buffer[i+ 5], 21, 0xFC93A039);\n      a = ii(a, b, c, d, buffer[i+12], 6, 0x655B59C3);\n      d = ii(d, a, b, c, buffer[i+ 3], 10, 0x8F0CCC92);\n      c = ii(c, d, a, b, buffer[i+10], 15, 0xFFEFF47D);\n      b = ii(b, c, d, a, buffer[i+ 1], 21, 0x85845DD1);\n      a = ii(a, b, c, d, buffer[i+ 8], 6, 0x6FA87E4F);\n      d = ii(d, a, b, c, buffer[i+15], 10, 0xFE2CE6E0);\n      c = ii(c, d, a, b, buffer[i+ 6], 15, 0xA3014314);\n      b = ii(b, c, d, a, buffer[i+13], 21, 0x4E0811A1);\n      a = ii(a, b, c, d, buffer[i+ 4], 6, 0xF7537E82);\n      d = ii(d, a, b, c, buffer[i+11], 10, 0xBD3AF235);\n      c = ii(c, d, a, b, buffer[i+ 2], 15, 0x2AD7D2BB);\n      b = ii(b, c, d, a, buffer[i+ 9], 21, 0xEB86D391);\n\n      w[0] = add(a, w[0]);\n      w[1] = add(b, w[1]);\n      w[2] = add(c, w[2]);\n      w[3] = add(d, w[3]);\n    }\n\n    var t = new Array(16);\n    for (var i = 0; i < 4; i++)\n      for (var j = 0; j < 4; j++)\n        t[i * 4 + j] = (w[i] >> (8 * j)) & 0xFF;\n    return t;\n  }\n\n  return function (s, ofs, len) {\n    // FIX: maybe we should perform the computation by chunk of 64 bytes\n    // as in http://www.myersdaily.org/joseph/javascript/md5.js\n    var buf = [];\n    switch (s.t & 6) {\n    default:\n      caml_convert_string_to_bytes(s);\n    case 0: /* BYTES */\n      var b = s.c;\n      for (var i = 0; i < len; i+=4) {\n        var j = i + ofs;\n        buf[i>>2] =\n          b.charCodeAt(j) | (b.charCodeAt(j+1) << 8) |\n          (b.charCodeAt(j+2) << 16) | (b.charCodeAt(j+3) << 24);\n      }\n      for (; i < len; i++) buf[i>>2] |= b.charCodeAt(i + ofs) << (8 * (i & 3));\n      break;\n    case 4: /* ARRAY */\n      var a = s.c;\n      for (var i = 0; i < len; i+=4) {\n        var j = i + ofs;\n        buf[i>>2] = a[j] | (a[j+1] << 8) | (a[j+2] << 16) | (a[j+3] << 24);\n      }\n      for (; i < len; i++) buf[i>>2] |= a[i + ofs] << (8 * (i & 3));\n    }\n    return caml_string_of_array(md5(buf, len));\n  }\n} ();\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Io\n\n//Provides: caml_sys_close\n//Requires: caml_global_data\nfunction caml_sys_close(fd) {\n  delete caml_global_data.fds[fd];\n  return 0;\n}\n\n//Provides: caml_std_output\n//Requires: caml_new_string, caml_ml_string_length, caml_ml_channels\nfunction caml_std_output(chanid,s){\n  var chan = caml_ml_channels[chanid];\n  var str = caml_new_string(s);\n  var slen = caml_ml_string_length(str);\n  chan.file.write(chan.offset, str, 0, slen);\n  chan.offset += slen;\n  return 0;\n}\n\n//Provides: caml_sys_open\n//Requires: caml_raise_sys_error, caml_global_data\n//Requires: caml_create_string,MlFakeFile\n//Requires: js_print_stderr, js_print_stdout\n//Requires: caml_std_output\n//Requires: resolve_fs_device\nfunction caml_sys_open_internal(idx,output,file,flags) {\n  if(caml_global_data.fds === undefined) caml_global_data.fds = new Array();\n  flags=flags?flags:{};\n  var info = {};\n  info.file = file;\n  info.offset = flags.append?file.length():0;\n  info.flags = flags;\n  info.output = output;\n  caml_global_data.fds[idx] = info;\n  if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)\n    caml_global_data.fd_last_idx = idx;\n  return idx;\n}\nfunction caml_sys_open (name, flags, _perms) {\n  var f = {};\n  while(flags){\n    switch(flags[1]){\n    case 0: f.rdonly = 1;break;\n    case 1: f.wronly = 1;break;\n    case 2: f.append = 1;break;\n    case 3: f.create = 1;break;\n    case 4: f.truncate = 1;break;\n    case 5: f.excl = 1; break;\n    case 6: f.binary = 1;break;\n    case 7: f.text = 1;break;\n    case 8: f.nonblock = 1;break;\n    }\n    flags=flags[2];\n  }\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(name.toString() + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(name.toString() + \" : flags Open_text and Open_binary are not compatible\");\n  var root = resolve_fs_device(name);\n  var file = root.device.open(root.rest,f);\n  var idx = caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;\n  return caml_sys_open_internal (idx+1,caml_std_output,file,f);\n}\ncaml_sys_open_internal(0,caml_std_output, new MlFakeFile(caml_create_string(0))); //stdin\ncaml_sys_open_internal(1,js_print_stdout, new MlFakeFile(caml_create_string(0))); //stdout\ncaml_sys_open_internal(2,js_print_stderr, new MlFakeFile(caml_create_string(0))); //stderr\n\n\n// ocaml Channels\n\n//Provides: caml_ml_set_channel_name\nfunction caml_ml_set_channel_name() {\n  return 0\n}\n\n//Provides: caml_ml_channels\nvar caml_ml_channels = new Array();\n\n//Provides: caml_ml_out_channels_list\n//Requires: caml_ml_channels\nfunction caml_ml_out_channels_list () {\n  var l = 0;\n  for(var c = 0; c < caml_ml_channels.length; c++){\n    if(caml_ml_channels[c] && caml_ml_channels[c].opened && caml_ml_channels[c].out)\n      l=[0,caml_ml_channels[c].fd,l];\n  }\n  return l;\n}\n\n\n//Provides: caml_ml_open_descriptor_out\n//Requires: caml_ml_channels, caml_global_data\n//Requires: caml_raise_sys_error\nfunction caml_ml_open_descriptor_out (fd) {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.rdonly) caml_raise_sys_error(\"fd \"+ fd + \" is readonly\");\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    out:true,\n    buffer:\"\"\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n//Provides: caml_ml_open_descriptor_in\n//Requires: caml_global_data,caml_sys_open,caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_open_descriptor_in (fd)  {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.wronly) caml_raise_sys_error(\"fd \"+ fd + \" is writeonly\");\n\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    out: false,\n    refill:null\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n\n//Provides: caml_ml_set_binary_mode\n//Requires: caml_global_data, caml_ml_channels\nfunction caml_ml_set_binary_mode(chanid,mode){\n  var chan = caml_ml_channels[chanid];\n  var data = caml_global_data.fds[chan.fd];\n  data.flags.text = !mode\n  data.flags.binary = mode\n  return 0;\n}\n\n//Input from in_channel\n\n//Provides: caml_ml_close_channel\n//Requires: caml_ml_flush, caml_ml_channels\n//Requires: caml_sys_close\nfunction caml_ml_close_channel (chanid) {\n  var chan = caml_ml_channels[chanid];\n  caml_ml_flush(chanid);\n  chan.opened = false;\n  chan.file.close();\n  caml_sys_close(chan.fd)\n  return 0;\n}\n\n//Provides: caml_ml_channel_size\n//Requires: caml_ml_string_length, caml_ml_channels\nfunction caml_ml_channel_size(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return chan.file.length();\n}\n\n//Provides: caml_ml_channel_size_64\n//Requires: caml_ml_channel_size,caml_int64_of_float,caml_ml_string_length, caml_ml_channels\nfunction caml_ml_channel_size_64(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return caml_int64_of_float(chan.file.length ());\n}\n\n//Provides: caml_ml_set_channel_output\n//Requires: caml_ml_channels, caml_global_data\nfunction caml_ml_set_channel_output(chanid,f) {\n  var chan = caml_ml_channels[chanid];\n  caml_global_data.fds[chan.fd].output = f;\n  return 0;\n}\n\n//Provides: caml_ml_set_channel_refill\n//Requires: caml_ml_channels, caml_global_data\nfunction caml_ml_set_channel_refill(chanid,f) {\n  caml_ml_channels[chanid].refill = f;\n  return 0;\n}\n\n//Provides: caml_ml_refill_input\n//Requires: caml_ml_string_length\nfunction caml_ml_refill_input (chan) {\n  var str = chan.refill();\n  var str_len = caml_ml_string_length(str);\n  if (str_len == 0) chan.refill = null;\n  chan.file.write(chan.file.length(), str, 0, str_len);\n  return str_len;\n}\n\n//Provides: caml_ml_may_refill_input\n//Requires: caml_ml_string_length, caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_may_refill_input (chanid) {\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill == null) return;\n  if (chan.file.length() != chan.offset) return;\n  caml_ml_refill_input (chan);\n}\n\n//Provides: caml_ml_input\n//Requires: caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_input (chanid, s, i, l) {\n  var chan = caml_ml_channels[chanid];\n  var l2 = chan.file.length() - chan.offset;\n  if (l2 == 0 && chan.refill != null) l2 = caml_ml_refill_input(chan);\n  if (l2 < l) l = l2;\n  chan.file.read(chan.offset, s, i, l);\n  chan.offset += l;\n  return l;\n}\n\n//Provides: caml_input_value\n//Requires: caml_marshal_data_size, caml_input_value_from_string, caml_create_string, caml_ml_channels\nfunction caml_input_value (chanid) {\n  var chan = caml_ml_channels[chanid];\n\n  var buf = caml_create_string(8);\n  chan.file.read(chan.offset,buf,0,8);\n\n  // Header is 20 bytes\n  var len = caml_marshal_data_size (buf, 0) + 20;\n\n  var buf = caml_create_string(len);\n  chan.file.read(chan.offset,buf,0,len);\n\n  var offset = [0];\n  var res = caml_input_value_from_string(buf, offset);\n  chan.offset = chan.offset + offset[0];\n  return res;\n}\n\n//Provides: caml_ml_input_char\n//Requires: caml_raise_end_of_file, caml_array_bound_error\n//Requires: caml_ml_string_length, caml_string_get, caml_ml_may_refill_input, caml_ml_channels, caml_create_string\nfunction caml_ml_input_char (chanid) {\n  var chan = caml_ml_channels[chanid];\n  caml_ml_may_refill_input(chanid);\n  if (chan.offset >= chan.file.length())\n    caml_raise_end_of_file();\n  var res = chan.file.read_one(chan.offset);\n  chan.offset++;\n  return res;\n}\n\n//Provides: caml_ml_input_int\n//Requires: caml_raise_end_of_file\n//Requires: caml_ml_string_length, caml_string_unsafe_get, caml_ml_refill_input, caml_ml_channels\n//Requires: caml_create_string\nfunction caml_ml_input_int (chanid) {\n  var chan = caml_ml_channels[chanid];\n  var file = chan.file;\n  while ((chan.offset + 3) >= file.length()) {\n    var l = caml_ml_refill_input(chan);\n    if (l == 0) caml_raise_end_of_file();\n  }\n  var o = chan.offset;\n  var r =(file.read_one(o  ) << 24)\n      |  (file.read_one(o+1) << 16)\n      |  (file.read_one(o+2) << 8)\n      |  (file.read_one(o+3));\n  chan.offset+=4;\n  return r;\n}\n\n//Provides: caml_ml_seek_in\n//Requires: caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_seek_in(chanid,pos){\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_in_64\n//Requires: caml_int64_to_float, caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_seek_in_64(chanid,pos){\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_in\n//Requires: caml_ml_channels\nfunction caml_ml_pos_in(chanid) {return caml_ml_channels[chanid].offset}\n\n//Provides: caml_ml_pos_in_64\n//Requires: caml_int64_of_float, caml_ml_channels\nfunction caml_ml_pos_in_64(chanid) {return caml_int64_of_float(caml_ml_channels[chanid].offset)}\n\n//Provides: caml_ml_input_scan_line\n//Requires: caml_array_bound_error, caml_ml_string_length, caml_string_get\n//Requires: caml_ml_may_refill_input, caml_ml_channels, caml_create_string\nfunction caml_ml_input_scan_line(chanid){\n  var chan = caml_ml_channels[chanid];\n  caml_ml_may_refill_input(chanid);\n  var p = chan.offset;\n  var len = chan.file.length();\n  if(p >= len) { return 0;}\n  while(true) {\n    if(p >= len) return - (p - chan.offset);\n    if(chan.file.read_one(p) == 10) return p - chan.offset + 1;\n    p++;\n  }\n}\n\n//Provides: caml_ml_flush\n//Requires: caml_raise_sys_error, caml_global_data, caml_ml_channels\nfunction caml_ml_flush (chanid) {\n    var chan = caml_ml_channels[chanid];\n    if(! chan.opened) caml_raise_sys_error(\"Cannot flush a closed channel\");\n    if(!chan.buffer || chan.buffer == \"\") return 0;\n    if(chan.fd\n       && caml_global_data.fds[chan.fd]\n       && caml_global_data.fds[chan.fd].output) {\n      var output = caml_global_data.fds[chan.fd].output;\n      switch(output.length){\n      case 2: output(chanid,chan.buffer);break;\n      default: output(chan.buffer)\n      };\n    }\n    chan.buffer = \"\";\n    return 0;\n}\n\n//output to out_channel\n\n//Provides: caml_ml_output\n//Requires: caml_ml_flush,caml_ml_string_length\n//Requires: caml_create_string, caml_blit_string, caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_output (chanid,buffer,offset,len) {\n    var chan = caml_ml_channels[chanid];\n    if(! chan.opened) caml_raise_sys_error(\"Cannot output to a closed channel\");\n    var string;\n    if(offset == 0 && caml_ml_string_length(buffer) == len)\n        string = buffer;\n    else {\n        string = caml_create_string(len);\n        caml_blit_string(buffer,offset,string,0,len);\n    }\n    var jsstring = string.toString();\n    var id = jsstring.lastIndexOf(\"\\n\");\n    if(id < 0)\n        chan.buffer+=jsstring;\n    else {\n        chan.buffer+=jsstring.substr(0,id+1);\n        caml_ml_flush (chanid);\n        chan.buffer += jsstring.substr(id+1);\n    }\n    return 0;\n}\n\n//Provides: caml_ml_output_bytes\n//Requires: caml_ml_output\nvar caml_ml_output_bytes = caml_ml_output\n\n//Provides: caml_ml_output_char\n//Requires: caml_ml_output\n//Requires: caml_new_string, caml_ml_channels\nfunction caml_ml_output_char (chanid,c) {\n    var s = caml_new_string(String.fromCharCode(c));\n    caml_ml_output(chanid,s,0,1);\n    return 0;\n}\n\n//Provides: caml_output_value\n//Requires: caml_output_value_to_string, caml_ml_output,caml_ml_string_length, caml_ml_channels\nfunction caml_output_value (chanid,v,_flags) {\n  var s = caml_output_value_to_string(v);\n  caml_ml_output(chanid,s,0,caml_ml_string_length(s));\n  return 0;\n}\n\n\n//Provides: caml_ml_seek_out\n//Requires: caml_ml_channels\nfunction caml_ml_seek_out(chanid,pos){\n  caml_ml_channels[chanid].offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_out_64\n//Requires: caml_int64_to_float, caml_ml_channels\nfunction caml_ml_seek_out_64(chanid,pos){\n  caml_ml_channels[chanid].offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_out\n//Requires: caml_ml_channels\nfunction caml_ml_pos_out(chanid) {return caml_ml_channels[chanid].offset}\n\n//Provides: caml_ml_pos_out_64\n//Requires: caml_int64_of_float, caml_ml_channels\nfunction caml_ml_pos_out_64(chanid) {\n  return caml_int64_of_float (caml_ml_channels[chanid].offset);\n}\n\n//Provides: caml_ml_output_int\n//Requires: caml_ml_output\n//Requires: caml_string_of_array\nfunction caml_ml_output_int (chanid,i) {\n  var arr = [(i>>24) & 0xFF,(i>>16) & 0xFF,(i>>8) & 0xFF,i & 0xFF ];\n  var s = caml_string_of_array(arr);\n  caml_ml_output(chanid,s,0,4);\n  return 0\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Dummy filesystem\n\n//Provides: caml_current_dir\nif(joo_global_object.process && joo_global_object.process.cwd)\n  var caml_current_dir = joo_global_object.process.cwd().replace(/\\\\/g,'/');\nelse\n  var caml_current_dir =  \"/static\";\nif(caml_current_dir.slice(-1) !== \"/\") caml_current_dir += \"/\"\n\n//Provides: caml_root\n//Requires: caml_current_dir\nvar caml_root = caml_current_dir.match(/[^\\/]*\\//)[0];\n\n\n//Provides: MlFile\nfunction MlFile(){  }\n\n//Provides: caml_make_path\n//Requires: caml_current_dir,MlString\nfunction caml_make_path (name) {\n  name=(name instanceof MlString)?name.toString():name;\n  if(name.charCodeAt(0) != 47)\n    name = caml_current_dir + name;\n  var comp = name.split(\"/\");\n  var ncomp = []\n  for(var i = 0; i<comp.length; i++){\n    switch(comp[i]){\n    case \"..\": if(ncomp.length>1) ncomp.pop(); break;\n    case \".\": break;\n    case \"\": if(ncomp.length == 0) ncomp.push(\"\"); break;\n    default: ncomp.push(comp[i]);break\n    }\n  }\n  ncomp.orig = name;\n  return ncomp;\n}\n\n//Provides:jsoo_mount_point\n//Requires: MlFakeDevice, MlNodeDevice, caml_root\nvar jsoo_mount_point = []\nif (typeof module !== 'undefined' && module.exports && typeof require !== \"undefined\") {\n    jsoo_mount_point.push({path:caml_root,device:new MlNodeDevice(caml_root)});\n} else {\n    jsoo_mount_point.push({path:caml_root,device:new MlFakeDevice(caml_root)});\n}\njsoo_mount_point.push({path:caml_root+\"static/\", device:new MlFakeDevice(caml_root+\"static/\")});\n\n//Provides:caml_list_mount_point\n//Requires: jsoo_mount_point, caml_new_string\nfunction caml_list_mount_point(){\n    var prev = 0\n    for(var i = 0; i < jsoo_mount_point.length; i++){\n        var old = prev;\n        prev = [0, caml_new_string(jsoo_mount_point[i].path), old]\n    }\n    return prev;\n}\n\n//Provides: resolve_fs_device\n//Requires: caml_make_path, jsoo_mount_point\nfunction resolve_fs_device(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\");\n  var name_slash = name + \"/\";\n  var res;\n  for(var i = 0; i < jsoo_mount_point.length; i++) {\n    var m = jsoo_mount_point[i];\n    if(name_slash.search(m.path) == 0\n       && (!res || res.path.length < m.path.length))\n        res = {path:m.path,device:m.device,rest:name.substring(m.path.length,name.length)};\n  }\n  return res;\n}\n\n//Provides: caml_mount_autoload\n//Requires: MlFakeDevice, caml_make_path, jsoo_mount_point\nfunction caml_mount_autoload(name,f){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\") + \"/\";\n  jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)})\n  return 0;\n}\n\n//Provides: caml_unmount\n//Requires: jsoo_mount_point, caml_make_path\nfunction caml_unmount(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\") + \"/\";\n  var idx = -1;\n  for(var i = 0; i < jsoo_mount_point.length; i++)\n    if(jsoo_mount_point[i].path == name) idx = i;\n  if(idx > -1) jsoo_mount_point.splice(idx,1);\n  return 0\n}\n\n//Provides: caml_sys_getcwd\n//Requires: caml_current_dir, caml_new_string\nfunction caml_sys_getcwd() {\n  return caml_new_string(caml_current_dir);\n}\n\n//Provides: caml_sys_chdir\n//Requires: caml_current_dir, caml_raise_no_such_file, resolve_fs_device\nfunction caml_sys_chdir(dir) {\n  var root = resolve_fs_device(dir);\n  if(root.device.exists(root.rest)) {\n    if(root.rest) caml_current_dir = root.path + root.rest + \"/\";\n    else caml_current_dir = root.path;\n    return 0;\n  }\n  else {\n    caml_raise_no_such_file(dir);\n  }\n}\n\n//Provides: caml_raise_no_such_file\n//Requires: MlString, caml_raise_sys_error\nfunction caml_raise_no_such_file(name){\n  name = (name instanceof MlString)?name.toString():name;\n  caml_raise_sys_error (name + \": No such file or directory\");\n}\n\n//Provides: caml_raise_not_a_dir\n//Requires: MlString, caml_raise_sys_error\nfunction caml_raise_not_a_dir(name){\n  name = (name instanceof MlString)?name.toString():name;\n  caml_raise_sys_error (name + \": Not a directory\");\n}\n\n//Provides: caml_sys_file_exists\n//Requires: resolve_fs_device\nfunction caml_sys_file_exists (name) {\n  var root = resolve_fs_device(name);\n  return root.device.exists(root.rest);\n}\n\n//Provides: caml_sys_read_directory\n//Requires: caml_new_string\n//Requires: caml_raise_not_a_dir, resolve_fs_device\nfunction caml_sys_read_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.readdir(root.rest);\n  var l = new Array(a.length + 1);\n  l[0] = 0;\n  for(var i=0;i<a.length;i++)\n    l[i+1] = caml_new_string(a[i]);\n  return l;\n}\n\n//Provides: caml_sys_remove\n//Requires: caml_raise_no_such_file, resolve_fs_device\nfunction caml_sys_remove(name){\n  var root = resolve_fs_device(name);\n  var ok = root.device.unlink(root.rest);\n  if(ok == 0) caml_raise_no_such_file(name);\n  return 0;\n}\n\n//Provides: caml_sys_is_directory\n//Requires: resolve_fs_device\nfunction caml_sys_is_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.is_dir(root.rest);\n  return a?1:0;\n}\n\n//Provides: caml_sys_rename\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_sys_rename(o,n){\n  var o_root = resolve_fs_device(o);\n  var n_root = resolve_fs_device(n);\n  if(o_root.device != n_root.device)\n    caml_failwith(\"caml_sys_rename: cannot move file between two filesystem\");\n  if(!o_root.device.rename)\n    caml_failwith(\"caml_sys_rename: no implemented\");\n  o_root.device.rename(o_root.rest, n_root.rest);\n}\n\n\n//Provides: caml_ba_map_file\n//Requires: caml_failwith\nfunction caml_ba_map_file(vfd, kind, layout, shared, dims, pos) {\n  // var data = caml_global_data.fds[vfd];\n  caml_failwith(\"caml_ba_map_file not implemented\");\n}\n\n//Provides: caml_ba_map_file_bytecode\n//Requires: caml_ba_map_file\nfunction caml_ba_map_file_bytecode(argv,argn){\n  return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);\n}\n\n//Provides: caml_create_file_extern\nfunction caml_create_file_extern(name,content){\n  if(joo_global_object.caml_create_file)\n    joo_global_object.caml_create_file(name,content);\n  else {\n    if(!joo_global_object.caml_fs_tmp) joo_global_object.caml_fs_tmp = [];\n    joo_global_object.caml_fs_tmp.push({name:name,content:content});\n  }\n  return 0;\n}\n\n//Provides: caml_fs_init\n//Requires: caml_create_file\nfunction caml_fs_init (){\n  var tmp=joo_global_object.caml_fs_tmp\n  if(tmp){\n    for(var i = 0; i < tmp.length; i++){\n      caml_create_file(tmp[i].name,tmp[i].content);\n    }\n  }\n  joo_global_object.caml_create_file = caml_create_file;\n  return 0;\n}\n\n//Provides: caml_create_file\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_create_file(name,content) {\n  var root = resolve_fs_device(name);\n  if(! root.device.register) caml_failwith(\"cannot register file\");\n  root.device.register(root.rest,content);\n  return 0;\n}\n\n//Provides: caml_read_file_content\n//Requires: resolve_fs_device, caml_raise_no_such_file, caml_create_string\nfunction caml_read_file_content (name) {\n  var root = resolve_fs_device(name);\n  if(root.device.exists(root.rest)) {\n    var file = root.device.open(root.rest,{rdonly:1});\n    var len  = file.length();\n    var buf  = caml_create_string(len);\n    file.read(0,buf,0,len);\n    return buf\n  }\n  caml_raise_no_such_file(name);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: MlFakeDevice\n//Requires: MlFakeFile, caml_create_string\n//Requires: caml_raise_sys_error, caml_raise_no_such_file, caml_new_string, caml_string_of_array\n//Requires: MlString\nfunction MlFakeDevice (root, f) {\n  this.content={};\n  this.root = root;\n  this.lookupFun = f;\n}\nMlFakeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlFakeDevice.prototype.lookup = function(name) {\n  if(!this.content[name] && this.lookupFun) {\n    var res = this.lookupFun(caml_new_string(this.root), caml_new_string(name));\n    if(res != 0) this.content[name]=new MlFakeFile(res[1]);\n  }\n}\nMlFakeDevice.prototype.exists = function(name) {\n  // The root of the device exists\n  if(name == \"\") return 1;\n  // Check if a directory exists\n  var name_slash = (name + \"/\");\n  var r = new RegExp(\"^\" + name_slash);\n  for(var n in this.content) {\n    if (n.match(r)) return 1\n  }\n  // Check if a file exists\n  this.lookup(name);\n  return this.content[name]?1:0;\n}\nMlFakeDevice.prototype.readdir = function(name) {\n  var name_slash = (name == \"\")?\"\":(name + \"/\");\n  var r = new RegExp(\"^\" + name_slash + \"([^/]*)\");\n  var seen = {}\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m && !seen[m[1]]) {seen[m[1]] = true; a.push(m[1])}\n  }\n  return a;\n}\nMlFakeDevice.prototype.is_dir = function(name) {\n  var name_slash = (name == \"\")?\"\":(name + \"/\");\n  var r = new RegExp(\"^\" + name_slash + \"([^/]*)\");\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m) return 1\n  }\n  return 0\n}\nMlFakeDevice.prototype.unlink = function(name) {\n  var ok = this.content[name]?true:false;\n  delete this.content[name];\n  return ok;\n}\nMlFakeDevice.prototype.open = function(name, f) {\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_text and Open_binary are not compatible\");\n  this.lookup(name);\n  if (this.content[name]) {\n    if (this.is_dir(name)) caml_raise_sys_error(this.nm(name) + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n    var file = this.content[name];\n    if(f.truncate) file.truncate();\n    return file;\n  } else if (f.create) {\n    this.content[name] = new MlFakeFile(caml_create_string(0));\n    return this.content[name];\n  } else {\n    caml_raise_no_such_file (this.nm(name));\n  }\n}\n\nMlFakeDevice.prototype.register= function (name,content){\n  if(this.content[name]) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n  if(content instanceof MlString)\n    this.content[name] = new MlFakeFile(content);\n  else if(content instanceof Array)\n    this.content[name] = new MlFakeFile(caml_string_of_array(content));\n  else if(content.toString) {\n    var mlstring = caml_new_string(content.toString());\n    this.content[name] = new MlFakeFile(mlstring);\n  }\n}\n\nMlFakeDevice.prototype.constructor = MlFakeDevice\n\n//Provides: MlFakeFile\n//Requires: MlFile\n//Requires: caml_create_string, caml_ml_string_length,caml_blit_string\n//Requires: caml_string_get\nfunction MlFakeFile(content){\n  this.data = content;\n}\nMlFakeFile.prototype = new MlFile ();\nMlFakeFile.prototype.truncate = function(len){\n  var old = this.data;\n  this.data = caml_create_string(len|0);\n  caml_blit_string(old, 0, this.data, 0, len);\n}\nMlFakeFile.prototype.length = function () {\n  return caml_ml_string_length(this.data);\n}\nMlFakeFile.prototype.write = function(offset,buf,pos,len){\n  var clen = this.length();\n  if(offset + len >= clen) {\n    var new_str = caml_create_string(offset + len);\n    var old_data = this.data;\n    this.data = new_str;\n    caml_blit_string(old_data, 0, this.data, 0, clen);\n  }\n  caml_blit_string(buf, pos, this.data, offset, len);\n  return 0\n}\nMlFakeFile.prototype.read = function(offset,buf,pos,len){\n  var clen = this.length();\n  caml_blit_string(this.data, offset, buf, pos, len);\n  return 0\n}\nMlFakeFile.prototype.read_one = function(offset){\n  return caml_string_get(this.data, offset);\n}\nMlFakeFile.prototype.close = function(){\n\n}\nMlFakeFile.prototype.constructor = MlFakeFile\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: MlNodeDevice\n//Requires: MlNodeFile\nfunction MlNodeDevice(root) {\n  this.fs = require('fs');\n  this.root = root;\n}\nMlNodeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlNodeDevice.prototype.exists = function(name) {\n  return this.fs.existsSync(this.nm(name))?1:0;\n}\nMlNodeDevice.prototype.readdir = function(name) {\n  return this.fs.readdirSync(this.nm(name));\n}\nMlNodeDevice.prototype.is_dir = function(name) {\n  return this.fs.statSync(this.nm(name)).isDirectory()?1:0;\n}\nMlNodeDevice.prototype.unlink = function(name) {\n  var b = this.fs.existsSync(this.nm(name))?1:0;\n  this.fs.unlinkSync(this.nm(name));\n  return b\n}\nMlNodeDevice.prototype.open = function(name, f) {\n  var consts = require('constants');\n  var res = 0;\n  for(var key in f){\n    switch(key){\n    case \"rdonly\"  : res |= consts.O_RDONLY; break;\n    case \"wronly\"  : res |= consts.O_WRONLY; break;\n    case \"append\"  :\n      res |= consts.O_WRONLY | consts.O_APPEND;\n      break;\n    case \"create\"   : res |= consts.O_CREAT;    break;\n    case \"truncate\" : res |= consts.O_TRUNC;    break;\n    case \"excl\"     : res |= consts.O_EXCL;     break;\n    case \"binary\"   : res |= consts.O_BINARY;   break;\n    case \"text\"     : res |= consts.O_TEXT;     break;\n    case \"nonblock\" : res |= consts.O_NONBLOCK; break;\n    }\n  }\n  var fd = this.fs.openSync(this.nm(name), res);\n  return new MlNodeFile(fd);\n}\n\nMlNodeDevice.prototype.rename = function(o,n) {\n  this.fs.renameSync(this.nm(o), this.nm(n));\n}\n\nMlNodeDevice.prototype.constructor = MlNodeDevice\n\n//Provides: MlNodeFile\n//Requires: MlFile, caml_array_of_string, caml_string_get, caml_string_set\n\nvar Buffer = joo_global_object.Buffer\n\nfunction MlNodeFile(fd){\n  this.fs = require('fs');\n  this.fd = fd;\n}\nMlNodeFile.prototype = new MlFile ();\n\nMlNodeFile.prototype.truncate = function(len){\n  this.fs.ftruncateSync(this.fd,len|0)\n}\nMlNodeFile.prototype.length = function () {\n  return this.fs.fstatSync(this.fd).size;\n}\nMlNodeFile.prototype.write = function(offset,buf,buf_offset,len){\n  var a = caml_array_of_string(buf);\n  if(! a instanceof joo_global_object.Uint8Array)\n    a = new joo_global_object.Uint8Array(a);\n  var buffer = new Buffer (a);\n  this.fs.writeSync(this.fd, buffer, buf_offset, len, offset);\n  return 0;\n}\nMlNodeFile.prototype.read = function(offset,buf,buf_offset,len){\n  var a = caml_array_of_string(buf);\n  if(! (a instanceof joo_global_object.Uint8Array))\n    a = new joo_global_object.Uint8Array(a);\n  var buffer = new Buffer(a);\n  this.fs.readSync(this.fd, buffer, buf_offset, len, offset);\n  for(var i = 0; i < len; i++){\n    caml_string_set(buf,buf_offset + i,buffer[buf_offset+i]);\n  }\n  return 0\n}\nMlNodeFile.prototype.read_one = function(offset){\n  var a = new joo_global_object.Uint8Array(1);\n  var buffer = new Buffer(a);\n  this.fs.readSync(this.fd, buffer, 0, 1, offset);\n  return buffer[0];\n}\nMlNodeFile.prototype.close = function(){\n  this.fs.closeSync(this.fd);\n}\n\nMlNodeFile.prototype.constructor = MlNodeFile;\n","open Ball\n\ntype game_type =\n  |EightBall\n\ntype status =\n  |Playing\n  |Won\n  |Lost\n\ntype player = {\n  id: int;\n  group: b_type;\n  balls_left : (int * b_type) list;\n  status : status;\n}\n\ntype ball = t\n\ntype logic_state = {\n  player: player;\n  other_player: player;\n  break: bool;\n  ob: int;\n  collide: bool;\n  scratch: bool;\n  continue: bool;\n  game_over: bool;\n}\n\ntype state = logic_state * (ball list)\n\ntype event =\n  | Collide of ball\n  | Hit of ball\n  | Sink of ball\n\ntype move =\n  | None\n  | Move of { player:player; velocity:(float*float) }\n  | Place of (float * float)\n\n\nlet init_player: player = {\n  id = 0;\n  group = Cue; (* init group does not matter as long as not Stripes or Solids*)\n  balls_left =\n          [(1, Solid);\n           (2, Solid);\n           (3, Solid);\n           (4, Solid);\n           (5, Solid);\n           (6, Solid);\n           (7, Solid);\n           (9, Stripe);\n           (10, Stripe);\n           (11, Stripe);\n           (12, Stripe);\n           (13, Stripe);\n           (14, Stripe);\n           (15, Stripe);\n          ];\n  status = Playing;\n}\n\nlet width = 1024. (*cm*)\nlet height = 512. (*cm*)\nlet weight = 0.156 (*kg*)\nlet radius = 11.4 (*cm*)\nlet init_vel = (0.,0.) (*cm*)\n\nlet sq32 = radius *. (sqrt 3.)\n\nlet eight_ball_init_ball_pos =\n  (*TODO add stripe/solid/cue/black to constructor after updated in ball.ml*)\n  [\n    (*create_ball \"Cue\" 0  Cue     \"img/0.png\" (-100.0, 100.0) (width /. 4.,  height /. 2.) (weight*.1.1) radius; (*Cue*)\n    (*create_ball \"Cue\" 0  Cue     \"img/0.png\" (0.0, 100.0) (10.,  512. -. 26.) (weight*.1.1) radius; (*Cue*)*)\n    (*create_ball \"Cue\" 0  Cue     \"img/0.png\" (100.0, 0.0) (900.,  15.) (weight*.1.1) radius; (*Cue*)*)\n    (*create_ball \"Cue\" 0  Cue     \"img/0.png\" (0.0, -100.0) (1024.-.25.,  250.) (weight*.1.1) radius; (*Cue*)*)\n    (*create_ball \"Cue\" 0  Cue     \"img/0.png\" (100.0, 0.0) (900.,  512. -. 26.) (weight*.1.1) radius; (*Cue*)*)\n    *)\n    (*create_ball \"Cue\" 0  Cue     \"img/0.png\" (100.0, 0.0) (900.,  26.) (weight*.1.1) radius; (*Cue*)\n\n    create_ball \"Cue\" 1  Cue     \"img/0.png\" (100.0, -100.0) (width *.3. /. 4.,  height /. 2.) (weight*.1.1) radius; (*Cue*)\n    create_ball \"Cue\" 2  Cue     \"img/0.png\" (0.0, -100.0) (24.,  height /. 4.) (weight*.1.1) radius; (*Cue*)\n    create_ball \"Cue\" 3  Cue     \"img/0.png\" (-100.0, 0.0) (300.,  26.) (weight*.1.1) radius; (*Cue*)\n    create_ball \"Cue\" 4  Cue     \"img/0.png\" (100.0, 0.0) (800.,  26.) (weight*.1.1) radius; (*Cue*)    \n    create_ball \"Cue\" 5  Cue     \"img/0.png\" (0.0, 100.0) (1000.,  400.) (weight*.1.1) radius; (*Cue*)\n    create_ball \"Cue\" 6  Cue     \"img/0.png\" (100.0, 0.0) (800.,  490.) (weight*.1.1) radius; (*Cue*)    \n    create_ball \"Cue\" 7  Cue     \"img/0.png\" (0.0, 100.0) (24.,  400.) (weight*.1.1) radius; (*Cue*)\n    create_ball \"Cue\" 8  Cue     \"img/0.png\" (-100.0, 0.0) (200.,  490.) (weight*.1.1) radius; (*Cue*)    \n    *)\n    (*create_ball \"Cue\" 0  Cue     \"img/0.png\" (0.0, -200.0) (506.,  512. -.100.) (weight*.1.1) radius; (*Cue*)*)\n    (*create_ball \"Cue\" 1  Cue     \"img/0.png\" (0.0, 100.0) (534.,  512. -.100.) (weight*.1.1) radius; (*Cue*)\n    create_ball \"Cue\" 2  Cue     \"img/0.png\" (0.0, -100.0) (478.,  100.) (weight*.1.1) radius; (*Cue*)\n      create_ball \"Cue\" 3  Cue     \"img/0.png\" (0.0, -100.0) (534.,  100.) (weight*.1.1) radius; (*Cue*)*)\n\n(*create_ball \"Cue\" 11  Cue     \"img/0.png\" (0.0, -100.0) (558.,  100.) (weight*.1.1) radius; (*Cue*)*)\n    \n    \n    \n    create_ball \"Cue\" 0  Cue     \"img/0.png\" (-450.0, 0.) (width *. 3. /. 4., height /. 2.) (weight*.1.1) radius; (*Cue*)\n   create_ball \"9\"   9  Stripe  \"img/9.png\" init_vel (width /. 4. +. (2. *. sq32), height /. 2.) weight radius; (*Stripe*) \n   create_ball \"7\"   7  Solid   \"img/7.png\" init_vel (width /. 4. +. sq32, height /. 2. -. radius) weight radius; (*Solid*)\n   create_ball \"12\" 12  Stripe  \"img/12.png\" init_vel (width /. 4. +. sq32, height /. 2. +. radius) weight radius; (*Stripe*)\n   create_ball \"15\" 15  Stripe  \"img/15.png\" init_vel (width /. 4., height /. 2. -. (2. *. radius)) weight radius; (*Stripe*)\n   create_ball \"8\"   8  Black   \"img/8.png\" init_vel (width /. 4., height /. 2.) weight radius; (*Eight*)\n   create_ball \"1\"   1  Solid   \"img/1.png\" init_vel (width /. 4., height /. 2. +. (2. *. radius)) weight radius; (*Solid*)\n\n   create_ball \"6\"   6  Solid   \"img/6.png\" init_vel (width /. 4. -. sq32, height /. 2. -. (3. *. radius)) weight radius; (*Solid*)\n   \n   create_ball \"10\" 10  Stripe  \"img/10.png\" init_vel (width /. 4. -. sq32, height /. 2. -. radius) weight radius; (*Stripe*)\n   \n   \ncreate_ball \"3\"   3  Solid   \"img/3.png\" init_vel (width /. 4. -. sq32, height /. 2. +. radius) weight radius; (*Solid*)\n\n   create_ball \"14\" 14  Stripe  \"img/14.png\" init_vel (width /. 4. -. sq32, height /. 2. +. (3. *. radius)) weight radius; (*Stripe*)\n   \n   create_ball \"11\" 11  Stripe  \"img/11.png\" init_vel (width /. 4. -. (2. *. sq32), height /. 2. -. (4. *. radius)) weight radius; (*Stripe*)\n   create_ball \"2\"   2  Solid   \"img/2.png\" init_vel (width /. 4. -. (2. *. sq32), height /. 2. -. (2. *. radius)) weight radius; (*Solid*)\n   create_ball \"13\" 13  Stripe  \"img/13.png\" init_vel (width /. 4. -. (2. *. sq32), height /. 2.) weight radius; (*Stripe*)\n   create_ball \"4\"   4  Solid   \"img/4.png\" init_vel (width /. 4. -. (2. *. sq32), height /. 2. +. (2. *. radius)) weight radius; (*Solid*)\n   create_ball \"5\"   5  Solid   \"img/5.png\" init_vel (width /. 4. -. (2. *. sq32), height /. 2. +. (4. *. radius)) weight radius; (*Solid*)\n  \n  ]\n\nlet init_state (g:game_type) : state =\n  match g with\n  | EightBall ->\n    ({\n      player = init_player;\n      other_player = {init_player with id = 1};\n      break= true;\n      ob = 0;\n      collide = false;\n      scratch= false;\n      continue= false;\n      game_over = false;\n    }, eight_ball_init_ball_pos)\n\nlet get_logic (s:state) : logic_state = fst s\n\nlet get_balls (s:state) : ball list = snd s\n\nlet get_winner_id (s:state) : int =\n  let logic = get_logic s in\n  let player' = logic.player in\n    if player'.status = Won\n    then player'.id + 1\n    else logic.other_player.id + 1\n\nlet ball_locations (s:state) : ball list = snd s\n\nlet search_ball (s:state) (ball_id :int): ball =\n  List.find (fun x -> get_id x = ball_id) (get_balls s)\n\nlet update_cue_ball_position (s:state) (ball_pos : float*float) : state =\n  let ball = search_ball s 0 in\n  (fst s, change_position ball ball_pos :: (List.filter  (fun x -> get_id x <> 0) (snd s)))\n\nlet update_cue_ball_velocity (s:state) (ball_vel : float*float) : state =\n  let ball = search_ball s 0 in\n  (fst s, change_velocity ball ball_vel :: (List.filter (fun x -> get_id x <> 0) (snd s)))\n\nlet next (s:state) : move =\n  failwith \"Unimplemented\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*   Xavier Leroy and Pierre Weis, projet Cristal, INRIA Rocquencourt     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\nlet kfprintf k o (Format (fmt, _)) =\n  make_printf (fun o acc -> output_acc o acc; k o) o End_of_acc fmt\nlet kbprintf k b (Format (fmt, _)) =\n  make_printf (fun b acc -> bufput_acc b acc; k b) b End_of_acc fmt\nlet ikfprintf k oc (Format (fmt, _)) =\n  make_iprintf k oc fmt\n\nlet fprintf oc fmt = kfprintf ignore oc fmt\nlet bprintf b fmt = kbprintf ignore b fmt\nlet ifprintf oc fmt = ikfprintf ignore oc fmt\nlet printf fmt = fprintf stdout fmt\nlet eprintf fmt = fprintf stderr fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let k' () acc =\n    let buf = Buffer.create 64 in\n    strput_acc buf acc;\n    k (Buffer.contents buf) in\n  make_printf k' () End_of_acc fmt\n\nlet sprintf fmt = ksprintf (fun s -> s) fmt\n\nlet kprintf = ksprintf\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Padding position. *)\ntype padty =\n  | Left   (* Text is left justified ('-' option).               *)\n  | Right  (* Text is right justified (no '-' option).           *)\n  | Zeros  (* Text is right justified by zeros (see '0' option). *)\n\n(***)\n\n(* Integer conversion. *)\ntype int_conv =\n  | Int_d | Int_pd | Int_sd        (*  %d | %+d | % d  *)\n  | Int_i | Int_pi | Int_si        (*  %i | %+i | % i  *)\n  | Int_x | Int_Cx                 (*  %x | %#x        *)\n  | Int_X | Int_CX                 (*  %X | %#X        *)\n  | Int_o | Int_Co                 (*  %o | %#o        *)\n  | Int_u                          (*  %u              *)\n\n(* Float conversion. *)\ntype float_conv =\n  | Float_f | Float_pf | Float_sf  (*  %f | %+f | % f  *)\n  | Float_e | Float_pe | Float_se  (*  %e | %+e | % e  *)\n  | Float_E | Float_pE | Float_sE  (*  %E | %+E | % E  *)\n  | Float_g | Float_pg | Float_sg  (*  %g | %+g | % g  *)\n  | Float_G | Float_pG | Float_sG  (*  %G | %+G | % G  *)\n  | Float_F                        (*  %F              *)\n  | Float_h | Float_ph | Float_sh  (*  %h | %+h | % h  *)\n  | Float_H | Float_pH | Float_sH  (*  %H | %+H | % H  *)\n\n(***)\n\n(* Char sets (see %[...]) are bitmaps implemented as 32-char strings. *)\ntype char_set = string\n\n(***)\n\n(* Counter used in Scanf. *)\ntype counter =\n  | Line_counter     (*  %l      *)\n  | Char_counter     (*  %n      *)\n  | Token_counter    (*  %N, %L  *)\n\n(***)\n\n(* Padding of strings and numbers. *)\ntype ('a, 'b) padding =\n  (* No padding (ex: \"%d\") *)\n  | No_padding  : ('a, 'a) padding\n  (* Literal padding (ex: \"%8d\") *)\n  | Lit_padding : padty * int -> ('a, 'a) padding\n  (* Padding as extra argument (ex: \"%*d\") *)\n  | Arg_padding : padty -> (int -> 'a, 'a) padding\n\n(* Some formats, such as %_d,\n   only accept an optional number as padding option (no extra argument) *)\ntype pad_option = int option\n\n(* Precision of floats and '0'-padding of integers. *)\ntype ('a, 'b) precision =\n  (* No precision (ex: \"%f\") *)\n  | No_precision : ('a, 'a) precision\n  (* Literal precision (ex: \"%.3f\") *)\n  | Lit_precision : int -> ('a, 'a) precision\n  (* Precision as extra argument (ex: \"%.*f\") *)\n  | Arg_precision : (int -> 'a, 'a) precision\n\n(* Some formats, such as %_f,\n   only accept an optional number as precision option (no extra argument) *)\ntype prec_option = int option\n\n(* see the Custom format combinator *)\ntype ('a, 'b, 'c) custom_arity =\n  | Custom_zero : ('a, string, 'a) custom_arity\n  | Custom_succ : ('a, 'b, 'c) custom_arity ->\n    ('a, 'x -> 'b, 'x -> 'c) custom_arity\n\n(***)\n\n(*        Relational format types\n\nIn the first format+gadts implementation, the type for %(..%) in the\nfmt GADT was as follows:\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option * ('d1, 'q1, 'd2, 'q2) reader_nb_unifier *\n    ('x, 'b, 'c, 'd1, 'q1, 'u) fmtty *\n    ('u, 'b, 'c, 'q1, 'e1, 'f) fmt ->\n      (('x, 'b, 'c, 'd2, 'q2, 'u) format6 -> 'x, 'b, 'c, 'd1, 'e1, 'f) fmt\n\nNotice that the 'u parameter in 'f position in the format argument\n(('x, .., 'u) format6 -> ..) is equal to the 'u parameter in 'a\nposition in the format tail (('u, .., 'f) fmt). This means that the\ntype of the expected format parameter depends of where the %(...%)\nare in the format string:\n\n  # Printf.printf \"%(%)\"\n  - : (unit, out_channel, unit, '_a, '_a, unit)\n      CamlinternalFormatBasics.format6 -> unit\n  = <fun>\n  # Printf.printf \"%(%)%d\"\n  - : (int -> unit, out_channel, unit, '_a, '_a, int -> unit)\n      CamlinternalFormatBasics.format6 -> int -> unit\n  = <fun>\n\nOn the contrary, the legacy typer gives a clever type that does not\ndepend on the position of %(..%) in the format string. For example,\n%(%) will have the polymorphic type ('a, 'b, 'c, 'd, 'd, 'a): it can\nbe concatenated to any format type, and only enforces the constraint\nthat its 'a and 'f parameters are equal (no format arguments) and 'd\nand 'e are equal (no reader argument).\n\nThe weakening of this parameter type in the GADT version broke user\ncode (in fact it essentially made %(...%) unusable except at the last\nposition of a format). In particular, the following would not work\nanymore:\n\n  fun sep ->\n    Format.printf \"foo%(%)bar%(%)baz\" sep sep\n\nAs the type-checker would require two *incompatible* types for the %(%)\nin different positions.\n\nThe solution to regain a general type for %(..%) is to generalize this\ntechnique, not only on the 'd, 'e parameters, but on all six\nparameters of a format: we introduce a \"relational\" type\n  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n   'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\nwhose values are proofs that ('a1, .., 'f1) and ('a2, .., 'f2) morally\ncorrespond to the same format type: 'a1 is obtained from 'f1,'b1,'c1\nin the exact same way that 'a2 is obtained from 'f2,'b2,'c2, etc.\n\nFor example, the relation between two format types beginning with a Char\nparameter is as follows:\n\n| Char_ty :                                                 (* %c  *)\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\nIn the general case, the term structure of fmtty_rel is (almost[1])\nisomorphic to the fmtty of the previous implementation: every\nconstructor is re-read with a binary, relational type, instead of the\nprevious unary typing. fmtty can then be re-defined as the diagonal of\nfmtty_rel:\n\n  type ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n       ('a, 'b, 'c, 'd, 'e, 'f,\n        'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\n\nOnce we have this fmtty_rel type in place, we can give the more\ngeneral type to %(...%):\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n    ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\nWe accept any format (('g, 'h, 'i, 'j, 'k, 'l) format6) (this is\ncompletely unrelated to the type of the current format), but also\nrequire a proof that this format is in relation to another format that\nis concatenable to the format tail. When executing a %(...%) format\n(in camlinternalFormat.ml:make_printf or scanf.ml:make_scanf), we\ntranstype the format along this relation using the 'recast' function\nto transpose between related format types.\n\n  val recast :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1) fmt\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmt\n\nNOTE [1]: the typing of Format_subst_ty requires not one format type, but\ntwo, one to establish the link between the format argument and the\nfirst six parameters, and the other for the link between the format\nargument and the last six parameters.\n\n| Format_subst_ty :                                         (* %(...%) *)\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n     ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\nWhen we generate a format AST, we generate exactly the same witness\nfor both relations, and the witness-conversion functions in\ncamlinternalFormat do rely on this invariant. For example, the\nfunction that proves that the relation is transitive\n\n  val trans :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n\ndoes assume that the two inputs have exactly the same term structure\n(and is only every used for argument witnesses of the\nFormat_subst_ty constructor).\n*)\n\n(* Type of a block used by the Format pretty-printer. *)\ntype block_type =\n  | Pp_hbox   (* Horizontal block no line breaking *)\n  | Pp_vbox   (* Vertical block each break leads to a new line *)\n  | Pp_hvbox  (* Horizontal-vertical block: same as vbox, except if this block\n                 is small enough to fit on a single line *)\n  | Pp_hovbox (* Horizontal or Vertical block: breaks lead to new line\n                 only when necessary to print the content of the block *)\n  | Pp_box    (* Horizontal or Indent block: breaks lead to new line\n                 only when necessary to print the content of the block, or\n                 when it leads to a new indentation of the current line *)\n  | Pp_fits   (* Internal usage: when a block fits on a single line *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype formatting_lit =\n  | Close_box                                           (* @]   *)\n  | Close_tag                                           (* @}   *)\n  | Break of string * int * int          (* @, | @  | @; | @;<> *)\n  | FFlush                                              (* @?   *)\n  | Force_newline                                       (* @\\n  *)\n  | Flush_newline                                       (* @.   *)\n  | Magic_size of string * int                          (* @<n> *)\n  | Escaped_at                                          (* @@   *)\n  | Escaped_percent                                     (* @%%  *)\n  | Scan_indic of char                                  (* @X   *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =\n  | Open_tag : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @{   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n  | Open_box : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @[   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n\n(***)\n\n(* List of format type elements. *)\n(* In particular used to represent %(...%) and %{...%} contents. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n     ('a, 'b, 'c, 'd, 'e, 'f,\n      'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\nand ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =\n  | Char_ty :                                                 (* %c  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | String_ty :                                               (* %s  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       string -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int_ty :                                                  (* %d  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int32_ty :                                                (* %ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int32 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Nativeint_ty :                                            (* %nd *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       nativeint -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int64_ty :                                                (* %Ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int64 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Float_ty :                                                (* %f  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       float -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Bool_ty :                                                 (* %B  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       bool -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  | Format_arg_ty :                                           (* %{...%} *)\n      ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)\n           fmtty_rel\n  | Format_subst_ty :                                         (* %(...%) *)\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)\n           fmtty_rel\n\n  (* Printf and Format specific constructors. *)\n  | Alpha_ty :                                                (* %a  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Theta_ty :                                                (* %t  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'c2) -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Any_ty :                                    (* Used for custom formats *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  (* Scanf specific constructor. *)\n  | Reader_ty :                                               (* %r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n  | Ignored_reader_ty :                                       (* %_r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n\n  | End_of_fmtty :\n      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1,\n       'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel\n\n(***)\n\n(* List of format elements. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmt =\n  | Char :                                                   (* %c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_char :                                              (* %C *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | String :                                                 (* %s *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_string :                                            (* %S *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int :                                                    (* %[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int32 :                                                  (* %l[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Nativeint :                                              (* %n[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, nativeint -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int64 :                                                  (* %L[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Float :                                                  (* %[feEgGF] *)\n      float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Bool :                                                   (* %[bB] *)\n      ('x, bool -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Flush :                                                  (* %! *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | String_literal :                                         (* abc *)\n      string * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Char_literal :                                           (* x *)\n      char * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | Format_arg :                                             (* %{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Format_subst :                                           (* %(...%) *)\n      pad_option *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\n  (* Printf and Format specific constructor. *)\n  | Alpha :                                                  (* %a *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Theta :                                                  (* %t *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Format specific constructor: *)\n  | Formatting_lit :                                         (* @_ *)\n      formatting_lit * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Formatting_gen :                                             (* @_ *)\n      ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *\n      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt\n\n  (* Scanf specific constructors: *)\n  | Reader :                                                 (* %r *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd, 'e, 'f) fmt\n  | Scan_char_set :                                          (* %[...] *)\n      pad_option * char_set * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_get_counter :                                       (* %[nlNL] *)\n      counter * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_next_char :                                         (* %0c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Ignored_param :                                          (* %_ *)\n      ('a, 'b, 'c, 'd, 'y, 'x) ignored * ('x, 'b, 'c, 'y, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Custom printing format (PR#6452, GPR#140)\n\n     We include a type Custom of \"custom converters\", where an\n     arbitrary function can be used to convert one or more\n     arguments. There is no syntax for custom converters, it is only\n     intended for custom processors that wish to rely on the\n     stdlib-defined format GADTs.\n\n     For instance a pre-processor could choose to interpret strings\n     prefixed with [\"!\"] as format strings where [%{{ ... }}] is\n     a special form to pass a to_string function, so that one could\n     write:\n\n     {[\n       type t = { x : int; y : int }\n\n       let string_of_t t = Printf.sprintf \"{ x = %d; y = %d }\" t.x t.y\n\n       Printf.printf !\"t = %{{string_of_t}}\" { x = 42; y = 42 }\n     ]}\n  *)\n  | Custom :\n      ('a, 'x, 'y) custom_arity * (unit -> 'x) * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      ('y, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* end of a format specification *)\n  | End_of_format :\n        ('f, 'b, 'c, 'e, 'e, 'f) fmt\n\n(***)\n\n(* Type for ignored parameters (see \"%_\"). *)\nand ('a, 'b, 'c, 'd, 'e, 'f) ignored =\n  | Ignored_char :                                           (* %_c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_char :                                      (* %_C *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_string :                                         (* %_s *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_string :                                    (* %_S *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int :                                            (* %_d *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int32 :                                          (* %_ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_nativeint :                                      (* %_nd *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int64 :                                          (* %_Ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_float :                                          (* %_f *)\n      pad_option * prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_bool :                                           (* %_B *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_arg :                                     (* %_{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty ->\n        ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_subst :                                   (* %_(...%) *)\n      pad_option * ('a, 'b, 'c, 'd, 'e, 'f) fmtty ->\n        ('a, 'b, 'c, 'd, 'e, 'f) ignored\n  | Ignored_reader :                                         (* %_r *)\n      ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored\n  | Ignored_scan_char_set :                                  (* %_[...] *)\n      pad_option * char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_get_counter :                               (* %_[nlNL] *)\n      counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_next_char :                                 (* %_0c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n\nand ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string\n\nlet rec erase_rel : type a b c d e f g h i j k l .\n  (a, b, c, d, e, f,\n   g, h, i, j, k, l) fmtty_rel -> (a, b, c, d, e, f) fmtty\n= function\n  | Char_ty rest ->\n    Char_ty (erase_rel rest)\n  | String_ty rest ->\n    String_ty (erase_rel rest)\n  | Int_ty rest ->\n    Int_ty (erase_rel rest)\n  | Int32_ty rest ->\n    Int32_ty (erase_rel rest)\n  | Int64_ty rest ->\n    Int64_ty (erase_rel rest)\n  | Nativeint_ty rest ->\n    Nativeint_ty (erase_rel rest)\n  | Float_ty rest ->\n    Float_ty (erase_rel rest)\n  | Bool_ty rest ->\n    Bool_ty (erase_rel rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, erase_rel rest)\n  | Format_subst_ty (ty1, _ty2, rest) ->\n    Format_subst_ty (ty1, ty1, erase_rel rest)\n  | Alpha_ty rest ->\n    Alpha_ty (erase_rel rest)\n  | Theta_ty rest ->\n    Theta_ty (erase_rel rest)\n  | Any_ty rest ->\n    Any_ty (erase_rel rest)\n  | Reader_ty rest ->\n    Reader_ty (erase_rel rest)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (erase_rel rest)\n  | End_of_fmtty -> End_of_fmtty\n\n(******************************************************************************)\n                         (* Format type concatenation *)\n\n(* Concatenate two format types. *)\n(* Used by:\n   * reader_nb_unifier_of_fmtty to count readers in an fmtty,\n   * Scanf.take_fmtty_format_readers to extract readers inside %(...%),\n   * CamlinternalFormat.fmtty_of_ignored_format to extract format type. *)\n\n(*\nlet rec concat_fmtty : type a b c d e f g h .\n    (a, b, c, d, e, f) fmtty ->\n    (f, b, c, e, g, h) fmtty ->\n    (a, b, c, d, g, h) fmtty =\n*)\nlet rec concat_fmtty :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n       g1 j1 g2 j2\n  .\n    (g1, b1, c1, j1, d1, a1,\n     g2, b2, c2, j2, d2, a2) fmtty_rel ->\n    (a1, b1, c1, d1, e1, f1,\n     a2, b2, c2, d2, e2, f2) fmtty_rel ->\n    (g1, b1, c1, j1, e1, f1,\n     g2, b2, c2, j2, e2, f2) fmtty_rel =\nfun fmtty1 fmtty2 -> match fmtty1 with\n  | Char_ty rest ->\n    Char_ty (concat_fmtty rest fmtty2)\n  | String_ty rest ->\n    String_ty (concat_fmtty rest fmtty2)\n  | Int_ty rest ->\n    Int_ty (concat_fmtty rest fmtty2)\n  | Int32_ty rest ->\n    Int32_ty (concat_fmtty rest fmtty2)\n  | Nativeint_ty rest ->\n    Nativeint_ty (concat_fmtty rest fmtty2)\n  | Int64_ty rest ->\n    Int64_ty (concat_fmtty rest fmtty2)\n  | Float_ty rest ->\n    Float_ty (concat_fmtty rest fmtty2)\n  | Bool_ty rest ->\n    Bool_ty (concat_fmtty rest fmtty2)\n  | Alpha_ty rest ->\n    Alpha_ty (concat_fmtty rest fmtty2)\n  | Theta_ty rest ->\n    Theta_ty (concat_fmtty rest fmtty2)\n  | Any_ty rest ->\n    Any_ty (concat_fmtty rest fmtty2)\n  | Reader_ty rest ->\n    Reader_ty (concat_fmtty rest fmtty2)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (concat_fmtty rest fmtty2)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, concat_fmtty rest fmtty2)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty2, concat_fmtty rest fmtty2)\n  | End_of_fmtty -> fmtty2\n\n(******************************************************************************)\n                           (* Format concatenation *)\n\n(* Concatenate two formats. *)\nlet rec concat_fmt : type a b c d e f g h .\n    (a, b, c, d, e, f) fmt ->\n    (f, b, c, e, g, h) fmt ->\n    (a, b, c, d, g, h) fmt =\nfun fmt1 fmt2 -> match fmt1 with\n  | String (pad, rest) ->\n    String (pad, concat_fmt rest fmt2)\n  | Caml_string (pad, rest) ->\n    Caml_string (pad, concat_fmt rest fmt2)\n\n  | Int (iconv, pad, prec, rest) ->\n    Int (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int32 (iconv, pad, prec, rest) ->\n    Int32 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Nativeint (iconv, pad, prec, rest) ->\n    Nativeint (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int64 (iconv, pad, prec, rest) ->\n    Int64 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Float (fconv, pad, prec, rest) ->\n    Float (fconv, pad, prec, concat_fmt rest fmt2)\n\n  | Char (rest) ->\n    Char (concat_fmt rest fmt2)\n  | Caml_char rest ->\n    Caml_char (concat_fmt rest fmt2)\n  | Bool (pad, rest) ->\n    Bool (pad, concat_fmt rest fmt2)\n  | Alpha rest ->\n    Alpha (concat_fmt rest fmt2)\n  | Theta rest ->\n    Theta (concat_fmt rest fmt2)\n  | Custom (arity, f, rest) ->\n    Custom (arity, f, concat_fmt rest fmt2)\n  | Reader rest ->\n    Reader (concat_fmt rest fmt2)\n  | Flush rest ->\n    Flush (concat_fmt rest fmt2)\n\n  | String_literal (str, rest) ->\n    String_literal (str, concat_fmt rest fmt2)\n  | Char_literal (chr, rest) ->\n    Char_literal   (chr, concat_fmt rest fmt2)\n\n  | Format_arg (pad, fmtty, rest) ->\n    Format_arg   (pad, fmtty, concat_fmt rest fmt2)\n  | Format_subst (pad, fmtty, rest) ->\n    Format_subst (pad, fmtty, concat_fmt rest fmt2)\n\n  | Scan_char_set (width_opt, char_set, rest) ->\n    Scan_char_set (width_opt, char_set, concat_fmt rest fmt2)\n  | Scan_get_counter (counter, rest) ->\n    Scan_get_counter (counter, concat_fmt rest fmt2)\n  | Scan_next_char (rest) ->\n    Scan_next_char (concat_fmt rest fmt2)\n  | Ignored_param (ign, rest) ->\n    Ignored_param (ign, concat_fmt rest fmt2)\n\n  | Formatting_lit (fmting_lit, rest) ->\n    Formatting_lit (fmting_lit, concat_fmt rest fmt2)\n  | Formatting_gen (fmting_gen, rest) ->\n    Formatting_gen (fmting_gen, concat_fmt rest fmt2)\n\n  | End_of_format ->\n    fmt2\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* type 'a option = None | Some of 'a *)\n\n(* Exceptions *)\n\nexternal register_named_value : string -> 'a -> unit\n                              = \"caml_register_named_value\"\n\nlet () =\n  (* for asmrun/fail.c *)\n  register_named_value \"Pervasives.array_bound_error\"\n    (Invalid_argument \"index out of bounds\")\n\n\nexternal raise : exn -> 'a = \"%raise\"\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n\nlet failwith s = raise(Failure s)\nlet invalid_arg s = raise(Invalid_argument s)\n\nexception Exit\n\n(* Composition operators *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n\n(* Debugging *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\nexternal __FILE__ : string = \"%loc_FILE\"\nexternal __LINE__ : int = \"%loc_LINE\"\nexternal __MODULE__ : string = \"%loc_MODULE\"\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n\n(* Comparisons *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\nexternal compare : 'a -> 'a -> int = \"%compare\"\n\nlet min x y = if x <= y then x else y\nlet max x y = if x >= y then x else y\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n\n(* Boolean operations *)\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( & ) : bool -> bool -> bool = \"%sequand\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( or ) : bool -> bool -> bool = \"%sequor\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n\n(* Integer operations *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\nexternal ( ~+ ) : int -> int = \"%identity\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nexternal ( + ) : int -> int -> int = \"%addint\"\nexternal ( - ) : int -> int -> int = \"%subint\"\nexternal ( * ) : int -> int -> int = \"%mulint\"\nexternal ( / ) : int -> int -> int = \"%divint\"\nexternal ( mod ) : int -> int -> int = \"%modint\"\n\nlet abs x = if x >= 0 then x else -x\n\nexternal ( land ) : int -> int -> int = \"%andint\"\nexternal ( lor ) : int -> int -> int = \"%orint\"\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n\nlet lnot x = x lxor (-1)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\n\n(* Floating-point operations *)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\nexternal ( ~+. ) : float -> float = \"%identity\"\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\nexternal ( ** ) : float -> float -> float = \"caml_power_float\" \"pow\"\n  [@@unboxed] [@@noalloc]\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" [@@unboxed] [@@noalloc]\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\"\n  [@@unboxed] [@@noalloc]\nexternal acos : float -> float = \"caml_acos_float\" \"acos\"\n  [@@unboxed] [@@noalloc]\nexternal asin : float -> float = \"caml_asin_float\" \"asin\"\n  [@@unboxed] [@@noalloc]\nexternal atan : float -> float = \"caml_atan_float\" \"atan\"\n  [@@unboxed] [@@noalloc]\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\"\n  [@@unboxed] [@@noalloc]\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" [@@unboxed] [@@noalloc]\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" [@@unboxed] [@@noalloc]\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\"\n  [@@unboxed] [@@noalloc]\nexternal log : float -> float = \"caml_log_float\" \"log\" [@@unboxed] [@@noalloc]\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\"\n  [@@unboxed] [@@noalloc]\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\"\n  [@@unboxed] [@@noalloc]\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" [@@unboxed] [@@noalloc]\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\"\n  [@@unboxed] [@@noalloc]\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\"\n  [@@unboxed] [@@noalloc]\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" [@@unboxed] [@@noalloc]\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\"\n  [@@unboxed] [@@noalloc]\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\"\n  [@@unboxed] [@@noalloc]\nexternal floor : float -> float = \"caml_floor_float\" \"floor\"\n  [@@unboxed] [@@noalloc]\nexternal abs_float : float -> float = \"%absfloat\"\nexternal copysign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\"\n                  [@@unboxed] [@@noalloc]\nexternal mod_float : float -> float -> float = \"caml_fmod_float\" \"fmod\"\n  [@@unboxed] [@@noalloc]\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed]) =\n  \"caml_ldexp_float\" \"caml_ldexp_float_unboxed\" [@@noalloc]\nexternal modf : float -> float * float = \"caml_modf_float\"\nexternal float : int -> float = \"%floatofint\"\nexternal float_of_int : int -> float = \"%floatofint\"\nexternal truncate : float -> int = \"%intoffloat\"\nexternal int_of_float : float -> int = \"%intoffloat\"\nexternal float_of_bits : int64 -> float\n  = \"caml_int64_float_of_bits\" \"caml_int64_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\nlet infinity =\n  float_of_bits 0x7F_F0_00_00_00_00_00_00L\nlet neg_infinity =\n  float_of_bits 0xFF_F0_00_00_00_00_00_00L\nlet nan =\n  float_of_bits 0x7F_F0_00_00_00_00_00_01L\nlet max_float =\n  float_of_bits 0x7F_EF_FF_FF_FF_FF_FF_FFL\nlet min_float =\n  float_of_bits 0x00_10_00_00_00_00_00_00L\nlet epsilon_float =\n  float_of_bits 0x3C_B0_00_00_00_00_00_00L\n\ntype fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : (float [@unboxed]) -> fpclass =\n  \"caml_classify_float\" \"caml_classify_float_unboxed\" [@@noalloc]\n\n(* String and byte sequence operations -- more in modules String and Bytes *)\n\nexternal string_length : string -> int = \"%string_length\"\nexternal bytes_length : bytes -> int = \"%bytes_length\"\nexternal bytes_create : int -> bytes = \"caml_create_bytes\"\nexternal string_blit : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal bytes_blit : bytes -> int -> bytes -> int -> int -> unit\n                        = \"caml_blit_bytes\" [@@noalloc]\nexternal bytes_unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet ( ^ ) s1 s2 =\n  let l1 = string_length s1 and l2 = string_length s2 in\n  let s = bytes_create (l1 + l2) in\n  string_blit s1 0 s 0 l1;\n  string_blit s2 0 s l1 l2;\n  bytes_unsafe_to_string s\n\n(* Character operations -- more in module Char *)\n\nexternal int_of_char : char -> int = \"%identity\"\nexternal unsafe_char_of_int : int -> char = \"%identity\"\nlet char_of_int n =\n  if n < 0 || n > 255 then invalid_arg \"char_of_int\" else unsafe_char_of_int n\n\n(* Unit operations *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n\n(* Pair operations *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n\n(* References *)\n\ntype 'a ref = { mutable contents : 'a }\nexternal ref : 'a -> 'a ref = \"%makemutable\"\nexternal ( ! ) : 'a ref -> 'a = \"%field0\"\nexternal ( := ) : 'a ref -> 'a -> unit = \"%setfield0\"\nexternal incr : int ref -> unit = \"%incr\"\nexternal decr : int ref -> unit = \"%decr\"\n\n(* Result type *)\n\ntype ('a,'b) result = Ok of 'a | Error of 'b\n\n(* String conversion functions *)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nexternal format_float : string -> float -> string = \"caml_format_float\"\n\nlet string_of_bool b =\n  if b then \"true\" else \"false\"\nlet bool_of_string = function\n  | \"true\" -> true\n  | \"false\" -> false\n  | _ -> invalid_arg \"bool_of_string\"\n\nlet bool_of_string_opt = function\n  | \"true\" -> Some true\n  | \"false\" -> Some false\n  | _ -> None\n\nlet string_of_int n =\n  format_int \"%d\" n\n\nexternal int_of_string : string -> int = \"caml_int_of_string\"\n\nlet int_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (int_of_string s)\n  with Failure _ -> None\n\nexternal string_get : string -> int -> char = \"%string_safe_get\"\n\nlet valid_float_lexem s =\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\" else\n    match string_get s i with\n    | '0' .. '9' | '-' -> loop (i + 1)\n    | _ -> s\n  in\n  loop 0\n\nlet string_of_float f = valid_float_lexem (format_float \"%.12g\" f)\n\nexternal float_of_string : string -> float = \"caml_float_of_string\"\n\nlet float_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (float_of_string s)\n  with Failure _ -> None\n\n(* List operations -- more in module List *)\n\nlet rec ( @ ) l1 l2 =\n  match l1 with\n    [] -> l2\n  | hd :: tl -> hd :: (tl @ l2)\n\n(* I/O operations *)\n\ntype in_channel\ntype out_channel\n\nexternal open_descriptor_out : int -> out_channel\n                             = \"caml_ml_open_descriptor_out\"\nexternal open_descriptor_in : int -> in_channel = \"caml_ml_open_descriptor_in\"\n\nlet stdin = open_descriptor_in 0\nlet stdout = open_descriptor_out 1\nlet stderr = open_descriptor_out 2\n\n(* General output functions *)\n\ntype open_flag =\n    Open_rdonly | Open_wronly | Open_append\n  | Open_creat | Open_trunc | Open_excl\n  | Open_binary | Open_text | Open_nonblock\n\nexternal open_desc : string -> open_flag list -> int -> int = \"caml_sys_open\"\n\nexternal set_out_channel_name: out_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_out_gen mode perm name =\n  let c = open_descriptor_out(open_desc name mode perm) in\n  set_out_channel_name c name;\n  c\n\nlet open_out name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o666 name\n\nlet open_out_bin name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_binary] 0o666 name\n\nexternal flush : out_channel -> unit = \"caml_ml_flush\"\n\nexternal out_channels_list : unit -> out_channel list\n                           = \"caml_ml_out_channels_list\"\n\nlet flush_all () =\n  let rec iter = function\n      [] -> ()\n    | a::l ->\n        begin try\n            flush a\n        with Sys_error _ ->\n          () (* ignore channels closed during a preceding flush. *)\n        end;\n        iter l\n  in iter (out_channels_list ())\n\nexternal unsafe_output : out_channel -> bytes -> int -> int -> unit\n                       = \"caml_ml_output_bytes\"\nexternal unsafe_output_string : out_channel -> string -> int -> int -> unit\n                              = \"caml_ml_output\"\n\nexternal output_char : out_channel -> char -> unit = \"caml_ml_output_char\"\n\nlet output_bytes oc s =\n  unsafe_output oc s 0 (bytes_length s)\n\nlet output_string oc s =\n  unsafe_output_string oc s 0 (string_length s)\n\nlet output oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"output\"\n  else unsafe_output oc s ofs len\n\nlet output_substring oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > string_length s - len\n  then invalid_arg \"output_substring\"\n  else unsafe_output_string oc s ofs len\n\nexternal output_byte : out_channel -> int -> unit = \"caml_ml_output_char\"\nexternal output_binary_int : out_channel -> int -> unit = \"caml_ml_output_int\"\n\nexternal marshal_to_channel : out_channel -> 'a -> unit list -> unit\n     = \"caml_output_value\"\nlet output_value chan v = marshal_to_channel chan v []\n\nexternal seek_out : out_channel -> int -> unit = \"caml_ml_seek_out\"\nexternal pos_out : out_channel -> int = \"caml_ml_pos_out\"\nexternal out_channel_length : out_channel -> int = \"caml_ml_channel_size\"\nexternal close_out_channel : out_channel -> unit = \"caml_ml_close_channel\"\nlet close_out oc = flush oc; close_out_channel oc\nlet close_out_noerr oc =\n  (try flush oc with _ -> ());\n  (try close_out_channel oc with _ -> ())\nexternal set_binary_mode_out : out_channel -> bool -> unit\n                             = \"caml_ml_set_binary_mode\"\n\n(* General input functions *)\n\nexternal set_in_channel_name: in_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_in_gen mode perm name =\n  let c = open_descriptor_in(open_desc name mode perm) in\n  set_in_channel_name c name;\n  c\n\nlet open_in name =\n  open_in_gen [Open_rdonly; Open_text] 0 name\n\nlet open_in_bin name =\n  open_in_gen [Open_rdonly; Open_binary] 0 name\n\nexternal input_char : in_channel -> char = \"caml_ml_input_char\"\n\nexternal unsafe_input : in_channel -> bytes -> int -> int -> int\n                      = \"caml_ml_input\"\n\nlet input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"input\"\n  else unsafe_input ic s ofs len\n\nlet rec unsafe_really_input ic s ofs len =\n  if len <= 0 then () else begin\n    let r = unsafe_input ic s ofs len in\n    if r = 0\n    then raise End_of_file\n    else unsafe_really_input ic s (ofs + r) (len - r)\n  end\n\nlet really_input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"really_input\"\n  else unsafe_really_input ic s ofs len\n\nlet really_input_string ic len =\n  let s = bytes_create len in\n  really_input ic s 0 len;\n  bytes_unsafe_to_string s\n\nexternal input_scan_line : in_channel -> int = \"caml_ml_input_scan_line\"\n\nlet input_line chan =\n  let rec build_result buf pos = function\n    [] -> buf\n  | hd :: tl ->\n      let len = bytes_length hd in\n      bytes_blit hd 0 buf (pos - len) len;\n      build_result buf (pos - len) tl in\n  let rec scan accu len =\n    let n = input_scan_line chan in\n    if n = 0 then begin                   (* n = 0: we are at EOF *)\n      match accu with\n        [] -> raise End_of_file\n      | _  -> build_result (bytes_create len) len accu\n    end else if n > 0 then begin          (* n > 0: newline found in buffer *)\n      let res = bytes_create (n - 1) in\n      ignore (unsafe_input chan res 0 (n - 1));\n      ignore (input_char chan);           (* skip the newline *)\n      match accu with\n        [] -> res\n      |  _ -> let len = len + n - 1 in\n              build_result (bytes_create len) len (res :: accu)\n    end else begin                        (* n < 0: newline not found *)\n      let beg = bytes_create (-n) in\n      ignore(unsafe_input chan beg 0 (-n));\n      scan (beg :: accu) (len - n)\n    end\n  in bytes_unsafe_to_string (scan [] 0)\n\nexternal input_byte : in_channel -> int = \"caml_ml_input_char\"\nexternal input_binary_int : in_channel -> int = \"caml_ml_input_int\"\nexternal input_value : in_channel -> 'a = \"caml_input_value\"\nexternal seek_in : in_channel -> int -> unit = \"caml_ml_seek_in\"\nexternal pos_in : in_channel -> int = \"caml_ml_pos_in\"\nexternal in_channel_length : in_channel -> int = \"caml_ml_channel_size\"\nexternal close_in : in_channel -> unit = \"caml_ml_close_channel\"\nlet close_in_noerr ic = (try close_in ic with _ -> ())\nexternal set_binary_mode_in : in_channel -> bool -> unit\n                            = \"caml_ml_set_binary_mode\"\n\n(* Output functions on standard output *)\n\nlet print_char c = output_char stdout c\nlet print_string s = output_string stdout s\nlet print_bytes s = output_bytes stdout s\nlet print_int i = output_string stdout (string_of_int i)\nlet print_float f = output_string stdout (string_of_float f)\nlet print_endline s =\n  output_string stdout s; output_char stdout '\\n'; flush stdout\nlet print_newline () = output_char stdout '\\n'; flush stdout\n\n(* Output functions on standard error *)\n\nlet prerr_char c = output_char stderr c\nlet prerr_string s = output_string stderr s\nlet prerr_bytes s = output_bytes stderr s\nlet prerr_int i = output_string stderr (string_of_int i)\nlet prerr_float f = output_string stderr (string_of_float f)\nlet prerr_endline s =\n  output_string stderr s; output_char stderr '\\n'; flush stderr\nlet prerr_newline () = output_char stderr '\\n'; flush stderr\n\n(* Input functions on standard input *)\n\nlet read_line () = flush stdout; input_line stdin\nlet read_int () = int_of_string(read_line())\nlet read_int_opt () = int_of_string_opt(read_line())\nlet read_float () = float_of_string(read_line())\nlet read_float_opt () = float_of_string_opt(read_line())\n\n(* Operations on large files *)\n\nmodule LargeFile =\n  struct\n    external seek_out : out_channel -> int64 -> unit = \"caml_ml_seek_out_64\"\n    external pos_out : out_channel -> int64 = \"caml_ml_pos_out_64\"\n    external out_channel_length : out_channel -> int64\n                                = \"caml_ml_channel_size_64\"\n    external seek_in : in_channel -> int64 -> unit = \"caml_ml_seek_in_64\"\n    external pos_in : in_channel -> int64 = \"caml_ml_pos_in_64\"\n    external in_channel_length : in_channel -> int64 = \"caml_ml_channel_size_64\"\n  end\n\n(* Formats *)\n\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6\n   = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6\n   = Format of ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt\n               * string\n\ntype ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6\n\ntype ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nlet string_of_format (Format (_fmt, str)) = str\n\nexternal format_of_string :\n ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n ('a, 'b, 'c, 'd, 'e, 'f) format6 = \"%identity\"\n\nlet ( ^^ ) (Format (fmt1, str1)) (Format (fmt2, str2)) =\n  Format (CamlinternalFormatBasics.concat_fmt fmt1 fmt2,\n          str1 ^ \"%,\" ^ str2)\n\n(* Miscellaneous *)\n\nexternal sys_exit : int -> 'a = \"caml_sys_exit\"\n\nlet exit_function = ref flush_all\n\nlet at_exit f =\n  let g = !exit_function in\n  exit_function := (fun () -> f(); g())\n\nlet do_at_exit () = (!exit_function) ()\n\nlet exit retcode =\n  do_at_exit ();\n  sys_exit retcode\n\nlet _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* List operations *)\n\nlet rec length_aux len = function\n    [] -> len\n  | _::l -> length_aux (len + 1) l\n\nlet length l = length_aux 0 l\n\nlet cons a l = a::l\n\nlet hd = function\n    [] -> failwith \"hd\"\n  | a::_ -> a\n\nlet tl = function\n    [] -> failwith \"tl\"\n  | _::l -> l\n\nlet nth l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> failwith \"nth\"\n    | a::l -> if n = 0 then a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet nth_opt l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> None\n    | a::l -> if n = 0 then Some a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet append = (@)\n\nlet rec rev_append l1 l2 =\n  match l1 with\n    [] -> l2\n  | a :: l -> rev_append l (a :: l2)\n\nlet rev l = rev_append l []\n\nlet rec init_tailrec_aux acc i n f =\n  if i >= n then acc\n  else init_tailrec_aux (f i :: acc) (i+1) n f\n\nlet rec init_aux i n f =\n  if i >= n then []\n  else\n    let r = f i in\n    r :: init_aux (i+1) n f\n\nlet init len f =\n  if len < 0 then invalid_arg \"List.init\" else\n  if len > 10_000 then rev (init_tailrec_aux [] 0 len f)\n  else init_aux 0 len f\n\nlet rec flatten = function\n    [] -> []\n  | l::r -> l @ flatten r\n\nlet concat = flatten\n\nlet rec map f = function\n    [] -> []\n  | a::l -> let r = f a in r :: map f l\n\nlet rec mapi i f = function\n    [] -> []\n  | a::l -> let r = f i a in r :: mapi (i + 1) f l\n\nlet mapi f l = mapi 0 f l\n\nlet rev_map f l =\n  let rec rmap_f accu = function\n    | [] -> accu\n    | a::l -> rmap_f (f a :: accu) l\n  in\n  rmap_f [] l\n\n\nlet rec iter f = function\n    [] -> ()\n  | a::l -> f a; iter f l\n\nlet rec iteri i f = function\n    [] -> ()\n  | a::l -> f i a; iteri (i + 1) f l\n\nlet iteri f l = iteri 0 f l\n\nlet rec fold_left f accu l =\n  match l with\n    [] -> accu\n  | a::l -> fold_left f (f accu a) l\n\nlet rec fold_right f l accu =\n  match l with\n    [] -> accu\n  | a::l -> f a (fold_right f l accu)\n\nlet rec map2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> let r = f a1 a2 in r :: map2 f l1 l2\n  | (_, _) -> invalid_arg \"List.map2\"\n\nlet rev_map2 f l1 l2 =\n  let rec rmap2_f accu l1 l2 =\n    match (l1, l2) with\n    | ([], []) -> accu\n    | (a1::l1, a2::l2) -> rmap2_f (f a1 a2 :: accu) l1 l2\n    | (_, _) -> invalid_arg \"List.rev_map2\"\n  in\n  rmap2_f [] l1 l2\n\n\nlet rec iter2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> ()\n  | (a1::l1, a2::l2) -> f a1 a2; iter2 f l1 l2\n  | (_, _) -> invalid_arg \"List.iter2\"\n\nlet rec fold_left2 f accu l1 l2 =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> fold_left2 f (f accu a1 a2) l1 l2\n  | (_, _) -> invalid_arg \"List.fold_left2\"\n\nlet rec fold_right2 f l1 l2 accu =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> f a1 a2 (fold_right2 f l1 l2 accu)\n  | (_, _) -> invalid_arg \"List.fold_right2\"\n\nlet rec for_all p = function\n    [] -> true\n  | a::l -> p a && for_all p l\n\nlet rec exists p = function\n    [] -> false\n  | a::l -> p a || exists p l\n\nlet rec for_all2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> true\n  | (a1::l1, a2::l2) -> p a1 a2 && for_all2 p l1 l2\n  | (_, _) -> invalid_arg \"List.for_all2\"\n\nlet rec exists2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> false\n  | (a1::l1, a2::l2) -> p a1 a2 || exists2 p l1 l2\n  | (_, _) -> invalid_arg \"List.exists2\"\n\nlet rec mem x = function\n    [] -> false\n  | a::l -> compare a x = 0 || mem x l\n\nlet rec memq x = function\n    [] -> false\n  | a::l -> a == x || memq x l\n\nlet rec assoc x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if compare a x = 0 then b else assoc x l\n\nlet rec assoc_opt x = function\n    [] -> None\n  | (a,b)::l -> if compare a x = 0 then Some b else assoc_opt x l\n\nlet rec assq x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if a == x then b else assq x l\n\nlet rec assq_opt x = function\n    [] -> None\n  | (a,b)::l -> if a == x then Some b else assq_opt x l\n\nlet rec mem_assoc x = function\n  | [] -> false\n  | (a, _) :: l -> compare a x = 0 || mem_assoc x l\n\nlet rec mem_assq x = function\n  | [] -> false\n  | (a, _) :: l -> a == x || mem_assq x l\n\nlet rec remove_assoc x = function\n  | [] -> []\n  | (a, _ as pair) :: l ->\n      if compare a x = 0 then l else pair :: remove_assoc x l\n\nlet rec remove_assq x = function\n  | [] -> []\n  | (a, _ as pair) :: l -> if a == x then l else pair :: remove_assq x l\n\nlet rec find p = function\n  | [] -> raise Not_found\n  | x :: l -> if p x then x else find p l\n\nlet rec find_opt p = function\n  | [] -> None\n  | x :: l -> if p x then Some x else find_opt p l\n\nlet find_all p =\n  let rec find accu = function\n  | [] -> rev accu\n  | x :: l -> if p x then find (x :: accu) l else find accu l in\n  find []\n\nlet filter = find_all\n\nlet partition p l =\n  let rec part yes no = function\n  | [] -> (rev yes, rev no)\n  | x :: l -> if p x then part (x :: yes) no l else part yes (x :: no) l in\n  part [] [] l\n\nlet rec split = function\n    [] -> ([], [])\n  | (x,y)::l ->\n      let (rx, ry) = split l in (x::rx, y::ry)\n\nlet rec combine l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> (a1, a2) :: combine l1 l2\n  | (_, _) -> invalid_arg \"List.combine\"\n\n(** sorting *)\n\nlet rec merge cmp l1 l2 =\n  match l1, l2 with\n  | [], l2 -> l2\n  | l1, [] -> l1\n  | h1 :: t1, h2 :: t2 ->\n      if cmp h1 h2 <= 0\n      then h1 :: merge cmp t1 l2\n      else h2 :: merge cmp l1 t2\n\n\nlet rec chop k l =\n  if k = 0 then l else begin\n    match l with\n    | _::t -> chop (k-1) t\n    | _ -> assert false\n  end\n\n\nlet stable_sort cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 <= 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 <= 0 then begin\n         if cmp x2 x3 <= 0 then [x1; x2; x3]\n         else if cmp x1 x3 <= 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 <= 0 then [x2; x1; x3]\n         else if cmp x2 x3 <= 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 > 0 then begin\n         if cmp x2 x3 > 0 then [x1; x2; x3]\n         else if cmp x1 x3 > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 > 0 then [x2; x1; x3]\n         else if cmp x2 x3 > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n\n\nlet sort = stable_sort\nlet fast_sort = stable_sort\n\n(* Note: on a list of length between about 100000 (depending on the minor\n   heap size and the type of the list) and Sys.max_array_size, it is\n   actually faster to use the following, but it might also use more memory\n   because the argument list cannot be deallocated incrementally.\n\n   Also, there seems to be a bug in this code or in the\n   implementation of obj_truncate.\n\nexternal obj_truncate : 'a array -> int -> unit = \"caml_obj_truncate\"\n\nlet array_to_list_in_place a =\n  let l = Array.length a in\n  let rec loop accu n p =\n    if p <= 0 then accu else begin\n      if p = n then begin\n        obj_truncate a p;\n        loop (a.(p-1) :: accu) (n-1000) (p-1)\n      end else begin\n        loop (a.(p-1) :: accu) n (p-1)\n      end\n    end\n  in\n  loop [] (l-1000) l\n\n\nlet stable_sort cmp l =\n  let a = Array.of_list l in\n  Array.stable_sort cmp a;\n  array_to_list_in_place a\n\n*)\n\n\n(** sorting + removing duplicates *)\n\nlet sort_uniq cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge t1 t2 (h1::accu)\n        else if c < 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge_rev t1 t2 (h1::accu)\n        else if c > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c < 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c < 0 then [x2; x3] else [x3; x2]\n       end else if c < 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c > 0 then [x2; x3] else [x3; x2]\n       end else if c > 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n\nlet rec compare_lengths l1 l2 =\n  match l1, l2 with\n  | [], [] -> 0\n  | [], _ -> -1\n  | _, [] -> 1\n  | _ :: l1, _ :: l2 -> compare_lengths l1 l2\n;;\n\nlet rec compare_length_with l n =\n  match l with\n  | [] ->\n    if n = 0 then 0 else\n      if n > 0 then -1 else 1\n  | _ :: l ->\n    if n <= 0 then 1 else\n      compare_length_with l (n-1)\n;;\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Character operations *)\n\nexternal code: char -> int = \"%identity\"\nexternal unsafe_chr: int -> char = \"%identity\"\n\nlet chr n =\n  if n < 0 || n > 255 then invalid_arg \"Char.chr\" else unsafe_chr n\n\nexternal bytes_create: int -> bytes = \"caml_create_bytes\"\nexternal bytes_unsafe_set : bytes -> int -> char -> unit\n                           = \"%bytes_unsafe_set\"\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet escaped = function\n  | '\\'' -> \"\\\\'\"\n  | '\\\\' -> \"\\\\\\\\\"\n  | '\\n' -> \"\\\\n\"\n  | '\\t' -> \"\\\\t\"\n  | '\\r' -> \"\\\\r\"\n  | '\\b' -> \"\\\\b\"\n  | ' ' .. '~' as c ->\n      let s = bytes_create 1 in\n      bytes_unsafe_set s 0 c;\n      unsafe_to_string s\n  | c ->\n      let n = code c in\n      let s = bytes_create 4 in\n      bytes_unsafe_set s 0 '\\\\';\n      bytes_unsafe_set s 1 (unsafe_chr (48 + n / 100));\n      bytes_unsafe_set s 2 (unsafe_chr (48 + (n / 10) mod 10));\n      bytes_unsafe_set s 3 (unsafe_chr (48 + n mod 10));\n      unsafe_to_string s\n\nlet lowercase c =\n  if (c >= 'A' && c <= 'Z')\n  || (c >= '\\192' && c <= '\\214')\n  || (c >= '\\216' && c <= '\\222')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase c =\n  if (c >= 'a' && c <= 'z')\n  || (c >= '\\224' && c <= '\\246')\n  || (c >= '\\248' && c <= '\\254')\n  then unsafe_chr(code c - 32)\n  else c\n\nlet lowercase_ascii c =\n  if (c >= 'A' && c <= 'Z')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase_ascii c =\n  if (c >= 'a' && c <= 'z')\n  then unsafe_chr(code c - 32)\n  else c\n\ntype t = char\n\nlet compare c1 c2 = code c1 - code c2\nlet equal (c1: t) (c2: t) = compare c1 c2 = 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in string.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in string.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : bytes -> int = \"%bytes_length\"\nexternal string_length : string -> int = \"%string_length\"\nexternal get : bytes -> int -> char = \"%bytes_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%bytes_safe_set\"\nexternal create : int -> bytes = \"caml_create_bytes\"\nexternal unsafe_get : bytes -> int -> char = \"%bytes_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_bytes\" [@@noalloc]\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\nexternal unsafe_of_string : string -> bytes = \"%bytes_of_string\"\n\nexternal unsafe_blit : bytes -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_bytes\" [@@noalloc]\nexternal unsafe_blit_string : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nlet make n c =\n  let s = create n in\n  unsafe_fill s 0 n c;\n  s\n\nlet init n f =\n  let s = create n in\n  for i = 0 to n - 1 do\n    unsafe_set s i (f i)\n  done;\n  s\n\nlet empty = create 0\n\nlet copy s =\n  let len = length s in\n  let r = create len in\n  unsafe_blit s 0 r 0 len;\n  r\n\nlet to_string b = unsafe_to_string (copy b)\nlet of_string s = copy (unsafe_of_string s)\n\nlet sub s ofs len =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.sub / Bytes.sub\"\n  else begin\n    let r = create len in\n    unsafe_blit s ofs r 0 len;\n    r\n  end\n\nlet sub_string b ofs len = unsafe_to_string (sub b ofs len)\n\n(* addition with an overflow check *)\nlet (++) a b =\n  let c = a + b in\n  match a < 0, b < 0, c < 0 with\n  | true , true , false\n  | false, false, true  -> invalid_arg \"Bytes.extend\" (* overflow *)\n  | _ -> c\n\nlet extend s left right =\n  let len = length s ++ left ++ right in\n  let r = create len in\n  let (srcoff, dstoff) = if left < 0 then -left, 0 else 0, left in\n  let cpylen = min (length s - srcoff) (len - dstoff) in\n  if cpylen > 0 then unsafe_blit s srcoff r dstoff cpylen;\n  r\n\nlet fill s ofs len c =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.fill / Bytes.fill\"\n  else unsafe_fill s ofs len c\n\nlet blit s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"Bytes.blit\"\n  else unsafe_blit s1 ofs1 s2 ofs2 len\n\nlet blit_string s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > string_length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"String.blit / Bytes.blit_string\"\n  else unsafe_blit_string s1 ofs1 s2 ofs2 len\n\n(* duplicated in string.ml *)\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\n(* duplicated in string.ml *)\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"Bytes.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> empty\n  | l -> let seplen = length sep in\n          unsafe_blits\n            (create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat s1 s2 =\n  let l1 = length s1 in\n  let l2 = length s2 in\n  let r = create (l1 + l2) in\n  unsafe_blit s1 0 r 0 l1;\n  unsafe_blit s2 0 r l1 l2;\n  r\n\n\nexternal char_code: char -> int = \"%identity\"\nexternal char_chr: int -> char = \"%identity\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  let len = length s in\n  let i = ref 0 in\n  while !i < len && is_space (unsafe_get s !i) do\n    incr i\n  done;\n  let j = ref (len - 1) in\n  while !j >= !i && is_space (unsafe_get s !j) do\n    decr j\n  done;\n  if !j >= !i then\n    sub s !i (!j - !i + 1)\n  else\n    empty\n\nlet escaped s =\n  let n = ref 0 in\n  for i = 0 to length s - 1 do\n    n := !n +\n      (match unsafe_get s i with\n       | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> 2\n       | ' ' .. '~' -> 1\n       | _ -> 4)\n  done;\n  if !n = length s then copy s else begin\n    let s' = create !n in\n    n := 0;\n    for i = 0 to length s - 1 do\n      begin match unsafe_get s i with\n      | ('\\\"' | '\\\\') as c ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n c\n      | '\\n' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'n'\n      | '\\t' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 't'\n      | '\\r' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'r'\n      | '\\b' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'b'\n      | (' ' .. '~') as c -> unsafe_set s' !n c\n      | c ->\n          let a = char_code c in\n          unsafe_set s' !n '\\\\';\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a / 100));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + (a / 10) mod 10));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a mod 10));\n      end;\n      incr n\n    done;\n    s'\n  end\n\nlet map f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f (unsafe_get s i)) done;\n    r\n  end\n\nlet mapi f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f i (unsafe_get s i)) done;\n    r\n  end\n\nlet uppercase_ascii s = map Char.uppercase_ascii s\nlet lowercase_ascii s = map Char.lowercase_ascii s\n\nlet apply1 f s =\n  if length s = 0 then s else begin\n    let r = copy s in\n    unsafe_set r 0 (f(unsafe_get s 0));\n    r\n  end\n\nlet capitalize_ascii s = apply1 Char.uppercase_ascii s\nlet uncapitalize_ascii s = apply1 Char.lowercase_ascii s\n\n(* duplicated in string.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n  index_rec s l i c\n\n(* duplicated in string.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from_opt / Bytes.index_from_opt\" else\n  index_rec_opt s l i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n\n(* duplicated in string.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n\n(* duplicated in string.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in string.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\n\ntype t = bytes\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\nexternal equal : t -> t -> bool = \"caml_bytes_equal\"\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s = map Char.uppercase s\nlet lowercase s = map Char.lowercase s\n\nlet capitalize s = apply1 Char.uppercase s\nlet uncapitalize s = apply1 Char.lowercase s\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Damien Doligez, projet Gallium, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* String operations, based on byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in bytes.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in bytes.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : string -> int = \"%string_length\"\nexternal get : string -> int -> char = \"%string_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%string_safe_set\"\nexternal create : int -> bytes = \"caml_create_string\"\nexternal unsafe_get : string -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%string_unsafe_set\"\nexternal unsafe_blit : string -> int ->  bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_string\" [@@noalloc]\n\nmodule B = Bytes\n\nlet bts = B.unsafe_to_string\nlet bos = B.unsafe_of_string\n\nlet make n c =\n  B.make n c |> bts\nlet init n f =\n  B.init n f |> bts\nlet copy s =\n  B.copy (bos s) |> bts\nlet sub s ofs len =\n  B.sub (bos s) ofs len |> bts\nlet fill =\n  B.fill\nlet blit =\n  B.blit_string\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"String.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> \"\"\n  | l -> let seplen = length sep in bts @@\n          unsafe_blits\n            (B.create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\n(* duplicated in bytes.ml *)\nlet iter f s =\n  for i = 0 to length s - 1 do f (unsafe_get s i) done\n\n(* duplicated in bytes.ml *)\nlet iteri f s =\n  for i = 0 to length s - 1 do f i (unsafe_get s i) done\n\nlet map f s =\n  B.map f (bos s) |> bts\nlet mapi f s =\n  B.mapi f (bos s) |> bts\n\n(* Beware: we cannot use B.trim or B.escape because they always make a\n   copy, but String.mli spells out some cases where we are not allowed\n   to make a copy. *)\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  if s = \"\" then s\n  else if is_space (unsafe_get s 0) || is_space (unsafe_get s (length s - 1))\n    then bts (B.trim (bos s))\n  else s\n\nlet escaped s =\n  let rec needs_escape i =\n    if i >= length s then false else\n      match unsafe_get s i with\n      | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> true\n      | ' ' .. '~' -> needs_escape (i+1)\n      | _ -> true\n  in\n  if needs_escape 0 then\n    bts (B.escaped (bos s))\n  else\n    s\n\n(* duplicated in bytes.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n    index_rec s l i c\n\n(* duplicated in bytes.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from_opt / Bytes.index_from_opt\" else\n  index_rec_opt s l i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n(* duplicated in bytes.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n(* duplicated in bytes.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in bytes.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\nlet uppercase_ascii s =\n  B.uppercase_ascii (bos s) |> bts\nlet lowercase_ascii s =\n  B.lowercase_ascii (bos s) |> bts\nlet capitalize_ascii s =\n  B.capitalize_ascii (bos s) |> bts\nlet uncapitalize_ascii s =\n  B.uncapitalize_ascii (bos s) |> bts\n\ntype t = string\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\nexternal equal : string -> string -> bool = \"caml_string_equal\"\n\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s =\n  B.uppercase (bos s) |> bts\nlet lowercase s =\n  B.lowercase (bos s) |> bts\nlet capitalize s =\n  B.capitalize (bos s) |> bts\nlet uncapitalize s =\n  B.uncapitalize (bos s) |> bts\n","#2 \"stdlib/sys.mlp\"\n(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* WARNING: sys.ml is generated from sys.mlp.  DO NOT EDIT sys.ml or\n   your changes will be lost.\n*)\n\ntype backend_type =\n  | Native\n  | Bytecode\n  | Other of string\n(* System interface *)\n\nexternal get_config: unit -> string * int * bool = \"caml_sys_get_config\"\nexternal get_argv: unit -> string * string array = \"caml_sys_get_argv\"\nexternal big_endian : unit -> bool = \"%big_endian\"\nexternal word_size : unit -> int = \"%word_size\"\nexternal int_size : unit -> int = \"%int_size\"\nexternal max_wosize : unit -> int = \"%max_wosize\"\nexternal unix : unit -> bool = \"%ostype_unix\"\nexternal win32 : unit -> bool = \"%ostype_win32\"\nexternal cygwin : unit -> bool = \"%ostype_cygwin\"\nexternal get_backend_type : unit -> backend_type = \"%backend_type\"\n\nlet (executable_name, argv) = get_argv()\nlet (os_type, _, _) = get_config()\nlet backend_type = get_backend_type ()\nlet big_endian = big_endian ()\nlet word_size = word_size ()\nlet int_size = int_size ()\nlet unix = unix ()\nlet win32 = win32 ()\nlet cygwin = cygwin ()\nlet max_array_length = max_wosize ()\nlet max_string_length = word_size / 8 * max_array_length - 1\nexternal runtime_variant : unit -> string = \"caml_runtime_variant\"\nexternal runtime_parameters : unit -> string = \"caml_runtime_parameters\"\n\nexternal file_exists: string -> bool = \"caml_sys_file_exists\"\nexternal is_directory : string -> bool = \"caml_sys_is_directory\"\nexternal remove: string -> unit = \"caml_sys_remove\"\nexternal rename : string -> string -> unit = \"caml_sys_rename\"\nexternal getenv: string -> string = \"caml_sys_getenv\"\n\nlet getenv_opt s =\n  (* TODO: expose a non-raising primitive directly. *)\n  try Some (getenv s)\n  with Not_found -> None\n\nexternal command: string -> int = \"caml_sys_system_command\"\nexternal time: unit -> (float [@unboxed]) =\n  \"caml_sys_time\" \"caml_sys_time_unboxed\" [@@noalloc]\nexternal chdir: string -> unit = \"caml_sys_chdir\"\nexternal getcwd: unit -> string = \"caml_sys_getcwd\"\nexternal readdir : string -> string array = \"caml_sys_read_directory\"\n\nlet interactive = ref false\n\ntype signal_behavior =\n    Signal_default\n  | Signal_ignore\n  | Signal_handle of (int -> unit)\n\nexternal signal : int -> signal_behavior -> signal_behavior\n                = \"caml_install_signal_handler\"\n\nlet set_signal sig_num sig_beh = ignore(signal sig_num sig_beh)\n\nlet sigabrt = -1\nlet sigalrm = -2\nlet sigfpe = -3\nlet sighup = -4\nlet sigill = -5\nlet sigint = -6\nlet sigkill = -7\nlet sigpipe = -8\nlet sigquit = -9\nlet sigsegv = -10\nlet sigterm = -11\nlet sigusr1 = -12\nlet sigusr2 = -13\nlet sigchld = -14\nlet sigcont = -15\nlet sigstop = -16\nlet sigtstp = -17\nlet sigttin = -18\nlet sigttou = -19\nlet sigvtalrm = -20\nlet sigprof = -21\nlet sigbus = -22\nlet sigpoll = -23\nlet sigsys = -24\nlet sigtrap = -25\nlet sigurg = -26\nlet sigxcpu = -27\nlet sigxfsz = -28\n\nexception Break\n\nlet catch_break on =\n  if on then\n    set_signal sigint (Signal_handle(fun _ -> raise Break))\n  else\n    set_signal sigint Signal_default\n\n\nexternal enable_runtime_warnings: bool -> unit =\n  \"caml_ml_enable_runtime_warnings\"\nexternal runtime_warnings_enabled: unit -> bool =\n  \"caml_ml_runtime_warnings_enabled\"\n\n(* The version string is found in file ../VERSION *)\n\nlet ocaml_version = \"4.06.0\"\n\n(* Optimization *)\n\nexternal opaque_identity : 'a -> 'a = \"%opaque\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule type OrderedType =\n  sig\n    type t\n    val compare: t -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type +'a t\n    val empty: 'a t\n    val is_empty: 'a t -> bool\n    val mem:  key -> 'a t -> bool\n    val add: key -> 'a -> 'a t -> 'a t\n    val update: key -> ('a option -> 'a option) -> 'a t -> 'a t\n    val singleton: key -> 'a -> 'a t\n    val remove: key -> 'a t -> 'a t\n    val merge:\n          (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t\n    val union: (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t\n    val compare: ('a -> 'a -> int) -> 'a t -> 'a t -> int\n    val equal: ('a -> 'a -> bool) -> 'a t -> 'a t -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val for_all: (key -> 'a -> bool) -> 'a t -> bool\n    val exists: (key -> 'a -> bool) -> 'a t -> bool\n    val filter: (key -> 'a -> bool) -> 'a t -> 'a t\n    val partition: (key -> 'a -> bool) -> 'a t -> 'a t * 'a t\n    val cardinal: 'a t -> int\n    val bindings: 'a t -> (key * 'a) list\n    val min_binding: 'a t -> (key * 'a)\n    val min_binding_opt: 'a t -> (key * 'a) option\n    val max_binding: 'a t -> (key * 'a)\n    val max_binding_opt: 'a t -> (key * 'a) option\n    val choose: 'a t -> (key * 'a)\n    val choose_opt: 'a t -> (key * 'a) option\n    val split: key -> 'a t -> 'a t * 'a option * 'a t\n    val find: key -> 'a t -> 'a\n    val find_opt: key -> 'a t -> 'a option\n    val find_first: (key -> bool) -> 'a t -> key * 'a\n    val find_first_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val find_last: (key -> bool) -> 'a t -> key * 'a\n    val find_last_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val map: ('a -> 'b) -> 'a t -> 'b t\n    val mapi: (key -> 'a -> 'b) -> 'a t -> 'b t\n  end\n\nmodule Make(Ord: OrderedType) = struct\n\n    type key = Ord.t\n\n    type 'a t =\n        Empty\n      | Node of {l:'a t; v:key; d:'a; r:'a t; h:int}\n\n    let height = function\n        Empty -> 0\n      | Node {h} -> h\n\n    let create l x d r =\n      let hl = height l and hr = height r in\n      Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let singleton x d = Node{l=Empty; v=x; d; r=Empty; h=1}\n\n    let bal l x d r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      if hl > hr + 2 then begin\n        match l with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=ll; v=lv; d=ld; r=lr} ->\n            if height ll >= height lr then\n              create ll lv ld (create lr x d r)\n            else begin\n              match lr with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=lrl; v=lrv; d=lrd; r=lrr}->\n                  create (create ll lv ld lrl) lrv lrd (create lrr x d r)\n            end\n      end else if hr > hl + 2 then begin\n        match r with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=rl; v=rv; d=rd; r=rr} ->\n            if height rr >= height rl then\n              create (create l x d rl) rv rd rr\n            else begin\n              match rl with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=rll; v=rlv; d=rld; r=rlr} ->\n                  create (create l x d rll) rlv rld (create rlr rv rd rr)\n            end\n      end else\n        Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let empty = Empty\n\n    let is_empty = function Empty -> true | _ -> false\n\n    let rec add x data = function\n        Empty ->\n          Node{l=Empty; v=x; d=data; r=Empty; h=1}\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then\n            if d == data then m else Node{l; v=x; d=data; r; h}\n          else if c < 0 then\n            let ll = add x data l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = add x data r in\n            if r == rr then m else bal l v d rr\n\n    let rec find x = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then d\n          else find x (if c < 0 then l else r)\n\n    let rec find_first_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first_aux v0 d0 f r\n\n    let rec find_first f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first f r\n\n    let rec find_first_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt_aux v0 d0 f r\n\n    let rec find_first_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt f r\n\n    let rec find_last_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last_aux v0 d0 f l\n\n    let rec find_last f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last f l\n\n    let rec find_last_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt_aux v0 d0 f l\n\n    let rec find_last_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt f l\n\n    let rec find_opt x = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then Some d\n          else find_opt x (if c < 0 then l else r)\n\n    let rec mem x = function\n        Empty ->\n          false\n      | Node {l; v; r} ->\n          let c = Ord.compare x v in\n          c = 0 || mem x (if c < 0 then l else r)\n\n    let rec min_binding = function\n        Empty -> raise Not_found\n      | Node {l=Empty; v; d} -> (v, d)\n      | Node {l} -> min_binding l\n\n    let rec min_binding_opt = function\n        Empty -> None\n      | Node {l=Empty; v; d} -> Some (v, d)\n      | Node {l}-> min_binding_opt l\n\n    let rec max_binding = function\n        Empty -> raise Not_found\n      | Node {v; d; r=Empty} -> (v, d)\n      | Node {r} -> max_binding r\n\n    let rec max_binding_opt = function\n        Empty -> None\n      | Node {v; d; r=Empty} -> Some (v, d)\n      | Node {r} -> max_binding_opt r\n\n    let rec remove_min_binding = function\n        Empty -> invalid_arg \"Map.remove_min_elt\"\n      | Node {l=Empty; r} -> r\n      | Node {l; v; d; r} -> bal (remove_min_binding l) v d r\n\n    let merge t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          bal t1 x d (remove_min_binding t2)\n\n    let rec remove x = function\n        Empty ->\n          Empty\n      | (Node {l; v; d; r} as m) ->\n          let c = Ord.compare x v in\n          if c = 0 then merge l r\n          else if c < 0 then\n            let ll = remove x l in if l == ll then m else bal ll v d r\n          else\n            let rr = remove x r in if r == rr then m else bal l v d rr\n\n    let rec update x f = function\n        Empty ->\n          begin match f None with\n          | None -> Empty\n          | Some data -> Node{l=Empty; v=x; d=data; r=Empty; h=1}\n          end\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then begin\n            match f (Some d) with\n            | None -> merge l r\n            | Some data ->\n                if d == data then m else Node{l; v=x; d=data; r; h}\n          end else if c < 0 then\n            let ll = update x f l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = update x f r in\n            if r == rr then m else bal l v d rr\n\n    let rec iter f = function\n        Empty -> ()\n      | Node {l; v; d; r} ->\n          iter f l; f v d; iter f r\n\n    let rec map f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = map f l in\n          let d' = f d in\n          let r' = map f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec mapi f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = mapi f l in\n          let d' = f v d in\n          let r' = mapi f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec fold f m accu =\n      match m with\n        Empty -> accu\n      | Node {l; v; d; r} ->\n          fold f r (f v d (fold f l accu))\n\n    let rec for_all p = function\n        Empty -> true\n      | Node {l; v; d; r} -> p v d && for_all p l && for_all p r\n\n    let rec exists p = function\n        Empty -> false\n      | Node {l; v; d; r} -> p v d || exists p l || exists p r\n\n    (* Beware: those two functions assume that the added k is *strictly*\n       smaller (or bigger) than all the present keys in the tree; it\n       does not test for equality with the current min (or max) key.\n\n       Indeed, they are only used during the \"join\" operation which\n       respects this precondition.\n    *)\n\n    let rec add_min_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal (add_min_binding k x l) v d r\n\n    let rec add_max_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal l v d (add_max_binding k x r)\n\n    (* Same as create and bal, but no assumptions are made on the\n       relative heights of l and r. *)\n\n    let rec join l v d r =\n      match (l, r) with\n        (Empty, _) -> add_min_binding v d r\n      | (_, Empty) -> add_max_binding v d l\n      | (Node{l=ll; v=lv; d=ld; r=lr; h=lh}, Node{l=rl; v=rv; d=rd; r=rr; h=rh}) ->\n          if lh > rh + 2 then bal ll lv ld (join lr v d r) else\n          if rh > lh + 2 then bal (join l v d rl) rv rd rr else\n          create l v d r\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       No assumption on the heights of l and r. *)\n\n    let concat t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          join t1 x d (remove_min_binding t2)\n\n    let concat_or_join t1 v d t2 =\n      match d with\n      | Some d -> join t1 v d t2\n      | None -> concat t1 t2\n\n    let rec split x = function\n        Empty ->\n          (Empty, None, Empty)\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then (l, Some d, r)\n          else if c < 0 then\n            let (ll, pres, rl) = split x l in (ll, pres, join rl v d r)\n          else\n            let (lr, pres, rr) = split x r in (join l v d lr, pres, rr)\n\n    let rec merge f s1 s2 =\n      match (s1, s2) with\n        (Empty, Empty) -> Empty\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1}, _) when h1 >= height s2 ->\n          let (l2, d2, r2) = split v1 s2 in\n          concat_or_join (merge f l1 l2) v1 (f v1 (Some d1) d2) (merge f r1 r2)\n      | (_, Node {l=l2; v=v2; d=d2; r=r2}) ->\n          let (l1, d1, r1) = split v2 s1 in\n          concat_or_join (merge f l1 l2) v2 (f v2 d1 (Some d2)) (merge f r1 r2)\n      | _ ->\n          assert false\n\n    let rec union f s1 s2 =\n      match (s1, s2) with\n      | (Empty, s) | (s, Empty) -> s\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1}, Node {l=l2; v=v2; d=d2; r=r2; h=h2}) ->\n          if h1 >= h2 then\n            let (l2, d2, r2) = split v1 s2 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d2 with\n            | None -> join l v1 d1 r\n            | Some d2 -> concat_or_join l v1 (f v1 d1 d2) r\n          else\n            let (l1, d1, r1) = split v2 s1 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d1 with\n            | None -> join l v2 d2 r\n            | Some d1 -> concat_or_join l v2 (f v2 d1 d2) r\n\n    let rec filter p = function\n        Empty -> Empty\n      | Node {l; v; d; r} as m ->\n          (* call [p] in the expected left-to-right order *)\n          let l' = filter p l in\n          let pvd = p v d in\n          let r' = filter p r in\n          if pvd then if l==l' && r==r' then m else join l' v d r'\n          else concat l' r'\n\n    let rec partition p = function\n        Empty -> (Empty, Empty)\n      | Node {l; v; d; r} ->\n          (* call [p] in the expected left-to-right order *)\n          let (lt, lf) = partition p l in\n          let pvd = p v d in\n          let (rt, rf) = partition p r in\n          if pvd\n          then (join lt v d rt, concat lf rf)\n          else (concat lt rt, join lf v d rf)\n\n    type 'a enumeration = End | More of key * 'a * 'a t * 'a enumeration\n\n    let rec cons_enum m e =\n      match m with\n        Empty -> e\n      | Node {l; v; d; r} -> cons_enum l (More(v, d, r, e))\n\n    let compare cmp m1 m2 =\n      let rec compare_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> 0\n        | (End, _)  -> -1\n        | (_, End) -> 1\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            let c = Ord.compare v1 v2 in\n            if c <> 0 then c else\n            let c = cmp d1 d2 in\n            if c <> 0 then c else\n            compare_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in compare_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let equal cmp m1 m2 =\n      let rec equal_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> true\n        | (End, _)  -> false\n        | (_, End) -> false\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            Ord.compare v1 v2 = 0 && cmp d1 d2 &&\n            equal_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in equal_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let rec cardinal = function\n        Empty -> 0\n      | Node {l; r} -> cardinal l + 1 + cardinal r\n\n    let rec bindings_aux accu = function\n        Empty -> accu\n      | Node {l; v; d; r} -> bindings_aux ((v, d) :: bindings_aux accu r) l\n\n    let bindings s =\n      bindings_aux [] s\n\n    let choose = min_binding\n\n    let choose_opt = min_binding_opt\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Damien Doligez, projet Para, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 1997 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Internals of forcing lazy values. *)\n\nexception Undefined\n\nlet raise_undefined = Obj.repr (fun () -> raise Undefined)\n\n(* Assume [blk] is a block with tag lazy *)\nlet force_lazy_block (blk : 'arg lazy_t) =\n  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in\n  Obj.set_field (Obj.repr blk) 0 raise_undefined;\n  try\n    let result = closure () in\n    (* do set_field BEFORE set_tag *)\n    Obj.set_field (Obj.repr blk) 0 (Obj.repr result);\n    Obj.set_tag (Obj.repr blk) Obj.forward_tag;\n    result\n  with e ->\n    Obj.set_field (Obj.repr blk) 0 (Obj.repr (fun () -> raise e));\n    raise e\n\n\n(* Assume [blk] is a block with tag lazy *)\nlet force_val_lazy_block (blk : 'arg lazy_t) =\n  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in\n  Obj.set_field (Obj.repr blk) 0 raise_undefined;\n  let result = closure () in\n  (* do set_field BEFORE set_tag *)\n  Obj.set_field (Obj.repr blk) 0 (Obj.repr result);\n  Obj.set_tag (Obj.repr blk) (Obj.forward_tag);\n  result\n\n\n(* [force] is not used, since [Lazy.force] is declared as a primitive\n   whose code inlines the tag tests of its argument.  This function is\n   here for the sake of completeness, and for debugging purpose. *)\n\nlet force (lzv : 'arg lazy_t) =\n  let x = Obj.repr lzv in\n  let t = Obj.tag x in\n  if t = Obj.forward_tag then (Obj.obj (Obj.field x 0) : 'arg) else\n  if t <> Obj.lazy_tag then (Obj.obj x : 'arg)\n  else force_lazy_block lzv\n\n\nlet force_val (lzv : 'arg lazy_t) =\n  let x = Obj.repr lzv in\n  let t = Obj.tag x in\n  if t = Obj.forward_tag then (Obj.obj (Obj.field x 0) : 'arg) else\n  if t <> Obj.lazy_tag then (Obj.obj x : 'arg)\n  else force_val_lazy_block lzv\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*    Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt    *)\n(*                                                                        *)\n(*   Copyright 1999 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Extensible buffers *)\n\ntype t =\n {mutable buffer : bytes;\n  mutable position : int;\n  mutable length : int;\n  initial_buffer : bytes}\n\nlet create n =\n let n = if n < 1 then 1 else n in\n let n = if n > Sys.max_string_length then Sys.max_string_length else n in\n let s = Bytes.create n in\n {buffer = s; position = 0; length = n; initial_buffer = s}\n\nlet contents b = Bytes.sub_string b.buffer 0 b.position\nlet to_bytes b = Bytes.sub b.buffer 0 b.position\n\nlet sub b ofs len =\n  if ofs < 0 || len < 0 || ofs > b.position - len\n  then invalid_arg \"Buffer.sub\"\n  else Bytes.sub_string b.buffer ofs len\n\n\nlet blit src srcoff dst dstoff len =\n  if len < 0 || srcoff < 0 || srcoff > src.position - len\n             || dstoff < 0 || dstoff > (Bytes.length dst) - len\n  then invalid_arg \"Buffer.blit\"\n  else\n    Bytes.unsafe_blit src.buffer srcoff dst dstoff len\n\n\nlet nth b ofs =\n  if ofs < 0 || ofs >= b.position then\n   invalid_arg \"Buffer.nth\"\n  else Bytes.unsafe_get b.buffer ofs\n\n\nlet length b = b.position\n\nlet clear b = b.position <- 0\n\nlet reset b =\n  b.position <- 0; b.buffer <- b.initial_buffer;\n  b.length <- Bytes.length b.buffer\n\nlet resize b more =\n  let len = b.length in\n  let new_len = ref len in\n  while b.position + more > !new_len do new_len := 2 * !new_len done;\n  if !new_len > Sys.max_string_length then begin\n    if b.position + more <= Sys.max_string_length\n    then new_len := Sys.max_string_length\n    else failwith \"Buffer.add: cannot grow buffer\"\n  end;\n  let new_buffer = Bytes.create !new_len in\n  (* PR#6148: let's keep using [blit] rather than [unsafe_blit] in\n     this tricky function that is slow anyway. *)\n  Bytes.blit b.buffer 0 new_buffer 0 b.position;\n  b.buffer <- new_buffer;\n  b.length <- !new_len\n\nlet add_char b c =\n  let pos = b.position in\n  if pos >= b.length then resize b 1;\n  Bytes.unsafe_set b.buffer pos c;\n  b.position <- pos + 1\n\n let add_utf_8_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0x007F ->\n     add_char b (Char.unsafe_chr u)\n | u when u <= 0x07FF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xC0 lor (u lsr 6)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 2\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 3 > b.length then resize b 3;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xE0 lor (u lsr 12)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor ((u lsr 6) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 2)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 3\n | u when u <= 0x10FFFF ->\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xF0 lor (u lsr 18)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor ((u lsr 12) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 2)\n       (Char.unsafe_chr (0x80 lor ((u lsr 6) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 3)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 4\n | _ -> assert false\n\n let add_utf_16be_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (u lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (u land 0xFF));\n     b.position <- pos + 2\n | u when u <= 0x10FFFF ->\n     let u' = u - 0x10000 in\n     let hi = 0xD800 lor (u' lsr 10) in\n     let lo = 0xDC00 lor (u' land 0x3FF) in\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (hi lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (hi land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 2) (Char.unsafe_chr (lo lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 3) (Char.unsafe_chr (lo land 0xFF));\n     b.position <- pos + 4\n | _ -> assert false\n\n let add_utf_16le_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (u land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (u lsr 8));\n     b.position <- pos + 2\n | u when u <= 0x10FFFF ->\n     let u' = u - 0x10000 in\n     let hi = 0xD800 lor (u' lsr 10) in\n     let lo = 0xDC00 lor (u' land 0x3FF) in\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (hi land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (hi lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 2) (Char.unsafe_chr (lo land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 3) (Char.unsafe_chr (lo lsr 8));\n     b.position <- pos + 4\n | _ -> assert false\n\nlet add_substring b s offset len =\n  if offset < 0 || len < 0 || offset > String.length s - len\n  then invalid_arg \"Buffer.add_substring/add_subbytes\";\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s offset b.buffer b.position len;\n  b.position <- new_position\n\nlet add_subbytes b s offset len =\n  add_substring b (Bytes.unsafe_to_string s) offset len\n\nlet add_string b s =\n  let len = String.length s in\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s 0 b.buffer b.position len;\n  b.position <- new_position\n\nlet add_bytes b s = add_string b (Bytes.unsafe_to_string s)\n\nlet add_buffer b bs =\n  add_subbytes b bs.buffer 0 bs.position\n\n(* read up to [len] bytes from [ic] into [b]. *)\nlet rec add_channel_rec b ic len =\n  if len > 0 then (\n    let n = input ic b.buffer b.position len in\n    b.position <- b.position + n;\n    if n = 0 then raise End_of_file\n    else add_channel_rec b ic (len-n)   (* n <= len *)\n  )\n\nlet add_channel b ic len =\n  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)\n    invalid_arg \"Buffer.add_channel\";\n  if b.position + len > b.length then resize b len;\n  add_channel_rec b ic len\n\nlet output_buffer oc b =\n  output oc b.buffer 0 b.position\n\nlet closing = function\n  | '(' -> ')'\n  | '{' -> '}'\n  | _ -> assert false\n\n(* opening and closing: open and close characters, typically ( and )\n   k: balance of opening and closing chars\n   s: the string where we are searching\n   start: the index where we start the search. *)\nlet advance_to_closing opening closing k s start =\n  let rec advance k i lim =\n    if i >= lim then raise Not_found else\n    if s.[i] = opening then advance (k + 1) (i + 1) lim else\n    if s.[i] = closing then\n      if k = 0 then i else advance (k - 1) (i + 1) lim\n    else advance k (i + 1) lim in\n  advance k start (String.length s)\n\nlet advance_to_non_alpha s start =\n  let rec advance i lim =\n    if i >= lim then lim else\n    match s.[i] with\n    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> advance (i + 1) lim\n    | _ -> i in\n  advance start (String.length s)\n\n(* We are just at the beginning of an ident in s, starting at start. *)\nlet find_ident s start lim =\n  if start >= lim then raise Not_found else\n  match s.[start] with\n  (* Parenthesized ident ? *)\n  | '(' | '{' as c ->\n     let new_start = start + 1 in\n     let stop = advance_to_closing c (closing c) 0 s new_start in\n     String.sub s new_start (stop - start - 1), stop + 1\n  (* Regular ident *)\n  | _ ->\n     let stop = advance_to_non_alpha s (start + 1) in\n     String.sub s start (stop - start), stop\n\n(* Substitute $ident, $(ident), or ${ident} in s,\n    according to the function mapping f. *)\nlet add_substitute b f s =\n  let lim = String.length s in\n  let rec subst previous i =\n    if i < lim then begin\n      match s.[i] with\n      | '$' as current when previous = '\\\\' ->\n         add_char b current;\n         subst ' ' (i + 1)\n      | '$' ->\n         let j = i + 1 in\n         let ident, next_i = find_ident s j lim in\n         add_string b (f ident);\n         subst ' ' next_i\n      | current when previous == '\\\\' ->\n         add_char b '\\\\';\n         add_char b current;\n         subst ' ' (i + 1)\n      | '\\\\' as current ->\n         subst current (i + 1)\n      | current ->\n         add_char b current;\n         subst current (i + 1)\n    end else\n    if previous = '\\\\' then add_char b previous in\n  subst ' ' 0\n\nlet truncate b len =\n    if len < 0 || len > length b then\n      invalid_arg \"Buffer.truncate\"\n    else\n      b.position <- len\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\n\n(******************************************************************************)\n           (* Tools to manipulate scanning set of chars (see %[...]) *)\n\ntype mutable_char_set = bytes\n\n(* Create a fresh, empty, mutable char set. *)\nlet create_char_set () = Bytes.make 32 '\\000'\n\n(* Add a char in a mutable char set. *)\nlet add_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  Bytes.set char_set str_ind\n    (char_of_int (int_of_char (Bytes.get char_set str_ind) lor mask))\n\nlet freeze_char_set char_set =\n  Bytes.to_string char_set\n\n(* Compute the complement of a char set. *)\nlet rev_char_set char_set =\n  let char_set' = create_char_set () in\n  for i = 0 to 31 do\n    Bytes.set char_set' i\n      (char_of_int (int_of_char (String.get char_set i) lxor 0xFF));\n  done;\n  Bytes.unsafe_to_string char_set'\n\n(* Return true if a `c' is in `char_set'. *)\nlet is_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  (int_of_char (String.get char_set str_ind) land mask) <> 0\n\n\n(******************************************************************************)\n                         (* Ignored param conversion *)\n\n(* GADT used to abstract an existential type parameter. *)\n(* See param_format_of_ignored_format. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb = Param_format_EBB :\n    ('x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb\n\n(* Compute a padding associated to a pad_option (see \"%_42d\"). *)\nlet pad_of_pad_opt pad_opt = match pad_opt with\n  | None -> No_padding\n  | Some width -> Lit_padding (Right, width)\n\n(* Compute a precision associated to a prec_option (see \"%_.42f\"). *)\nlet prec_of_prec_opt prec_opt = match prec_opt with\n  | None -> No_precision\n  | Some ndec -> Lit_precision ndec\n\n(* Turn an ignored param into its equivalent not-ignored format node. *)\n(* Used for format pretty-printing and Scanf. *)\nlet param_format_of_ignored_format : type a b c d e f x y .\n    (a, b, c, d, y, x) ignored -> (x, b, c, y, e, f) fmt ->\n      (a, b, c, d, e, f) param_format_ebb =\nfun ign fmt -> match ign with\n  | Ignored_char ->\n    Param_format_EBB (Char fmt)\n  | Ignored_caml_char ->\n    Param_format_EBB (Caml_char fmt)\n  | Ignored_string pad_opt ->\n    Param_format_EBB (String (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_caml_string pad_opt ->\n    Param_format_EBB (Caml_string (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_int (iconv, pad_opt) ->\n    Param_format_EBB (Int (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int32 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int32 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_nativeint (iconv, pad_opt) ->\n    Param_format_EBB\n      (Nativeint (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int64 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int64 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_float (pad_opt, prec_opt) ->\n    Param_format_EBB\n      (Float (Float_f, pad_of_pad_opt pad_opt, prec_of_prec_opt prec_opt, fmt))\n  | Ignored_bool pad_opt ->\n    Param_format_EBB (Bool (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_format_arg (pad_opt, fmtty) ->\n    Param_format_EBB (Format_arg (pad_opt, fmtty, fmt))\n  | Ignored_format_subst (pad_opt, fmtty) ->\n    Param_format_EBB\n      (Format_subst (pad_opt, fmtty, fmt))\n  | Ignored_reader ->\n    Param_format_EBB (Reader fmt)\n  | Ignored_scan_char_set (width_opt, char_set) ->\n    Param_format_EBB (Scan_char_set (width_opt, char_set, fmt))\n  | Ignored_scan_get_counter counter ->\n    Param_format_EBB (Scan_get_counter (counter, fmt))\n  | Ignored_scan_next_char ->\n    Param_format_EBB (Scan_next_char fmt)\n\n\n(******************************************************************************)\n                                 (* Types *)\n\ntype ('b, 'c) acc_formatting_gen =\n  | Acc_open_tag of ('b, 'c) acc\n  | Acc_open_box of ('b, 'c) acc\n\n(* Reversed list of printing atoms. *)\n(* Used to accumulate printf arguments. *)\nand ('b, 'c) acc =\n  | Acc_formatting_lit of ('b, 'c) acc * formatting_lit\n      (* Special fmtting (box) *)\n  | Acc_formatting_gen of ('b, 'c) acc * ('b, 'c) acc_formatting_gen\n      (* Special fmtting (box) *)\n  | Acc_string_literal of ('b, 'c) acc * string     (* Literal string *)\n  | Acc_char_literal   of ('b, 'c) acc * char       (* Literal char *)\n  | Acc_data_string    of ('b, 'c) acc * string     (* Generated string *)\n  | Acc_data_char      of ('b, 'c) acc * char       (* Generated char *)\n  | Acc_delay          of ('b, 'c) acc * ('b -> 'c)\n                                                (* Delayed printing (%a, %t) *)\n  | Acc_flush          of ('b, 'c) acc              (* Flush *)\n  | Acc_invalid_arg    of ('b, 'c) acc * string\n      (* Raise Invalid_argument msg *)\n  | End_of_acc\n\n(* List of heterogeneous values. *)\n(* Used to accumulate scanf callback arguments. *)\ntype ('a, 'b) heter_list =\n  | Cons : 'c * ('a, 'b) heter_list -> ('c -> 'a, 'b) heter_list\n  | Nil : ('b, 'b) heter_list\n\n(* Existential Black Boxes. *)\n(* Used to abstract some existential type parameters. *)\n\n(* GADT type associating a padding and an fmtty. *)\n(* See the type_padding function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb = Padding_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb\n\n(* GADT type associating a padding, a precision and an fmtty. *)\n(* See the type_padprec function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb = Padprec_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'z) precision * ('z, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb\n\n(* GADT type associating a padding and an fmt. *)\n(* See make_padding_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) padding_fmt_ebb = Padding_fmt_EBB :\n     (_, 'x -> 'a) padding *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) padding_fmt_ebb\n\n(* GADT type associating a precision and an fmt. *)\n(* See make_precision_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) precision_fmt_ebb = Precision_fmt_EBB :\n     (_, 'x -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) precision_fmt_ebb\n\n(* GADT type associating a padding, a precision and an fmt. *)\n(* See make_padprec_fmt_ebb and parse_format functions. *)\ntype ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb = Padprec_fmt_EBB :\n     ('x, 'y) padding * ('y, 'p -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb\n\n(* Abstract the 'a and 'd parameters of an fmt. *)\n(* Output type of the format parsing function. *)\ntype ('b, 'c, 'e, 'f) fmt_ebb = Fmt_EBB :\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('b, 'c, 'e, 'f) fmt_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_format_gen function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb = Fmt_fmtty_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmt *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmtty ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_ignored_format_substitution function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb = Fmtty_fmt_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmtty *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmt_fmtty_ebb ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb\n\n(* Abstract all fmtty type parameters. *)\n(* Used to compare format types. *)\ntype fmtty_ebb = Fmtty_EBB : ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> fmtty_ebb\n\n(* Abstract all padding type parameters. *)\n(* Used to compare paddings. *)\ntype padding_ebb = Padding_EBB : ('a, 'b) padding -> padding_ebb\n\n(* Abstract all precision type parameters. *)\n(* Used to compare precisions. *)\ntype precision_ebb = Precision_EBB : ('a, 'b) precision -> precision_ebb\n\n(******************************************************************************)\n                               (* Constants *)\n\n(* Default precision for float printing. *)\nlet default_float_precision = -6\n  (* For %h and %H formats, a negative precision means \"as many digits as\n     necessary\".  For the other FP formats, we take the absolute value\n     of the precision, hence 6 digits by default. *)\n\n(******************************************************************************)\n                               (* Externals *)\n\nexternal format_float: string -> float -> string\n  = \"caml_format_float\"\nexternal format_int: string -> int -> string\n  = \"caml_format_int\"\nexternal format_int32: string -> int32 -> string\n  = \"caml_int32_format\"\nexternal format_nativeint: string -> nativeint -> string\n  = \"caml_nativeint_format\"\nexternal format_int64: string -> int64 -> string\n  = \"caml_int64_format\"\nexternal hexstring_of_float: float -> int -> char -> string\n  = \"caml_hexstring_of_float\"\n\n(******************************************************************************)\n                     (* Tools to pretty-print formats *)\n\n(* Type of extensible character buffers. *)\ntype buffer = {\n  mutable ind : int;\n  mutable bytes : bytes;\n}\n\n(* Create a fresh buffer. *)\nlet buffer_create init_size = { ind = 0; bytes = Bytes.create init_size }\n\n(* Check size of the buffer and grow it if needed. *)\nlet buffer_check_size buf overhead =\n  let len = Bytes.length buf.bytes in\n  let min_len = buf.ind + overhead in\n  if min_len > len then (\n    let new_len = max (len * 2) min_len in\n    let new_str = Bytes.create new_len in\n    Bytes.blit buf.bytes 0 new_str 0 len;\n    buf.bytes <- new_str;\n  )\n\n(* Add the character `c' to the buffer `buf'. *)\nlet buffer_add_char buf c =\n  buffer_check_size buf 1;\n  Bytes.set buf.bytes buf.ind c;\n  buf.ind <- buf.ind + 1\n\n(* Add the string `s' to the buffer `buf'. *)\nlet buffer_add_string buf s =\n  let str_len = String.length s in\n  buffer_check_size buf str_len;\n  String.blit s 0 buf.bytes buf.ind str_len;\n  buf.ind <- buf.ind + str_len\n\n(* Get the content of the buffer. *)\nlet buffer_contents buf =\n  Bytes.sub_string buf.bytes 0 buf.ind\n\n(***)\n\n(* Convert an integer conversion to char. *)\nlet char_of_iconv iconv = match iconv with\n  | Int_d | Int_pd | Int_sd -> 'd' | Int_i | Int_pi | Int_si -> 'i'\n  | Int_x | Int_Cx -> 'x' | Int_X | Int_CX -> 'X' | Int_o | Int_Co -> 'o'\n  | Int_u -> 'u'\n\n(* Convert a float conversion to char. *)\nlet char_of_fconv fconv = match fconv with\n  | Float_f | Float_pf | Float_sf -> 'f' | Float_e | Float_pe | Float_se -> 'e'\n  | Float_E | Float_pE | Float_sE -> 'E' | Float_g | Float_pg | Float_sg -> 'g'\n  | Float_G | Float_pG | Float_sG -> 'G' | Float_F -> 'F'\n  | Float_h | Float_ph | Float_sh -> 'h' | Float_H | Float_pH | Float_sH -> 'H'\n\n\n(* Convert a scanning counter to char. *)\nlet char_of_counter counter = match counter with\n  | Line_counter  -> 'l'\n  | Char_counter  -> 'n'\n  | Token_counter -> 'N'\n\n(***)\n\n(* Print a char_set in a buffer with the OCaml format lexical convention. *)\nlet bprint_char_set buf char_set =\n  let rec print_start set =\n    let is_alone c =\n      let before, after = Char.(chr (code c - 1), chr (code c + 1)) in\n      is_in_char_set set c\n      && not (is_in_char_set set before && is_in_char_set set after) in\n    if is_alone ']' then buffer_add_char buf ']';\n    print_out set 1;\n    if is_alone '-' then buffer_add_char buf '-';\n  and print_out set i =\n    if i < 256 then\n      if is_in_char_set set (char_of_int i) then print_first set i\n      else print_out set (i + 1)\n  and print_first set i =\n    match char_of_int i with\n    | '\\255' -> print_char buf 255;\n    | ']' | '-' -> print_out set (i + 1);\n    | _ -> print_second set (i + 1);\n  and print_second set i =\n    if is_in_char_set set (char_of_int i) then\n      match char_of_int i with\n      | '\\255' ->\n        print_char buf 254;\n        print_char buf 255;\n      | ']' | '-' when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_out set (i + 1);\n      | _ when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_char buf i;\n        print_out set (i + 2);\n      | _ ->\n        print_in set (i - 1) (i + 2);\n    else (\n      print_char buf (i - 1);\n      print_out set (i + 1);\n    )\n  and print_in set i j =\n    if j = 256 || not (is_in_char_set set (char_of_int j)) then (\n      print_char buf i;\n      print_char buf (int_of_char '-');\n      print_char buf (j - 1);\n      if j < 256 then print_out set (j + 1);\n    ) else\n      print_in set i (j + 1);\n  and print_char buf i = match char_of_int i with\n    | '%' -> buffer_add_char buf '%'; buffer_add_char buf '%';\n    | '@' -> buffer_add_char buf '%'; buffer_add_char buf '@';\n    | c   -> buffer_add_char buf c;\n  in\n  buffer_add_char buf '[';\n  print_start (\n    if is_in_char_set char_set '\\000'\n    then ( buffer_add_char buf '^'; rev_char_set char_set )\n    else char_set\n  );\n  buffer_add_char buf ']'\n\n(***)\n\n(* Print a padty in a buffer with the format-like syntax. *)\nlet bprint_padty buf padty = match padty with\n  | Left  -> buffer_add_char buf '-'\n  | Right -> ()\n  | Zeros -> buffer_add_char buf '0'\n\n(* Print the '_' of an ignored flag if needed. *)\nlet bprint_ignored_flag buf ign_flag =\n  if ign_flag then buffer_add_char buf '_'\n\n(***)\n\nlet bprint_pad_opt buf pad_opt = match pad_opt with\n  | None -> ()\n  | Some width -> buffer_add_string buf (string_of_int width)\n\n(***)\n\n(* Print padding in a buffer with the format-like syntax. *)\nlet bprint_padding : type a b . buffer -> (a, b) padding -> unit =\nfun buf pad -> match pad with\n  | No_padding -> ()\n  | Lit_padding (padty, n) ->\n    bprint_padty buf padty;\n    buffer_add_string buf (string_of_int n);\n  | Arg_padding padty ->\n    bprint_padty buf padty;\n    buffer_add_char buf '*'\n\n(* Print precision in a buffer with the format-like syntax. *)\nlet bprint_precision : type a b . buffer -> (a, b) precision -> unit =\n  fun buf prec -> match prec with\n  | No_precision -> ()\n  | Lit_precision n ->\n    buffer_add_char buf '.';\n    buffer_add_string buf (string_of_int n);\n  | Arg_precision ->\n    buffer_add_string buf \".*\"\n\n(***)\n\n(* Print the optional '+', ' ' or '#' associated to an int conversion. *)\nlet bprint_iconv_flag buf iconv = match iconv with\n  | Int_pd | Int_pi -> buffer_add_char buf '+'\n  | Int_sd | Int_si -> buffer_add_char buf ' '\n  | Int_Cx | Int_CX | Int_Co -> buffer_add_char buf '#'\n  | Int_d | Int_i | Int_x | Int_X | Int_o | Int_u -> ()\n\n(* Print an complete int format in a buffer (ex: \"%3.*d\"). *)\nlet bprint_int_fmt buf ign_flag iconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(* Print a complete int32, nativeint or int64 format in a buffer. *)\nlet bprint_altint_fmt buf ign_flag iconv pad prec c =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf c;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(***)\n\n(* Print the optional '+' associated to a float conversion. *)\nlet bprint_fconv_flag buf fconv = match fconv with\n  | Float_pf | Float_pe | Float_pE\n  | Float_pg | Float_pG | Float_ph | Float_pH ->\n    buffer_add_char buf '+'\n  | Float_sf | Float_se | Float_sE\n  | Float_sg | Float_sG | Float_sh | Float_sH ->\n    buffer_add_char buf ' '\n  | Float_f | Float_e | Float_E\n  | Float_g | Float_G | Float_F | Float_h | Float_H ->\n    ()\n\n(* Print a complete float format in a buffer (ex: \"%+*.3f\"). *)\nlet bprint_float_fmt buf ign_flag fconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_fconv_flag buf fconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_fconv fconv)\n\n(* Compute the literal string representation of a formatting_lit. *)\n(* Also used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_lit formatting_lit = match formatting_lit with\n  | Close_box            -> \"@]\"\n  | Close_tag            -> \"@}\"\n  | Break (str, _, _)    -> str\n  | FFlush               -> \"@?\"\n  | Force_newline        -> \"@\\n\"\n  | Flush_newline        -> \"@.\"\n  | Magic_size (str, _)  -> str\n  | Escaped_at           -> \"@@\"\n  | Escaped_percent      -> \"@%\"\n  | Scan_indic c -> \"@\" ^ (String.make 1 c)\n\n(* Compute the literal string representation of a formatting. *)\n(* Also used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_gen : type a b c d e f .\n    (a, b, c, d, e, f) formatting_gen -> string =\n  fun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (_, str)) -> str\n  | Open_box (Format (_, str)) -> str\n\n(***)\n\n(* Print a literal char in a buffer, escape '%' by \"%%\". *)\nlet bprint_char_literal buf chr = match chr with\n  | '%' -> buffer_add_string buf \"%%\"\n  | _ -> buffer_add_char buf chr\n\n(* Print a literal string in a buffer, escape all '%' by \"%%\". *)\nlet bprint_string_literal buf str =\n  for i = 0 to String.length str - 1 do\n    bprint_char_literal buf str.[i]\n  done\n\n(******************************************************************************)\n                          (* Format pretty-printing *)\n\n(* Print a complete format type (an fmtty) in a buffer. *)\nlet rec bprint_fmtty : type a b c d e f g h i j k l .\n    buffer -> (a, b, c, d, e, f, g, h, i, j, k, l) fmtty_rel -> unit =\nfun buf fmtty -> match fmtty with\n  | Char_ty rest      -> buffer_add_string buf \"%c\";  bprint_fmtty buf rest;\n  | String_ty rest    -> buffer_add_string buf \"%s\";  bprint_fmtty buf rest;\n  | Int_ty rest       -> buffer_add_string buf \"%i\";  bprint_fmtty buf rest;\n  | Int32_ty rest     -> buffer_add_string buf \"%li\"; bprint_fmtty buf rest;\n  | Nativeint_ty rest -> buffer_add_string buf \"%ni\"; bprint_fmtty buf rest;\n  | Int64_ty rest     -> buffer_add_string buf \"%Li\"; bprint_fmtty buf rest;\n  | Float_ty rest     -> buffer_add_string buf \"%f\";  bprint_fmtty buf rest;\n  | Bool_ty rest      -> buffer_add_string buf \"%B\";  bprint_fmtty buf rest;\n  | Alpha_ty rest     -> buffer_add_string buf \"%a\";  bprint_fmtty buf rest;\n  | Theta_ty rest     -> buffer_add_string buf \"%t\";  bprint_fmtty buf rest;\n  | Any_ty rest       -> buffer_add_string buf \"%?\";  bprint_fmtty buf rest;\n  | Reader_ty rest    -> buffer_add_string buf \"%r\";  bprint_fmtty buf rest;\n\n  | Ignored_reader_ty rest ->\n    buffer_add_string buf \"%_r\";\n    bprint_fmtty buf rest;\n\n  | Format_arg_ty (sub_fmtty, rest) ->\n    buffer_add_string buf \"%{\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%}\"; bprint_fmtty buf rest;\n  | Format_subst_ty (sub_fmtty, _, rest) ->\n    buffer_add_string buf \"%(\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%)\"; bprint_fmtty buf rest;\n\n  | End_of_fmtty -> ()\n\n(***)\n\nlet rec int_of_custom_arity : type a b c .\n  (a, b, c) custom_arity -> int =\n  function\n  | Custom_zero -> 0\n  | Custom_succ x -> 1 + int_of_custom_arity x\n\n(* Print a complete format in a buffer. *)\nlet bprint_fmt buf fmt =\n  let rec fmtiter : type a b c d e f .\n      (a, b, c, d, e, f) fmt -> bool -> unit =\n  fun fmt ign_flag -> match fmt with\n    | String (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 's';\n      fmtiter rest false;\n    | Caml_string (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'S';\n      fmtiter rest false;\n\n    | Int (iconv, pad, prec, rest) ->\n      bprint_int_fmt buf ign_flag iconv pad prec;\n      fmtiter rest false;\n    | Int32 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'l';\n      fmtiter rest false;\n    | Nativeint (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'n';\n      fmtiter rest false;\n    | Int64 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'L';\n      fmtiter rest false;\n    | Float (fconv, pad, prec, rest) ->\n      bprint_float_fmt buf ign_flag fconv pad prec;\n      fmtiter rest false;\n\n    | Char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'c'; fmtiter rest false;\n    | Caml_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'C'; fmtiter rest false;\n    | Bool (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'B';\n      fmtiter rest false;\n    | Alpha rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'a'; fmtiter rest false;\n    | Theta rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 't'; fmtiter rest false;\n    | Custom (arity, _, rest) ->\n      for _i = 1 to int_of_custom_arity arity do\n        buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n        buffer_add_char buf '?';\n      done;\n      fmtiter rest false;\n    | Reader rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'r'; fmtiter rest false;\n    | Flush rest ->\n      buffer_add_string buf \"%!\";\n      fmtiter rest ign_flag;\n\n    | String_literal (str, rest) ->\n      bprint_string_literal buf str;\n      fmtiter rest ign_flag;\n    | Char_literal (chr, rest) ->\n      bprint_char_literal buf chr;\n      fmtiter rest ign_flag;\n\n    | Format_arg (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '{';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf '}';\n      fmtiter rest false;\n    | Format_subst (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '(';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf ')';\n      fmtiter rest false;\n\n    | Scan_char_set (width_opt, char_set, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf width_opt; bprint_char_set buf char_set;\n      fmtiter rest false;\n    | Scan_get_counter (counter, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf (char_of_counter counter);\n      fmtiter rest false;\n    | Scan_next_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_string_literal buf \"0c\"; fmtiter rest false;\n\n    | Ignored_param (ign, rest) ->\n      let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n      fmtiter fmt' true;\n\n    | Formatting_lit (fmting_lit, rest) ->\n      bprint_string_literal buf (string_of_formatting_lit fmting_lit);\n      fmtiter rest ign_flag;\n    | Formatting_gen (fmting_gen, rest) ->\n      bprint_string_literal buf \"@{\";\n      bprint_string_literal buf (string_of_formatting_gen fmting_gen);\n      fmtiter rest ign_flag;\n\n    | End_of_format -> ()\n\n  in fmtiter fmt false\n\n(***)\n\n(* Convert a format to string. *)\nlet string_of_fmt fmt =\n  let buf = buffer_create 16 in\n  bprint_fmt buf fmt;\n  buffer_contents buf\n\n(******************************************************************************)\n                          (* Type extraction *)\n\ntype (_, _) eq = Refl : ('a, 'a) eq\n\n(* Invariant: this function is the identity on values.\n\n   In particular, if (ty1, ty2) have equal values, then\n   (trans (symm ty1) ty2) respects the 'trans' precondition. *)\nlet rec symm : type a1 b1 c1 d1 e1 f1 a2 b2 c2 d2 e2 f2 .\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a1, b1, c1, d1, e1, f1) fmtty_rel\n= function\n  | Char_ty rest -> Char_ty (symm rest)\n  | Int_ty rest -> Int_ty (symm rest)\n  | Int32_ty rest -> Int32_ty (symm rest)\n  | Int64_ty rest -> Int64_ty (symm rest)\n  | Nativeint_ty rest -> Nativeint_ty (symm rest)\n  | Float_ty rest -> Float_ty (symm rest)\n  | Bool_ty rest -> Bool_ty (symm rest)\n  | String_ty rest -> String_ty (symm rest)\n  | Theta_ty rest -> Theta_ty (symm rest)\n  | Alpha_ty rest -> Alpha_ty (symm rest)\n  | Any_ty rest -> Any_ty (symm rest)\n  | Reader_ty rest -> Reader_ty (symm rest)\n  | Ignored_reader_ty rest -> Ignored_reader_ty (symm rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, symm rest)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty2, ty1, symm rest)\n  | End_of_fmtty -> End_of_fmtty\n\nlet rec fmtty_rel_det : type a1 b c d1 e1 f1 a2 d2 e2 f2 .\n  (a1, b, c, d1, e1, f1,\n   a2, b, c, d2, e2, f2) fmtty_rel ->\n    ((f1, f2) eq -> (a1, a2) eq)\n  * ((a1, a2) eq -> (f1, f2) eq)\n  * ((e1, e2) eq -> (d1, d2) eq)\n  * ((d1, d2) eq -> (e1, e2) eq)\n= function\n  | End_of_fmtty ->\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl)\n  | Char_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | String_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int32_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int64_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Nativeint_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Float_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Bool_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n\n  | Theta_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Alpha_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Any_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Ignored_reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Format_arg_ty (_ty, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    let ty = trans (symm ty1) ty2 in\n    let ag, ga, dj, jd = fmtty_rel_det ty in\n    (fun Refl -> let Refl = fa Refl in let Refl = ag Refl in Refl),\n    (fun Refl -> let Refl = ga Refl in let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in let Refl = dj Refl in Refl),\n    (fun Refl -> let Refl = jd Refl in let Refl = de Refl in Refl)\n\n(* Precondition: we assume that the two fmtty_rel arguments have equal\n   values (at possibly distinct types); this invariant comes from the way\n   fmtty_rel witnesses are produced by the type-checker\n\n   The code below uses (assert false) when this assumption is broken. The\n   code pattern is the following:\n\n     | Foo x, Foo y ->\n       (* case where indeed both values\n          start with constructor Foo *)\n     | Foo _, _\n     | _, Foo _ ->\n       (* different head constructors: broken precondition *)\n       assert false\n*)\nand trans : type\n  a1 b1 c1 d1 e1 f1\n  a2 b2 c2 d2 e2 f2\n  a3 b3 c3 d3 e3 f3\n.\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n-> (a1, b1, c1, d1, e1, f1,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n= fun ty1 ty2 -> match ty1, ty2 with\n  | Char_ty rest1, Char_ty rest2 -> Char_ty (trans rest1 rest2)\n  | String_ty rest1, String_ty rest2 -> String_ty (trans rest1 rest2)\n  | Bool_ty rest1, Bool_ty rest2 -> Bool_ty (trans rest1 rest2)\n  | Int_ty rest1, Int_ty rest2 -> Int_ty (trans rest1 rest2)\n  | Int32_ty rest1, Int32_ty rest2 -> Int32_ty (trans rest1 rest2)\n  | Int64_ty rest1, Int64_ty rest2 -> Int64_ty (trans rest1 rest2)\n  | Nativeint_ty rest1, Nativeint_ty rest2 -> Nativeint_ty (trans rest1 rest2)\n  | Float_ty rest1, Float_ty rest2 -> Float_ty (trans rest1 rest2)\n\n  | Alpha_ty rest1, Alpha_ty rest2 -> Alpha_ty (trans rest1 rest2)\n  | Alpha_ty _, _ -> assert false\n  | _, Alpha_ty _ -> assert false\n\n  | Theta_ty rest1, Theta_ty rest2 -> Theta_ty (trans rest1 rest2)\n  | Theta_ty _, _ -> assert false\n  | _, Theta_ty _ -> assert false\n\n  | Any_ty rest1, Any_ty rest2 -> Any_ty (trans rest1 rest2)\n  | Any_ty _, _ -> assert false\n  | _, Any_ty _ -> assert false\n\n  | Reader_ty rest1, Reader_ty rest2 -> Reader_ty (trans rest1 rest2)\n  | Reader_ty _, _ -> assert false\n  | _, Reader_ty _ -> assert false\n\n  | Ignored_reader_ty rest1, Ignored_reader_ty rest2 ->\n    Ignored_reader_ty (trans rest1 rest2)\n  | Ignored_reader_ty _, _ -> assert false\n  | _, Ignored_reader_ty _ -> assert false\n\n  | Format_arg_ty (ty1, rest1), Format_arg_ty (ty2, rest2) ->\n    Format_arg_ty (trans ty1 ty2, trans rest1 rest2)\n  | Format_arg_ty _, _ -> assert false\n  | _, Format_arg_ty _ -> assert false\n\n  | Format_subst_ty (ty11, ty12, rest1),\n    Format_subst_ty (ty21, ty22, rest2) ->\n    let ty = trans (symm ty12) ty21 in\n    let _, f2, _, f4 = fmtty_rel_det ty in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    Format_subst_ty (ty11, ty22, trans rest1 rest2)\n  | Format_subst_ty _, _ -> assert false\n  | _, Format_subst_ty _ -> assert false\n\n  | End_of_fmtty, End_of_fmtty -> End_of_fmtty\n  | End_of_fmtty, _ -> assert false\n  | _, End_of_fmtty -> assert false\n\nlet rec fmtty_of_formatting_gen : type a b c d e f .\n  (a, b, c, d, e, f) formatting_gen ->\n    (a, b, c, d, e, f) fmtty =\nfun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (fmt, _)) -> fmtty_of_fmt fmt\n  | Open_box (Format (fmt, _)) -> fmtty_of_fmt fmt\n\n(* Extract the type representation (an fmtty) of a format. *)\nand fmtty_of_fmt : type a b c d e f .\n  (a, b, c, d, e, f) fmt -> (a, b, c, d, e, f) fmtty =\nfun fmtty -> match fmtty with\n  | String (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n  | Caml_string (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n\n  | Int (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int32 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int32_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Nativeint (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Nativeint_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int64 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int64_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Float (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Float_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n\n  | Char rest                  -> Char_ty (fmtty_of_fmt rest)\n  | Caml_char rest             -> Char_ty (fmtty_of_fmt rest)\n  | Bool (pad, rest)           -> fmtty_of_padding_fmtty pad (Bool_ty (fmtty_of_fmt rest))\n  | Alpha rest                 -> Alpha_ty (fmtty_of_fmt rest)\n  | Theta rest                 -> Theta_ty (fmtty_of_fmt rest)\n  | Custom (arity, _, rest)    -> fmtty_of_custom arity (fmtty_of_fmt rest)\n  | Reader rest                -> Reader_ty (fmtty_of_fmt rest)\n\n  | Format_arg (_, ty, rest) ->\n    Format_arg_ty (ty, fmtty_of_fmt rest)\n  | Format_subst (_, ty, rest) ->\n    Format_subst_ty (ty, ty, fmtty_of_fmt rest)\n\n  | Flush rest                 -> fmtty_of_fmt rest\n  | String_literal (_, rest)   -> fmtty_of_fmt rest\n  | Char_literal (_, rest)     -> fmtty_of_fmt rest\n\n  | Scan_char_set (_, _, rest) -> String_ty (fmtty_of_fmt rest)\n  | Scan_get_counter (_, rest) -> Int_ty (fmtty_of_fmt rest)\n  | Scan_next_char rest        -> Char_ty (fmtty_of_fmt rest)\n  | Ignored_param (ign, rest)  -> fmtty_of_ignored_format ign rest\n  | Formatting_lit (_, rest)   -> fmtty_of_fmt rest\n  | Formatting_gen (fmting_gen, rest)  ->\n    concat_fmtty (fmtty_of_formatting_gen fmting_gen) (fmtty_of_fmt rest)\n\n  | End_of_format              -> End_of_fmtty\n\nand fmtty_of_custom : type x y a b c d e f .\n  (a, x, y) custom_arity -> (a, b, c, d, e, f) fmtty ->\n  (y, b, c, d, e, f) fmtty =\nfun arity fmtty -> match arity with\n  | Custom_zero -> fmtty\n  | Custom_succ arity -> Any_ty (fmtty_of_custom arity fmtty)\n\n(* Extract the fmtty of an ignored parameter followed by the rest of\n   the format. *)\nand fmtty_of_ignored_format : type x y a b c d e f .\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt ->\n    (a, b, c, d, e, f) fmtty =\nfun ign fmt -> match ign with\n  | Ignored_char                    -> fmtty_of_fmt fmt\n  | Ignored_caml_char               -> fmtty_of_fmt fmt\n  | Ignored_string _                -> fmtty_of_fmt fmt\n  | Ignored_caml_string _           -> fmtty_of_fmt fmt\n  | Ignored_int (_, _)              -> fmtty_of_fmt fmt\n  | Ignored_int32 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_nativeint (_, _)        -> fmtty_of_fmt fmt\n  | Ignored_int64 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_float (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_bool _                  -> fmtty_of_fmt fmt\n  | Ignored_format_arg _            -> fmtty_of_fmt fmt\n  | Ignored_format_subst (_, fmtty) -> concat_fmtty fmtty (fmtty_of_fmt fmt)\n  | Ignored_reader                  -> Ignored_reader_ty (fmtty_of_fmt fmt)\n  | Ignored_scan_char_set _         -> fmtty_of_fmt fmt\n  | Ignored_scan_get_counter _      -> fmtty_of_fmt fmt\n  | Ignored_scan_next_char          -> fmtty_of_fmt fmt\n\n(* Add an Int_ty node if padding is taken as an extra argument (ex: \"%*s\"). *)\nand fmtty_of_padding_fmtty : type x a b c d e f .\n    (x, a) padding -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun pad fmtty -> match pad with\n    | No_padding    -> fmtty\n    | Lit_padding _ -> fmtty\n    | Arg_padding _ -> Int_ty fmtty\n\n(* Add an Int_ty node if precision is taken as an extra argument (ex: \"%.*f\").*)\nand fmtty_of_precision_fmtty : type x a b c d e f .\n    (x, a) precision -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun prec fmtty -> match prec with\n    | No_precision    -> fmtty\n    | Lit_precision _ -> fmtty\n    | Arg_precision   -> Int_ty fmtty\n\n(******************************************************************************)\n                            (* Format typing *)\n\n(* Exception raised when a format does not match a given format type. *)\nexception Type_mismatch\n\n(* Type a padding. *)\n(* Take an Int_ty from the fmtty if the integer should be kept as argument. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padding : type a b c d e f x y .\n    (x, y) padding -> (a, b, c, d, e, f) fmtty ->\n      (a, b, c, d, e, f) padding_fmtty_ebb =\nfun pad fmtty -> match pad, fmtty with\n  | No_padding, _ -> Padding_fmtty_EBB (No_padding, fmtty)\n  | Lit_padding (padty, w), _ -> Padding_fmtty_EBB (Lit_padding (padty,w),fmtty)\n  | Arg_padding padty, Int_ty rest -> Padding_fmtty_EBB (Arg_padding padty,rest)\n  | _ -> raise Type_mismatch\n\n(* Convert a (upadding, uprecision) to a (padding, precision). *)\n(* Take one or two Int_ty from the fmtty if needed. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padprec : type a b c d e f x y z .\n  (x, y) padding -> (y, z) precision -> (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) padprec_fmtty_ebb =\nfun pad prec fmtty -> match prec, type_padding pad fmtty with\n  | No_precision, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, No_precision, rest)\n  | Lit_precision p, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, Lit_precision p, rest)\n  | Arg_precision, Padding_fmtty_EBB (pad, Int_ty rest) ->\n    Padprec_fmtty_EBB (pad, Arg_precision, rest)\n  | _, Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n\n(* Type a format according to an fmtty. *)\n(* If typing succeed, generate a copy of the format with the same\n    type parameters as the fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet rec type_format :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty -> match type_format_gen fmt fmtty with\n  | Fmt_fmtty_EBB (fmt', End_of_fmtty) -> fmt'\n  | _ -> raise Type_mismatch\n\nand type_format_gen :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun fmt fmtty -> match fmt, fmtty with\n  | Char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char fmt', fmtty')\n  | Caml_char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Caml_char fmt', fmtty')\n  | String (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (String (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Caml_string (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Caml_string (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Int (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int32 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int32_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int32 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Nativeint (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Nativeint_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Nativeint (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int64 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int64_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int64 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Float (fconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Float_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Float (fconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Bool (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, Bool_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Bool (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Flush fmt_rest, fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Flush fmt', fmtty')\n\n  | String_literal (str, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (String_literal (str, fmt'), fmtty')\n  | Char_literal (chr, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char_literal (chr, fmt'), fmtty')\n\n  | Format_arg (pad_opt, sub_fmtty, fmt_rest),\n    Format_arg_ty (sub_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub_fmtty <> Fmtty_EBB sub_fmtty' then raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Format_arg (pad_opt, sub_fmtty', fmt'), fmtty')\n  | Format_subst (pad_opt, sub_fmtty, fmt_rest),\n    Format_subst_ty (sub_fmtty1, _sub_fmtty2, fmtty_rest) ->\n    if Fmtty_EBB (erase_rel sub_fmtty) <> Fmtty_EBB (erase_rel sub_fmtty1) then\n      raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') =\n      type_format_gen fmt_rest (erase_rel fmtty_rest)\n    in\n    Fmt_fmtty_EBB (Format_subst (pad_opt, sub_fmtty1, fmt'), fmtty')\n  (* Printf and Format specific constructors: *)\n  | Alpha fmt_rest, Alpha_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Alpha fmt', fmtty')\n  | Theta fmt_rest, Theta_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Theta fmt', fmtty')\n\n  (* Format specific constructors: *)\n  | Formatting_lit (formatting_lit, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Formatting_lit (formatting_lit, fmt'), fmtty')\n  | Formatting_gen (formatting_gen, fmt_rest), fmtty_rest ->\n    type_formatting_gen formatting_gen fmt_rest fmtty_rest\n\n  (* Scanf specific constructors: *)\n  | Reader fmt_rest, Reader_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Reader fmt', fmtty')\n  | Scan_char_set (width_opt, char_set, fmt_rest), String_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_char_set (width_opt, char_set, fmt'), fmtty')\n  | Scan_get_counter (counter, fmt_rest), Int_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_get_counter (counter, fmt'), fmtty')\n  | Ignored_param (ign, rest), fmtty_rest ->\n    type_ignored_param ign rest fmtty_rest\n\n  | End_of_format, fmtty_rest -> Fmt_fmtty_EBB (End_of_format, fmtty_rest)\n\n  | _ -> raise Type_mismatch\n\nand type_formatting_gen : type a1 a3 b1 b3 c1 c3 d1 d3 e1 e2 e3 f1 f2 f3 .\n    (a1, b1, c1, d1, e1, f1) formatting_gen ->\n    (f1, b1, c1, e1, e2, f2) fmt ->\n    (a3, b3, c3, d3, e3, f3) fmtty ->\n    (a3, b3, c3, d3, e3, f3) fmt_fmtty_ebb =\nfun formatting_gen fmt0 fmtty0 -> match formatting_gen with\n  | Open_tag (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_tag (Format (fmt2, str)), fmt3), fmtty3)\n  | Open_box (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_box (Format (fmt2, str)), fmt3), fmtty3)\n\n(* Type an Ignored_param node according to an fmtty. *)\nand type_ignored_param : type p q x y z t u v a b c d e f .\n    (x, y, z, t, q, p) ignored ->\n    (p, y, z, q, u, v) fmt ->\n    (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) fmt_fmtty_ebb =\nfun ign fmt fmtty -> match ign with\n  | Ignored_char               as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_char          as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_string _           as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_string _      as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int _              as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int32 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_nativeint _        as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int64 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_float _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_bool _             as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_char_set _    as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_get_counter _ as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_next_char     as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_format_arg (pad_opt, sub_fmtty) ->\n    type_ignored_param_one (Ignored_format_arg (pad_opt, sub_fmtty)) fmt fmtty\n  | Ignored_format_subst (pad_opt, sub_fmtty) ->\n    let Fmtty_fmt_EBB (sub_fmtty', Fmt_fmtty_EBB (fmt', fmtty')) =\n      type_ignored_format_substitution sub_fmtty fmt fmtty in\n    Fmt_fmtty_EBB (Ignored_param (Ignored_format_subst (pad_opt, sub_fmtty'),\n                                  fmt'),\n                   fmtty')\n  | Ignored_reader -> (\n    match fmtty with\n    | Ignored_reader_ty fmtty_rest ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty_rest in\n      Fmt_fmtty_EBB (Ignored_param (Ignored_reader, fmt'), fmtty')\n    | _ -> raise Type_mismatch\n  )\n\nand type_ignored_param_one : type a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 .\n    (a2, b2, c2, d2, d2, a2) ignored ->\n    (a1, b1, c1, d1, e1, f1) fmt ->\n    (a2, b2, c2, d2, e2, f2) fmtty ->\n    (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun ign fmt fmtty ->\n  let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty in\n  Fmt_fmtty_EBB (Ignored_param (ign, fmt'), fmtty')\n\n(* Typing of the complex case: \"%_(...%)\". *)\nand type_ignored_format_substitution : type w x y z p s t u a b c d e f .\n    (w, x, y, z, s, p) fmtty ->\n    (p, x, y, s, t, u) fmt ->\n    (a, b, c, d, e, f) fmtty -> (a, b, c, d, e, f) fmtty_fmt_ebb =\nfun sub_fmtty fmt fmtty -> match sub_fmtty, fmtty with\n  | Char_ty sub_fmtty_rest, Char_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Char_ty sub_fmtty_rest', fmt')\n  | String_ty sub_fmtty_rest, String_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (String_ty sub_fmtty_rest', fmt')\n  | Int_ty sub_fmtty_rest, Int_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int_ty sub_fmtty_rest', fmt')\n  | Int32_ty sub_fmtty_rest, Int32_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int32_ty sub_fmtty_rest', fmt')\n  | Nativeint_ty sub_fmtty_rest, Nativeint_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Nativeint_ty sub_fmtty_rest', fmt')\n  | Int64_ty sub_fmtty_rest, Int64_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int64_ty sub_fmtty_rest', fmt')\n  | Float_ty sub_fmtty_rest, Float_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Float_ty sub_fmtty_rest', fmt')\n  | Bool_ty sub_fmtty_rest, Bool_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Bool_ty sub_fmtty_rest', fmt')\n  | Alpha_ty sub_fmtty_rest, Alpha_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Alpha_ty sub_fmtty_rest', fmt')\n  | Theta_ty sub_fmtty_rest, Theta_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Theta_ty sub_fmtty_rest', fmt')\n  | Reader_ty sub_fmtty_rest, Reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Reader_ty sub_fmtty_rest', fmt')\n  | Ignored_reader_ty sub_fmtty_rest, Ignored_reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Ignored_reader_ty sub_fmtty_rest', fmt')\n\n  | Format_arg_ty (sub2_fmtty, sub_fmtty_rest),\n    Format_arg_ty (sub2_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub2_fmtty <> Fmtty_EBB sub2_fmtty' then raise Type_mismatch;\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Format_arg_ty (sub2_fmtty', sub_fmtty_rest'), fmt')\n  | Format_subst_ty (sub1_fmtty,  sub2_fmtty,  sub_fmtty_rest),\n    Format_subst_ty (sub1_fmtty', sub2_fmtty', fmtty_rest) ->\n    (* TODO define Fmtty_rel_EBB to remove those erase_rel *)\n    if Fmtty_EBB (erase_rel sub1_fmtty) <> Fmtty_EBB (erase_rel sub1_fmtty')\n    then raise Type_mismatch;\n    if Fmtty_EBB (erase_rel sub2_fmtty) <> Fmtty_EBB (erase_rel sub2_fmtty')\n    then raise Type_mismatch;\n    let sub_fmtty' = trans (symm sub1_fmtty') sub2_fmtty' in\n    let _, f2, _, f4 = fmtty_rel_det sub_fmtty' in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution (erase_rel sub_fmtty_rest) fmt fmtty_rest\n    in\n    Fmtty_fmt_EBB (Format_subst_ty (sub1_fmtty', sub2_fmtty',\n                                    symm sub_fmtty_rest'),\n                   fmt')\n  | End_of_fmtty, fmtty ->\n    Fmtty_fmt_EBB (End_of_fmtty, type_format_gen fmt fmtty)\n  | _ -> raise Type_mismatch\n\n(* This implementation of `recast` is a bit disappointing. The\n   invariant provided by the type are very strong: the input format's\n   type is in relation to the output type's as witnessed by the\n   fmtty_rel argument. One would at first expect this function to be\n   total, and implementable by exhaustive pattern matching. Instead,\n   we reuse the highly partial and much less well-defined function\n   `type_format` that has lost all knowledge of the correspondence\n   between the argument's types.\n\n   Besides the fact that this function reuses a lot of the\n   `type_format` logic (eg.: seeing Int_ty in the fmtty parameter does\n   not let you match on Int only, as you may in fact have Float\n   (Arg_padding, ...) (\"%.*d\") beginning with an Int_ty), it is also\n   a partial function, because the typing information in a format is\n   not quite enough to reconstruct it unambiguously. For example, the\n   format types of \"%d%_r\" and \"%_r%d\" have the same format6\n   parameters, but they are not at all exchangeable, and putting one\n   in place of the other must result in a dynamic failure.\n\n   Given that:\n   - we'd have to duplicate a lot of non-trivial typing logic from type_format\n   - this wouldn't even eliminate (all) the dynamic failures\n   we decided to just reuse type_format directly for now.\n*)\nlet recast :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a1, b1, c1, d1, e1, f1,\n      a2, b2, c2, d2, e2, f2) fmtty_rel\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty ->\n  type_format fmt (erase_rel (symm fmtty))\n\n(******************************************************************************)\n                             (* Printing tools *)\n\n(* Add padding spaces around a string. *)\nlet fix_padding padty width str =\n  let len = String.length str in\n  let width, padty =\n    abs width,\n    (* while literal padding widths are always non-negative,\n       dynamically-set widths (Arg_padding, eg. %*d) may be negative;\n       we interpret those as specifying a padding-to-the-left; this\n       means that '0' may get dropped even if it was explicitly set,\n       but:\n       - this is what the legacy implementation does, and\n         we preserve compatibility if possible\n       - we could only signal this issue by failing at runtime,\n         which is not very nice... *)\n    if width < 0 then Left else padty in\n  if width <= len then str else\n    let res = Bytes.make width (if padty = Zeros then '0' else ' ') in\n    begin match padty with\n    | Left  -> String.blit str 0 res 0 len\n    | Right -> String.blit str 0 res (width - len) len\n    | Zeros when len > 0 && (str.[0] = '+' || str.[0] = '-' || str.[0] = ' ') ->\n      Bytes.set res 0 str.[0];\n      String.blit str 1 res (width - len + 1) (len - 1)\n    | Zeros when len > 1 && str.[0] = '0' && (str.[1] = 'x' || str.[1] = 'X') ->\n      Bytes.set res 1 str.[1];\n      String.blit str 2 res (width - len + 2) (len - 2)\n    | Zeros ->\n      String.blit str 0 res (width - len) len\n    end;\n    Bytes.unsafe_to_string res\n\n(* Add '0' padding to int, int32, nativeint or int64 string representation. *)\nlet fix_int_precision prec str =\n  let prec = abs prec in\n  let len = String.length str in\n  match str.[0] with\n  | ('+' | '-' | ' ') as c when prec + 1 > len ->\n    let res = Bytes.make (prec + 1) '0' in\n    Bytes.set res 0 c;\n    String.blit str 1 res (prec - len + 2) (len - 1);\n    Bytes.unsafe_to_string res\n  | '0' when prec + 2 > len && len > 1 && (str.[1] = 'x' || str.[1] = 'X') ->\n    let res = Bytes.make (prec + 2) '0' in\n    Bytes.set res 1 str.[1];\n    String.blit str 2 res (prec - len + 4) (len - 2);\n    Bytes.unsafe_to_string res\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' when prec > len ->\n    let res = Bytes.make prec '0' in\n    String.blit str 0 res (prec - len) len;\n    Bytes.unsafe_to_string res\n  | _ ->\n    str\n\n(* Escape a string according to the OCaml lexing convention. *)\nlet string_to_caml_string str =\n  let str = String.escaped str in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\\"' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Generate the format_int/int32/nativeint/int64 first argument\n   from an int_conv. *)\nlet format_of_iconv = function\n  | Int_d -> \"%d\" | Int_pd -> \"%+d\" | Int_sd -> \"% d\"\n  | Int_i -> \"%i\" | Int_pi -> \"%+i\" | Int_si -> \"% i\"\n  | Int_x -> \"%x\" | Int_Cx -> \"%#x\"\n  | Int_X -> \"%X\" | Int_CX -> \"%#X\"\n  | Int_o -> \"%o\" | Int_Co -> \"%#o\"\n  | Int_u -> \"%u\"\n\nlet format_of_iconvL = function\n  | Int_d -> \"%Ld\" | Int_pd -> \"%+Ld\" | Int_sd -> \"% Ld\"\n  | Int_i -> \"%Li\" | Int_pi -> \"%+Li\" | Int_si -> \"% Li\"\n  | Int_x -> \"%Lx\" | Int_Cx -> \"%#Lx\"\n  | Int_X -> \"%LX\" | Int_CX -> \"%#LX\"\n  | Int_o -> \"%Lo\" | Int_Co -> \"%#Lo\"\n  | Int_u -> \"%Lu\"\n\nlet format_of_iconvl = function\n  | Int_d -> \"%ld\" | Int_pd -> \"%+ld\" | Int_sd -> \"% ld\"\n  | Int_i -> \"%li\" | Int_pi -> \"%+li\" | Int_si -> \"% li\"\n  | Int_x -> \"%lx\" | Int_Cx -> \"%#lx\"\n  | Int_X -> \"%lX\" | Int_CX -> \"%#lX\"\n  | Int_o -> \"%lo\" | Int_Co -> \"%#lo\"\n  | Int_u -> \"%lu\"\n\nlet format_of_iconvn = function\n  | Int_d -> \"%nd\" | Int_pd -> \"%+nd\" | Int_sd -> \"% nd\"\n  | Int_i -> \"%ni\" | Int_pi -> \"%+ni\" | Int_si -> \"% ni\"\n  | Int_x -> \"%nx\" | Int_Cx -> \"%#nx\"\n  | Int_X -> \"%nX\" | Int_CX -> \"%#nX\"\n  | Int_o -> \"%no\" | Int_Co -> \"%#no\"\n  | Int_u -> \"%nu\"\n\n(* Generate the format_float first argument form a float_conv. *)\nlet format_of_fconv fconv prec =\n  if fconv = Float_F then \"%.12g\" else\n    let prec = abs prec in\n    let symb = char_of_fconv fconv in\n    let buf = buffer_create 16 in\n    buffer_add_char buf '%';\n    bprint_fconv_flag buf fconv;\n    buffer_add_char buf '.';\n    buffer_add_string buf (string_of_int prec);\n    buffer_add_char buf symb;\n    buffer_contents buf\n\n(* Convert an integer to a string according to a conversion. *)\nlet convert_int iconv n = format_int (format_of_iconv iconv) n\nlet convert_int32 iconv n = format_int32 (format_of_iconvl iconv) n\nlet convert_nativeint iconv n = format_nativeint (format_of_iconvn iconv) n\nlet convert_int64 iconv n = format_int64 (format_of_iconvL iconv) n\n\n(* Convert a float to string. *)\n(* Fix special case of \"OCaml float format\". *)\nlet convert_float fconv prec x =\n  match fconv with\n  | Float_h | Float_ph | Float_sh | Float_H | Float_pH | Float_sH ->\n    let sign =\n      match fconv with\n      | Float_ph | Float_pH -> '+'\n      | Float_sh | Float_sH -> ' '\n      | _ -> '-' in\n    let str = hexstring_of_float x prec sign in\n    begin match fconv with\n    | Float_H | Float_pH | Float_sH -> String.uppercase_ascii str\n    | _ -> str\n    end\n  | _ ->\n    let str = format_float (format_of_fconv fconv prec) x in\n    if fconv <> Float_F then str else\n      let len = String.length str in\n      let rec is_valid i =\n        if i = len then false else\n          match str.[i] with\n          | '.' | 'e' | 'E' -> true\n          | _ -> is_valid (i + 1)\n      in\n      match classify_float x with\n      | FP_normal | FP_subnormal | FP_zero ->\n        if is_valid 0 then str else str ^ \".\"\n      | FP_infinite ->\n        if x < 0.0 then \"neg_infinity\" else \"infinity\"\n      | FP_nan -> \"nan\"\n\n(* Convert a char to a string according to the OCaml lexical convention. *)\nlet format_caml_char c =\n  let str = Char.escaped c in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\'' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Convert a format type to string *)\nlet string_of_fmtty fmtty =\n  let buf = buffer_create 16 in\n  bprint_fmtty buf fmtty;\n  buffer_contents buf\n\n(******************************************************************************)\n                        (* Generic printing function *)\n\n(* Make a generic printing function. *)\n(* Used to generate Printf and Format printing functions. *)\n(* Parameters:\n     k: a continuation finally applied to the output stream and the accumulator.\n     o: the output stream (see k, %a and %t).\n     acc: rev list of printing entities (string, char, flush, formatting, ...).\n     fmt: the format. *)\nlet rec make_printf : type a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k o acc fmt -> match fmt with\n  | Char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k o new_acc rest\n  | Caml_char rest ->\n    fun c ->\n      let new_acc = Acc_data_string (acc, format_caml_char c) in\n      make_printf k o new_acc rest\n  | String (pad, rest) ->\n    make_padding k o acc rest pad (fun str -> str)\n  | Caml_string (pad, rest) ->\n    make_padding k o acc rest pad string_to_caml_string\n  | Int (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int iconv\n  | Int32 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int32 iconv\n  | Nativeint (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_nativeint iconv\n  | Int64 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int64 iconv\n  | Float (fconv, pad, prec, rest) ->\n    make_float_padding_precision k o acc rest pad prec fconv\n  | Bool (pad, rest) ->\n    make_padding k o acc rest pad string_of_bool\n  | Alpha rest ->\n    fun f x -> make_printf k o (Acc_delay (acc, fun o -> f o x)) rest\n  | Theta rest ->\n    fun f -> make_printf k o (Acc_delay (acc, f)) rest\n  | Custom (arity, f, rest) ->\n    make_custom k o acc rest arity (f ())\n  | Reader _ ->\n    (* This case is impossible, by typing of formats. *)\n    (* Indeed, since printf and co. take a format4 as argument, the 'd and 'e\n       type parameters of fmt are obviously equals. The Reader is the\n       only constructor which touch 'd and 'e type parameters of the format\n       type, it adds an (->) to the 'd parameters. Consequently, a format4\n       cannot contain a Reader node, except in the sub-format associated to\n       an %{...%}. It's not a problem because make_printf do not call\n       itself recursively on the sub-format associated to %{...%}. *)\n    assert false\n  | Flush rest ->\n    make_printf k o (Acc_flush acc) rest\n\n  | String_literal (str, rest) ->\n    make_printf k o (Acc_string_literal (acc, str)) rest\n  | Char_literal (chr, rest) ->\n    make_printf k o (Acc_char_literal (acc, chr)) rest\n\n  | Format_arg (_, sub_fmtty, rest) ->\n    let ty = string_of_fmtty sub_fmtty in\n    (fun str ->\n      ignore str;\n      make_printf k o (Acc_data_string (acc, ty)) rest)\n  | Format_subst (_, fmtty, rest) ->\n    fun (Format (fmt, _)) -> make_printf k o acc\n      (concat_fmt (recast fmt fmtty) rest)\n\n  | Scan_char_set (_, _, rest) ->\n    let new_acc = Acc_invalid_arg (acc, \"Printf: bad conversion %[\") in\n    fun _ -> make_printf k o new_acc rest\n  | Scan_get_counter (_, rest) ->\n    (* This case should be refused for Printf. *)\n    (* Accepted for backward compatibility. *)\n    (* Interpret %l, %n and %L as %u. *)\n    fun n ->\n      let new_acc = Acc_data_string (acc, format_int \"%u\" n) in\n      make_printf k o new_acc rest\n  | Scan_next_char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k o new_acc rest\n  | Ignored_param (ign, rest) ->\n    make_ignored_param k o acc ign rest\n\n  | Formatting_lit (fmting_lit, rest) ->\n    make_printf k o (Acc_formatting_lit (acc, fmting_lit)) rest\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    let k' koc kacc =\n      make_printf k koc (Acc_formatting_gen (acc, Acc_open_tag kacc)) rest in\n    make_printf k' o End_of_acc fmt'\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    let k' koc kacc =\n      make_printf k koc (Acc_formatting_gen (acc, Acc_open_box kacc)) rest in\n    make_printf k' o End_of_acc fmt'\n\n  | End_of_format ->\n    k o acc\n\n(* Delay the error (Invalid_argument \"Printf: bad conversion %_\"). *)\n(* Generate functions to take remaining arguments (after the \"%_\"). *)\nand make_ignored_param : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k o acc ign fmt -> match ign with\n  | Ignored_char                    -> make_invalid_arg k o acc fmt\n  | Ignored_caml_char               -> make_invalid_arg k o acc fmt\n  | Ignored_string _                -> make_invalid_arg k o acc fmt\n  | Ignored_caml_string _           -> make_invalid_arg k o acc fmt\n  | Ignored_int (_, _)              -> make_invalid_arg k o acc fmt\n  | Ignored_int32 (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_nativeint (_, _)        -> make_invalid_arg k o acc fmt\n  | Ignored_int64 (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_float (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_bool _                  -> make_invalid_arg k o acc fmt\n  | Ignored_format_arg _            -> make_invalid_arg k o acc fmt\n  | Ignored_format_subst (_, fmtty) -> make_from_fmtty k o acc fmtty fmt\n  | Ignored_reader                  -> assert false\n  | Ignored_scan_char_set _         -> make_invalid_arg k o acc fmt\n  | Ignored_scan_get_counter _      -> make_invalid_arg k o acc fmt\n  | Ignored_scan_next_char          -> make_invalid_arg k o acc fmt\n\n\n(* Special case of printf \"%_(\". *)\nand make_from_fmtty : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, y, x) fmtty ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k o acc fmtty fmt -> match fmtty with\n  | Char_ty rest            -> fun _ -> make_from_fmtty k o acc rest fmt\n  | String_ty rest          -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int_ty rest             -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int32_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Nativeint_ty rest       -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int64_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Float_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Bool_ty rest            -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Alpha_ty rest           -> fun _ _ -> make_from_fmtty k o acc rest fmt\n  | Theta_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Any_ty rest             -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Reader_ty _             -> assert false\n  | Ignored_reader_ty _     -> assert false\n  | Format_arg_ty (_, rest) -> fun _ -> make_from_fmtty k o acc rest fmt\n  | End_of_fmtty            -> make_invalid_arg k o acc fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    fun _ -> make_from_fmtty k o acc (concat_fmtty ty rest) fmt\n\n(* Insert an Acc_invalid_arg in the accumulator and continue to generate\n   closures to get the remaining arguments. *)\nand make_invalid_arg : type a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k o acc fmt ->\n  make_printf k o (Acc_invalid_arg (acc, \"Printf: bad conversion %_\")) fmt\n\n(* Fix padding, take it as an extra integer argument if needed. *)\nand make_padding : type x z a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, z -> a) padding -> (z -> string) -> x =\n  fun k o acc fmt pad trans -> match pad with\n  | No_padding ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, trans x) in\n      make_printf k o new_acc fmt\n  | Lit_padding (padty, width) ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty width (trans x)) in\n      make_printf k o new_acc fmt\n  | Arg_padding padty ->\n    fun w x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty w (trans x)) in\n      make_printf k o new_acc fmt\n\n(* Fix padding and precision for int, int32, nativeint or int64. *)\n(* Take one or two extra integer arguments if needed. *)\nand make_int_padding_precision : type x y z a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, z -> a) precision -> (int_conv -> z -> string) ->\n    int_conv -> x =\n  fun k o acc fmt pad prec trans iconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = trans iconv x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n\n(* Convert a float, fix padding and precision if needed. *)\n(* Take the float argument and one or two extra integer arguments if needed. *)\nand make_float_padding_precision : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, float -> a) precision -> float_conv -> x =\n  fun k o acc fmt pad prec fconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = convert_float fconv default_float_precision x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = convert_float fconv p x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = convert_float fconv p x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = convert_float fconv default_float_precision x in\n      let str' = fix_padding padty w str in\n      make_printf k o (Acc_data_string (acc, str')) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = convert_float fconv default_float_precision x in\n      let str' = fix_padding padty w str in\n      make_printf k o (Acc_data_string (acc, str')) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\nand make_custom : type x y a b c d e f .\n  (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n  (a, b, c, d, e, f) fmt ->\n  (a, x, y) custom_arity -> x -> y =\n  fun k o acc rest arity f -> match arity with\n  | Custom_zero -> make_printf k o (Acc_data_string (acc, f)) rest\n  | Custom_succ arity ->\n    fun x ->\n      make_custom k o acc rest arity (f x)\n\nlet const x _ = x\n\nlet rec make_iprintf : type a b c d e f.\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt -> a =\n  fun k o fmt -> match fmt with\n    | Char rest ->\n        const (make_iprintf k o rest)\n    | Caml_char rest ->\n        const (make_iprintf k o rest)\n    | String (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | String (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | String (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Caml_string (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Int (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int32 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Nativeint (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int64 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Float (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Bool (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Alpha rest ->\n        const (const (make_iprintf k o rest))\n    | Theta rest ->\n        const (make_iprintf k o rest)\n    | Custom (arity, _, rest) ->\n        fn_of_custom_arity k o rest arity\n    | Reader _ ->\n        (* This case is impossible, by typing of formats.  See the\n           note in the corresponding case for make_printf. *)\n        assert false\n    | Flush rest ->\n        make_iprintf k o rest\n    | String_literal (_, rest) ->\n        make_iprintf k o rest\n    | Char_literal (_, rest) ->\n        make_iprintf k o rest\n    | Format_arg (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Format_subst (_, fmtty, rest) ->\n        fun (Format (fmt, _)) ->\n          make_iprintf k o\n            (concat_fmt (recast fmt fmtty) rest)\n    | Scan_char_set (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_get_counter (_, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_next_char rest ->\n        const (make_iprintf k o rest)\n    | Ignored_param (ign, rest) ->\n        make_ignored_param (fun x _ -> k x) o (End_of_acc) ign rest\n    | Formatting_lit (_, rest) ->\n        make_iprintf k o rest\n    | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | End_of_format ->\n        k o\nand fn_of_padding_precision :\n  type x y z a b c d e f.\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt ->\n  (x, y) padding -> (y, z -> a) precision -> x =\n  fun k o fmt pad prec -> match pad, prec with\n    | No_padding   , No_precision    ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Lit_padding _, No_precision    ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, No_precision    ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Lit_precision _ ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Arg_precision   ->\n        const (const (const (make_iprintf k o fmt)))\nand fn_of_custom_arity : type x y a b c d e f .\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt -> (a, x, y) custom_arity -> y =\n  fun k o fmt -> function\n    | Custom_zero ->\n        make_iprintf k o fmt\n    | Custom_succ arity ->\n        const (fn_of_custom_arity k o fmt arity)\n\n(******************************************************************************)\n                          (* Continuations for make_printf *)\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Used as a continuation of make_printf. *)\nlet rec output_acc o acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    output_acc o p; output_string o s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc o p; output_string o \"@{\"; output_acc o acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc o p; output_string o \"@[\"; output_acc o acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc o p; output_string o s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc o p; output_char o c\n  | Acc_delay (p, f)         -> output_acc o p; f o\n  | Acc_flush p              -> output_acc o p; flush o\n  | Acc_invalid_arg (p, msg) -> output_acc o p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Used as a continuation of make_printf. *)\nlet rec bufput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    bufput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    bufput_acc b p; Buffer.add_string b \"@{\"; bufput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    bufput_acc b p; Buffer.add_string b \"@[\"; bufput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> bufput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> bufput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> bufput_acc b p; f b\n  | Acc_flush p              -> bufput_acc b p;\n  | Acc_invalid_arg (p, msg) -> bufput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from bufput_acc by the interpretation of %a and %t. *)\n(* Used as a continuation of make_printf. *)\nlet rec strput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    strput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc b p; Buffer.add_string b \"@{\"; strput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc b p; Buffer.add_string b \"@[\"; strput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> strput_acc b p; Buffer.add_string b (f ())\n  | Acc_flush p              -> strput_acc b p;\n  | Acc_invalid_arg (p, msg) -> strput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(******************************************************************************)\n                          (* Error management *)\n\n(* Raise [Failure] with a pretty-printed error message. *)\nlet failwith_message (Format (fmt, _)) =\n  let buf = Buffer.create 256 in\n  let k () acc = strput_acc buf acc; failwith (Buffer.contents buf) in\n  make_printf k () End_of_acc fmt\n\n(******************************************************************************)\n                            (* Formatting tools *)\n\n(* Convert a string to an open block description (indent, block_type) *)\nlet open_box_of_string str =\n  if str = \"\" then (0, Pp_box) else\n    let len = String.length str in\n    let invalid_box () = failwith_message \"invalid box description %S\" str in\n    let rec parse_spaces i =\n      if i = len then i else\n        match str.[i] with\n        | ' ' | '\\t' -> parse_spaces (i + 1)\n        | _ -> i\n    and parse_lword i j =\n      if j = len then j else\n        match str.[j] with\n        | 'a' .. 'z' -> parse_lword i (j + 1)\n        | _ -> j\n    and parse_int i j =\n      if j = len then j else\n        match str.[j] with\n        | '0' .. '9' | '-' -> parse_int i (j + 1)\n        | _ -> j in\n    let wstart = parse_spaces 0 in\n    let wend = parse_lword wstart wstart in\n    let box_name = String.sub str wstart (wend - wstart) in\n    let nstart = parse_spaces wend in\n    let nend = parse_int nstart nstart in\n    let indent =\n      if nstart = nend then 0 else\n        try int_of_string (String.sub str nstart (nend - nstart))\n        with Failure _ -> invalid_box () in\n    let exp_end = parse_spaces nend in\n    if exp_end <> len then invalid_box ();\n    let box_type = match box_name with\n      | \"\" | \"b\" -> Pp_box\n      | \"h\"      -> Pp_hbox\n      | \"v\"      -> Pp_vbox\n      | \"hv\"     -> Pp_hvbox\n      | \"hov\"    -> Pp_hovbox\n      | _        -> invalid_box () in\n    (indent, box_type)\n\n(******************************************************************************)\n                            (* Parsing tools *)\n\n(* Create a padding_fmt_ebb from a padding and a format. *)\n(* Copy the padding to disjoin the type parameters of argument and result. *)\nlet make_padding_fmt_ebb : type x y .\n    (x, y) padding -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) padding_fmt_ebb =\nfun pad fmt -> match pad with\n  | No_padding         -> Padding_fmt_EBB (No_padding, fmt)\n  | Lit_padding (s, w) -> Padding_fmt_EBB (Lit_padding (s, w), fmt)\n  | Arg_padding s      -> Padding_fmt_EBB (Arg_padding s, fmt)\n\n(* Create a precision_fmt_ebb from a precision and a format. *)\n(* Copy the precision to disjoin the type parameters of argument and result. *)\nlet make_precision_fmt_ebb : type x y .\n    (x, y) precision -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) precision_fmt_ebb =\nfun prec fmt -> match prec with\n  | No_precision    -> Precision_fmt_EBB (No_precision, fmt)\n  | Lit_precision p -> Precision_fmt_EBB (Lit_precision p, fmt)\n  | Arg_precision   -> Precision_fmt_EBB (Arg_precision, fmt)\n\n(* Create a padprec_fmt_ebb from a padding, a precision and a format. *)\n(* Copy the padding and the precision to disjoin type parameters of arguments\n   and result. *)\nlet make_padprec_fmt_ebb : type x y z t .\n    (x, y) padding -> (z, t) precision ->\n    (_, _, _, _, _, _) fmt ->\n    (_, _, _, _, _) padprec_fmt_ebb =\nfun pad prec fmt ->\n  let Precision_fmt_EBB (prec, fmt') = make_precision_fmt_ebb prec fmt in\n  match pad with\n  | No_padding         -> Padprec_fmt_EBB (No_padding, prec, fmt')\n  | Lit_padding (s, w) -> Padprec_fmt_EBB (Lit_padding (s, w), prec, fmt')\n  | Arg_padding s      -> Padprec_fmt_EBB (Arg_padding s, prec, fmt')\n\n(******************************************************************************)\n                             (* Format parsing *)\n\n(* Parse a string representing a format and create a fmt_ebb. *)\n(* Raise [Failure] in case of invalid format. *)\nlet fmt_ebb_of_string ?legacy_behavior str =\n  (* Parameters naming convention:                                    *)\n  (*   - lit_start: start of the literal sequence.                    *)\n  (*   - str_ind: current index in the string.                        *)\n  (*   - end_ind: end of the current (sub-)format.                    *)\n  (*   - pct_ind: index of the '%' in the current micro-format.       *)\n  (*   - zero:  is the '0' flag defined in the current micro-format.  *)\n  (*   - minus: is the '-' flag defined in the current micro-format.  *)\n  (*   - plus:  is the '+' flag defined in the current micro-format.  *)\n  (*   - hash:  is the '#' flag defined in the current micro-format.  *)\n  (*   - space: is the ' ' flag defined in the current micro-format.  *)\n  (*   - ign:   is the '_' flag defined in the current micro-format.  *)\n  (*   - pad: padding of the current micro-format.                    *)\n  (*   - prec: precision of the current micro-format.                 *)\n  (*   - symb: char representing the conversion ('c', 's', 'd', ...). *)\n  (*   - char_set: set of characters as bitmap (see scanf %[...]).    *)\n\n  let legacy_behavior = match legacy_behavior with\n    | Some flag -> flag\n    | None -> true\n  (*  When this flag is enabled, the format parser tries to behave as\n      the <4.02 implementations, in particular it ignores most benine\n      nonsensical format. When the flag is disabled, it will reject any\n      format that is not accepted by the specification.\n\n      A typical example would be \"%+ d\": specifying both '+' (if the\n      number is positive, pad with a '+' to get the same width as\n      negative numbers) and ' ' (if the number is positive, pad with\n      a space) does not make sense, but the legacy (< 4.02)\n      implementation was happy to just ignore the space.\n  *)\n  in\n\n  (* Raise [Failure] with a friendly error message. *)\n  let invalid_format_message str_ind msg =\n    failwith_message\n      \"invalid format %S: at character number %d, %s\"\n      str str_ind msg\n  in\n\n  (* Used when the end of the format (or the current sub-format) was encountered\n      unexpectedly. *)\n  let unexpected_end_of_format end_ind =\n    invalid_format_message end_ind\n      \"unexpected end of format\"\n  in\n\n  (* Used for %0c: no other widths are implemented *)\n  let invalid_nonnull_char_width str_ind =\n    invalid_format_message str_ind\n      \"non-zero widths are unsupported for %c conversions\"\n  in\n  (* Raise [Failure] with a friendly error message about an option dependency\n     problem. *)\n  let invalid_format_without str_ind c s =\n    failwith_message\n      \"invalid format %S: at character number %d, '%c' without %s\"\n      str str_ind c s\n  in\n\n  (* Raise [Failure] with a friendly error message about an unexpected\n     character. *)\n  let expected_character str_ind expected read =\n    failwith_message\n     \"invalid format %S: at character number %d, %s expected, read %C\"\n      str str_ind expected read\n  in\n\n  (* Parse the string from beg_ind (included) to end_ind (excluded). *)\n  let rec parse : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun beg_ind end_ind -> parse_literal beg_ind beg_ind end_ind\n\n  (* Read literal characters up to '%' or '@' special characters. *)\n  and parse_literal : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind end_ind ->\n    if str_ind = end_ind then add_literal lit_start str_ind End_of_format else\n      match str.[str_ind] with\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse_format str_ind end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse_after_at (str_ind + 1) end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | _ ->\n        parse_literal lit_start (str_ind + 1) end_ind\n\n  (* Parse a format after '%' *)\n  and parse_format : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind end_ind -> parse_ign pct_ind (pct_ind + 1) end_ind\n\n  and parse_ign : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n      | '_' -> parse_flags pct_ind (str_ind+1) end_ind true\n      | _ -> parse_flags pct_ind str_ind end_ind false\n\n  and parse_flags : type e f . int -> int -> int -> bool -> (_, _, e, f) fmt_ebb\n  =\n  fun pct_ind str_ind end_ind ign ->\n    let zero = ref false and minus = ref false\n    and plus = ref false and space = ref false\n    and hash = ref false in\n    let set_flag str_ind flag =\n      (* in legacy mode, duplicate flags are accepted *)\n      if !flag && not legacy_behavior then\n        failwith_message\n          \"invalid format %S: at character number %d, duplicate flag %C\"\n          str str_ind str.[str_ind];\n      flag := true;\n    in\n    let rec read_flags str_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      begin match str.[str_ind] with\n      | '0' -> set_flag str_ind zero;  read_flags (str_ind + 1)\n      | '-' -> set_flag str_ind minus; read_flags (str_ind + 1)\n      | '+' -> set_flag str_ind plus;  read_flags (str_ind + 1)\n      | '#' -> set_flag str_ind hash; read_flags (str_ind + 1)\n      | ' ' -> set_flag str_ind space; read_flags (str_ind + 1)\n      | _ ->\n        parse_padding pct_ind str_ind end_ind\n          !zero !minus !plus !hash !space ign\n      end\n    in\n    read_flags str_ind\n\n  (* Try to read a digital or a '*' padding. *)\n  and parse_padding : type e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool -> bool ->\n        (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind zero minus plus hash space ign ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let padty = match zero, minus with\n      | false, false -> Right\n      | false, true  -> Left\n      |  true, false -> Zeros\n      |  true, true  ->\n        if legacy_behavior then Left\n        else incompatible_flag pct_ind str_ind '-' \"0\" in\n    match str.[str_ind] with\n    | '0' .. '9' ->\n      let new_ind, width = parse_positive str_ind end_ind 0 in\n      parse_after_padding pct_ind new_ind end_ind minus plus hash space ign\n        (Lit_padding (padty, width))\n    | '*' ->\n      parse_after_padding pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign (Arg_padding padty)\n    | _ ->\n      begin match padty with\n      | Left  ->\n        if not legacy_behavior then\n          invalid_format_without (str_ind - 1) '-' \"padding\";\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      | Zeros ->\n         (* a '0' padding indication not followed by anything should\n           be interpreted as a Right padding of width 0. This is used\n           by scanning conversions %0s and %0c *)\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          (Lit_padding (Right, 0))\n      | Right ->\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      end\n\n  (* Is precision defined? *)\n  and parse_after_padding : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '.' ->\n      parse_precision pct_ind (str_ind + 1) end_ind minus plus hash space ign\n        pad\n    | symb ->\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        No_precision pad symb\n\n  (* Read the digital or '*' precision. *)\n  and parse_precision : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_literal minus str_ind =\n      let new_ind, prec = parse_positive str_ind end_ind 0 in\n      parse_after_precision pct_ind new_ind end_ind minus plus hash space ign\n        pad (Lit_precision prec) in\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_literal minus str_ind\n    | ('+' | '-') as symb when legacy_behavior ->\n      (* Legacy mode would accept and ignore '+' or '-' before the\n         integer describing the desired precision; note that this\n         cannot happen for padding width, as '+' and '-' already have\n         a semantics there.\n\n         That said, the idea (supported by this tweak) that width and\n         precision literals are \"integer literals\" in the OCaml sense is\n         still blatantly wrong, as 123_456 or 0xFF are rejected. *)\n      parse_literal (minus || symb = '-') (str_ind + 1)\n    | '*' ->\n      parse_after_precision pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign pad Arg_precision\n    | _ ->\n      if legacy_behavior then\n        (* note that legacy implementation did not ignore '.' without\n           a number (as it does for padding indications), but\n           interprets it as '.0' *)\n        parse_after_precision pct_ind str_ind end_ind minus plus hash space ign\n          pad (Lit_precision 0)\n      else\n        invalid_format_without (str_ind - 1) '.' \"precision\"\n\n  (* Try to read the conversion. *)\n  and parse_after_precision : type x y z t e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, y) padding -> (z, t) precision -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad prec ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_conv (type u) (type v) (padprec : (u, v) padding) =\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        prec padprec str.[str_ind] in\n    (* in legacy mode, some formats (%s and %S) accept a weird mix of\n       padding and precision, which is merged as a single padding\n       information. For example, in %.10s the precision is implicitly\n       understood as padding %10s, but the left-padding component may\n       be specified either as a left padding or a negative precision:\n       %-.3s and %.-3s are equivalent to %-3s *)\n    match pad with\n    | No_padding -> (\n      match minus, prec with\n        | _, No_precision -> parse_conv No_padding\n        | false, Lit_precision n -> parse_conv (Lit_padding (Right, n))\n        | true, Lit_precision n -> parse_conv (Lit_padding (Left, n))\n        | false, Arg_precision -> parse_conv (Arg_padding Right)\n        | true, Arg_precision -> parse_conv (Arg_padding Left)\n    )\n    | pad -> parse_conv pad\n\n  (* Case analysis on conversion. *)\n  and parse_conversion : type x y z t u v e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> (x, y) padding ->\n        (z, t) precision -> (u, v) padding -> char -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind plus hash space ign pad prec padprec symb ->\n    (* Flags used to check option usages/compatibilities. *)\n    let plus_used  = ref false and hash_used = ref false\n    and space_used = ref false and ign_used   = ref false\n    and pad_used   = ref false and prec_used  = ref false in\n\n    (* Access to options, update flags. *)\n    let get_plus    () = plus_used  := true; plus\n    and get_hash   () = hash_used := true; hash\n    and get_space   () = space_used := true; space\n    and get_ign     () = ign_used   := true; ign\n    and get_pad     () = pad_used   := true; pad\n    and get_prec    () = prec_used  := true; prec\n    and get_padprec () = pad_used   := true; padprec in\n\n    let get_int_pad () =\n      (* %5.3d is accepted and meaningful: pad to length 5 with\n         spaces, but first pad with zeros upto length 3 (0-padding\n         is the interpretation of \"precision\" for integer formats).\n\n         %05.3d is redundant: pad to length 5 *with zeros*, but\n         first pad with zeros... To add insult to the injury, the\n         legacy implementation ignores the 0-padding indication and\n         does the 5 padding with spaces instead. We reuse this\n         interpretation for compatibility, but statically reject this\n         format when the legacy mode is disabled, to protect strict\n         users from this corner case. *)\n       match get_pad (), get_prec () with\n         | pad, No_precision -> pad\n         | No_padding, _     -> No_padding\n         | Lit_padding (Zeros, n), _ ->\n           if legacy_behavior then Lit_padding (Right, n)\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Arg_padding Zeros, _ ->\n           if legacy_behavior then Arg_padding Right\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Lit_padding _ as pad, _ -> pad\n         | Arg_padding _ as pad, _ -> pad in\n\n    (* Check that padty <> Zeros. *)\n    let check_no_0 symb (type a) (type b) (pad : (a, b) padding) =\n      match pad with\n      | No_padding -> pad\n      | Lit_padding ((Left | Right), _) -> pad\n      | Arg_padding (Left | Right) -> pad\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Lit_padding (Right, width)\n        else incompatible_flag pct_ind str_ind symb \"0\"\n      | Arg_padding Zeros ->\n        if legacy_behavior then Arg_padding Right\n        else incompatible_flag pct_ind str_ind symb \"0\"\n    in\n\n    (* Get padding as a pad_option (see \"%_\", \"%{\", \"%(\" and \"%[\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let opt_of_pad c (type a) (type b) (pad : (a, b) padding) = match pad with\n      | No_padding -> None\n      | Lit_padding (Right, width) -> Some width\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'0'\"\n      | Lit_padding (Left, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'-'\"\n      | Arg_padding _ -> incompatible_flag pct_ind str_ind c \"'*'\"\n    in\n    let get_pad_opt c = opt_of_pad c (get_pad ()) in\n    let get_padprec_opt c = opt_of_pad c (get_padprec ()) in\n\n    (* Get precision as a prec_option (see \"%_f\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let get_prec_opt () = match get_prec () with\n      | No_precision       -> None\n      | Lit_precision ndec -> Some ndec\n      | Arg_precision      -> incompatible_flag pct_ind str_ind '_' \"'*'\"\n    in\n\n    let fmt_result = match symb with\n    | ',' ->\n      parse str_ind end_ind\n    | 'c' ->\n      let char_format fmt_rest = (* %c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_char, fmt_rest))\n        else Fmt_EBB (Char fmt_rest)\n      in\n      let scan_format fmt_rest = (* %0c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_scan_next_char, fmt_rest))\n        else Fmt_EBB (Scan_next_char fmt_rest)\n      in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      begin match get_pad_opt 'c' with\n        | None -> char_format fmt_rest\n        | Some 0 -> scan_format fmt_rest\n        | Some _n ->\n           if not legacy_behavior\n           then invalid_nonnull_char_width str_ind\n           else (* legacy ignores %c widths *) char_format fmt_rest\n      end\n    | 'C' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_caml_char,fmt_rest))\n      else Fmt_EBB (Caml_char fmt_rest)\n    | 's' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (String (pad', fmt_rest'))\n    | 'S' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_caml_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Caml_string (pad', fmt_rest'))\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' ->\n      let iconv = compute_int_conv pct_ind str_ind (get_plus ()) (get_hash ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_int (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int (iconv, pad', prec', fmt_rest'))\n    | 'N' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = Token_counter in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' | 'n' | 'L' when str_ind=end_ind || not (is_int_base str.[str_ind]) ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = counter_of_char symb in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int32 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int32 (iconv, pad', prec', fmt_rest'))\n    | 'n' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ())\n          (get_hash ()) (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_nativeint (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Nativeint (iconv, pad', prec', fmt_rest'))\n    | 'L' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int64 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int64 (iconv, pad', prec', fmt_rest'))\n    | 'f' | 'e' | 'E' | 'g' | 'G' | 'F' | 'h' | 'H' ->\n      let fconv = compute_float_conv pct_ind str_ind (get_plus ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_float (get_pad_opt '_', get_prec_opt ()) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Float (fconv, pad', prec', fmt_rest'))\n    | 'b' | 'B' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_bool (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Bool (pad', fmt_rest'))\n    | 'a' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Alpha fmt_rest)\n    | 't' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Theta fmt_rest)\n    | 'r' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_reader, fmt_rest))\n      else Fmt_EBB (Reader fmt_rest)\n    | '!' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Flush fmt_rest)\n    | ('%' | '@') as c ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Char_literal (c, fmt_rest))\n    | '{' ->\n      let sub_end = search_subformat_end str_ind end_ind '}' in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_arg (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_arg (get_pad_opt '{', sub_fmtty, fmt_rest))\n    | '(' ->\n      let sub_end = search_subformat_end str_ind end_ind ')' in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_subst (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_subst (get_pad_opt '(', sub_fmtty, fmt_rest))\n    | '[' ->\n      let next_ind, char_set = parse_char_set str_ind end_ind in\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_scan_char_set (get_pad_opt '_', char_set) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_char_set (get_pad_opt '[', char_set, fmt_rest))\n    | '-' | '+' | '#' | ' ' | '_' ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         flag %C is only allowed after the '%%', before padding and precision\"\n        str pct_ind symb\n    | _ ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         invalid conversion \\\"%%%c\\\"\" str (str_ind - 1) symb\n    in\n    (* Check for unused options, and reject them as incompatible.\n\n       Such checks need to be disabled in legacy mode, as the legacy\n       parser silently ignored incompatible flags. *)\n    if not legacy_behavior then begin\n    if not !plus_used && plus then\n      incompatible_flag pct_ind str_ind symb \"'+'\";\n    if not !hash_used && hash then\n      incompatible_flag pct_ind str_ind symb \"'#'\";\n    if not !space_used && space then\n      incompatible_flag pct_ind str_ind symb \"' '\";\n    if not !pad_used  && Padding_EBB pad <> Padding_EBB No_padding then\n      incompatible_flag pct_ind str_ind symb \"`padding'\";\n    if not !prec_used && Precision_EBB prec <> Precision_EBB No_precision then\n      incompatible_flag pct_ind str_ind (if ign then '_' else symb)\n        \"`precision'\";\n    if ign && plus then incompatible_flag pct_ind str_ind '_' \"'+'\";\n    end;\n    (* this last test must not be disabled in legacy mode,\n       as ignoring it would typically result in a different typing\n       than what the legacy parser used *)\n    if not !ign_used && ign then\n      begin match symb with\n        (* argument-less formats can safely be ignored in legacy mode *)\n        | ('@' | '%' | '!' | ',') when legacy_behavior -> ()\n        | _ ->\n          incompatible_flag pct_ind str_ind symb \"'_'\"\n      end;\n    fmt_result\n\n  (* Parse formatting informations (after '@'). *)\n  and parse_after_at : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    if str_ind = end_ind then Fmt_EBB (Char_literal ('@', End_of_format))\n    else\n      match str.[str_ind] with\n      | '[' ->\n        parse_tag false (str_ind + 1) end_ind\n      | ']' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_box, fmt_rest))\n      | '{' ->\n        parse_tag true (str_ind + 1) end_ind\n      | '}' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_tag, fmt_rest))\n      | ',' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@,\", 0, 0), fmt_rest))\n      | ' ' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@ \", 1, 0), fmt_rest))\n      | ';' ->\n        parse_good_break (str_ind + 1) end_ind\n      | '?' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (FFlush, fmt_rest))\n      | '\\n' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Force_newline, fmt_rest))\n      | '.' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Flush_newline, fmt_rest))\n      | '<' ->\n        parse_magic_size (str_ind + 1) end_ind\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_at, fmt_rest))\n      | '%' when str_ind + 1 < end_ind && str.[str_ind + 1] = '%' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 2) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_percent, fmt_rest))\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse str_ind end_ind in\n        Fmt_EBB (Char_literal ('@', fmt_rest))\n      | c ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Scan_indic c, fmt_rest))\n\n  and check_open_box : type a b c d e f . (a, b, c, d, e, f) fmt -> unit =\n  fun fmt -> match fmt with\n    | String_literal (str, End_of_format) -> (\n      try ignore (open_box_of_string str) with Failure _ ->\n        ((* Emit warning: invalid open box *))\n    )\n    | _ -> ()\n\n  (* Try to read the optional <name> after \"@{\" or \"@[\". *)\n  and parse_tag : type e f . bool -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun is_open_tag str_ind end_ind ->\n    try\n      if str_ind = end_ind then raise Not_found;\n      match str.[str_ind] with\n      | '<' ->\n        let ind = String.index_from str (str_ind + 1) '>' in\n        if ind >= end_ind then raise Not_found;\n        let sub_str = String.sub str str_ind (ind - str_ind + 1) in\n        let Fmt_EBB fmt_rest = parse (ind + 1) end_ind in\n        let Fmt_EBB sub_fmt = parse str_ind (ind + 1) in\n        let sub_format = Format (sub_fmt, sub_str) in\n        let formatting = if is_open_tag then Open_tag sub_format else (\n          check_open_box sub_fmt;\n          Open_box sub_format) in\n        Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n      | _ ->\n        raise Not_found\n    with Not_found ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let sub_format = Format (End_of_format, \"\") in\n      let formatting =\n        if is_open_tag then Open_tag sub_format else Open_box sub_format in\n      Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n\n  (* Try to read the optional <width offset> after \"@;\". *)\n  and parse_good_break : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    let next_ind, formatting_lit =\n      try\n        if str_ind = end_ind || str.[str_ind] <> '<' then raise Not_found;\n        let str_ind_1 = parse_spaces (str_ind + 1) end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' -> (\n          let str_ind_2, width = parse_integer str_ind_1 end_ind in\n            let str_ind_3 = parse_spaces str_ind_2 end_ind in\n            match str.[str_ind_3] with\n              | '>' ->\n                let s = String.sub str (str_ind-2) (str_ind_3-str_ind+3) in\n                str_ind_3 + 1, Break (s, width, 0)\n              | '0' .. '9' | '-' ->\n                let str_ind_4, offset = parse_integer str_ind_3 end_ind in\n                let str_ind_5 = parse_spaces str_ind_4 end_ind in\n                if str.[str_ind_5] <> '>' then raise Not_found;\n                let s = String.sub str (str_ind-2) (str_ind_5-str_ind+3) in\n                str_ind_5 + 1, Break (s, width, offset)\n              | _ -> raise Not_found\n        )\n        | _ -> raise Not_found\n      with Not_found | Failure _ ->\n        str_ind, Break (\"@;\", 1, 0)\n    in\n    let Fmt_EBB fmt_rest = parse next_ind end_ind in\n    Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n\n  (* Parse the size in a <n>. *)\n  and parse_magic_size : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    match\n      try\n        let str_ind_1 = parse_spaces str_ind end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' ->\n          let str_ind_2, size = parse_integer str_ind_1 end_ind in\n          let str_ind_3 = parse_spaces str_ind_2 end_ind in\n          if str.[str_ind_3] <> '>' then raise Not_found;\n          let s = String.sub str (str_ind - 2) (str_ind_3 - str_ind + 3) in\n          Some (str_ind_3 + 1, Magic_size (s, size))\n        | _ -> None\n      with Not_found | Failure _ ->\n        None\n    with\n    | Some (next_ind, formatting_lit) ->\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n    | None ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Formatting_lit (Scan_indic '<', fmt_rest))\n\n  (* Parse and construct a char set. *)\n  and parse_char_set str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n\n    let char_set = create_char_set () in\n    let add_char c =\n      add_in_char_set char_set c;\n    in\n    let add_range c c' =\n      for i = int_of_char c to int_of_char c' do\n        add_in_char_set char_set (char_of_int i);\n      done;\n    in\n\n    let fail_single_percent str_ind =\n      failwith_message\n        \"invalid format %S: '%%' alone is not accepted in character sets, \\\n         use %%%% instead at position %d.\" str str_ind\n    in\n\n    (* Parse the first character of a char set. *)\n    let rec parse_char_set_start str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      let c = str.[str_ind] in\n      parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Parse the content of a char set until the first ']'. *)\n    and parse_char_set_content str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        str_ind + 1\n      | '-' ->\n        add_char '-';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c ->\n        parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Test for range in char set. *)\n    and parse_char_set_after_char str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        str_ind + 1\n      | '-' ->\n        parse_char_set_after_minus (str_ind + 1) end_ind c\n      | ('%' | '@') as c' when c = '%' ->\n        add_char c';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c' ->\n        if c = '%' then fail_single_percent str_ind;\n        (* note that '@' alone is accepted, as done by the legacy\n           implementation; the documentation specifically requires %@\n           so we could warn on that *)\n        add_char c;\n        parse_char_set_after_char (str_ind + 1) end_ind c'\n\n    (* Manage range in char set (except if the '-' the last char before ']') *)\n    and parse_char_set_after_minus str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        add_char '-';\n        str_ind + 1\n      | '%' ->\n        if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n        begin match str.[str_ind + 1] with\n          | ('%' | '@') as c' ->\n            add_range c c';\n            parse_char_set_content (str_ind + 2) end_ind\n          | _ -> fail_single_percent str_ind\n        end\n      | c' ->\n        add_range c c';\n        parse_char_set_content (str_ind + 1) end_ind\n    in\n    let str_ind, reverse =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n        | '^' -> str_ind + 1, true\n        | _ -> str_ind, false in\n    let next_ind = parse_char_set_start str_ind end_ind in\n    let char_set = freeze_char_set char_set in\n    next_ind, (if reverse then rev_char_set char_set else char_set)\n\n  (* Consume all next spaces, raise an Failure if end_ind is reached. *)\n  and parse_spaces str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    if str.[str_ind] = ' ' then parse_spaces (str_ind + 1) end_ind else str_ind\n\n  (* Read a positive integer from the string, raise a Failure if end_ind is\n     reached. *)\n  and parse_positive str_ind end_ind acc =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' as c ->\n      let new_acc = acc * 10 + (int_of_char c - int_of_char '0') in\n      if new_acc > Sys.max_string_length then\n        failwith_message\n          \"invalid format %S: integer %d is greater than the limit %d\"\n          str new_acc Sys.max_string_length\n      else\n        parse_positive (str_ind + 1) end_ind new_acc\n    | _ -> str_ind, acc\n\n  (* Read a positive or negative integer from the string, raise a Failure\n     if end_ind is reached. *)\n  and parse_integer str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_positive str_ind end_ind 0\n    | '-' -> (\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind + 1] with\n      | '0' .. '9' ->\n        let next_ind, n = parse_positive (str_ind + 1) end_ind 0 in\n        next_ind, -n\n      | c ->\n        expected_character (str_ind + 1) \"digit\" c\n    )\n    | _ -> assert false\n\n  (* Add a literal to a format from a literal character sub-sequence. *)\n  and add_literal : type a d e f .\n      int -> int -> (a, _, _, d, e, f) fmt ->\n      (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind fmt -> match str_ind - lit_start with\n    | 0    -> Fmt_EBB fmt\n    | 1    -> Fmt_EBB (Char_literal (str.[lit_start], fmt))\n    | size -> Fmt_EBB (String_literal (String.sub str lit_start size, fmt))\n\n  (* Search the end of the current sub-format\n     (i.e. the corresponding \"%}\" or \"%)\") *)\n  and search_subformat_end str_ind end_ind c =\n    if str_ind = end_ind then\n      failwith_message\n        \"invalid format %S: unclosed sub-format, \\\n         expected \\\"%%%c\\\" at character number %d\" str c end_ind;\n    match str.[str_ind] with\n    | '%' ->\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      if str.[str_ind + 1] = c then (* End of format found *) str_ind else\n        begin match str.[str_ind + 1] with\n        | '_' ->\n          (* Search for \"%_(\" or \"%_{\". *)\n          if str_ind + 2 = end_ind then unexpected_end_of_format end_ind;\n          begin match str.[str_ind + 2] with\n          | '{' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind '}' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | '(' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind ')' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | _ -> search_subformat_end (str_ind + 3) end_ind c\n          end\n        | '{' ->\n          (* %{...%} sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind '}' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '(' ->\n          (* %(...%) sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind ')' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '}' ->\n          (* Error: %(...%}. *)\n          expected_character (str_ind + 1) \"character ')'\" '}'\n        | ')' ->\n          (* Error: %{...%). *)\n          expected_character (str_ind + 1) \"character '}'\" ')'\n        | _ ->\n          search_subformat_end (str_ind + 2) end_ind c\n        end\n    | _ -> search_subformat_end (str_ind + 1) end_ind c\n\n  (* Check if symb is a valid int conversion after \"%l\", \"%n\" or \"%L\" *)\n  and is_int_base symb = match symb with\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' -> true\n    | _ -> false\n\n  (* Convert a char (l, n or L) to its associated counter. *)\n  and counter_of_char symb = match symb with\n    | 'l' -> Line_counter  | 'n' -> Char_counter\n    | 'L' -> Token_counter | _ -> assert false\n\n  (* Convert (plus, symb) to its associated int_conv. *)\n  and compute_int_conv pct_ind str_ind plus hash space symb =\n    match plus, hash, space, symb with\n    | false, false, false, 'd' -> Int_d  | false, false, false, 'i' -> Int_i\n    | false, false,  true, 'd' -> Int_sd | false, false,  true, 'i' -> Int_si\n    |  true, false, false, 'd' -> Int_pd |  true, false, false, 'i' -> Int_pi\n    | false, false, false, 'x' -> Int_x  | false, false, false, 'X' -> Int_X\n    | false,  true, false, 'x' -> Int_Cx | false,  true, false, 'X' -> Int_CX\n    | false, false, false, 'o' -> Int_o\n    | false,  true, false, 'o' -> Int_Co\n    | false, false, false, 'u' -> Int_u\n    | _, true, _, 'x' when legacy_behavior -> Int_Cx\n    | _, true, _, 'X' when legacy_behavior -> Int_CX\n    | _, true, _, 'o' when legacy_behavior -> Int_Co\n    | _, true, _, ('d' | 'i' | 'u') ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus false space symb\n      else incompatible_flag pct_ind str_ind symb \"'#'\"\n    | true, _, true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false, _, true, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    | true, _, false, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind false hash space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, _, false, _ -> assert false\n\n  (* Convert (plus, symb) to its associated float_conv. *)\n  and compute_float_conv pct_ind str_ind plus space symb =\n  match plus, space, symb with\n    | false, false, 'f' -> Float_f  | false, false, 'e' -> Float_e\n    | false,  true, 'f' -> Float_sf | false,  true, 'e' -> Float_se\n    |  true, false, 'f' -> Float_pf |  true, false, 'e' -> Float_pe\n    | false, false, 'E' -> Float_E  | false, false, 'g' -> Float_g\n    | false,  true, 'E' -> Float_sE | false,  true, 'g' -> Float_sg\n    |  true, false, 'E' -> Float_pE |  true, false, 'g' -> Float_pg\n    | false, false, 'G' -> Float_G\n    | false,  true, 'G' -> Float_sG\n    |  true, false, 'G' -> Float_pG\n    | false, false, 'h' -> Float_h\n    | false,  true, 'h' -> Float_sh\n    |  true, false, 'h' -> Float_ph\n    | false, false, 'H' -> Float_H\n    | false,  true, 'H' -> Float_sH\n    |  true, false, 'H' -> Float_pH\n    | false, false, 'F' -> Float_F\n    |  true,  true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_float_conv pct_ind str_ind plus false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false,  true, _ ->\n      if legacy_behavior then (* ignore *)\n        compute_float_conv pct_ind str_ind plus false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    |  true, false, _ ->\n      if legacy_behavior then (* ignore *)\n        compute_float_conv pct_ind str_ind false space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, false, _ -> assert false\n\n  (* Raise [Failure] with a friendly error message about incompatible options.*)\n  and incompatible_flag : type a . int -> int -> char -> string -> a =\n    fun pct_ind str_ind symb option ->\n      let subfmt = String.sub str pct_ind (str_ind - pct_ind) in\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         %s is incompatible with '%c' in sub-format %S\"\n        str pct_ind option symb subfmt\n\n  in parse 0 (String.length str)\n\n(******************************************************************************)\n                  (* Guarded string to format conversions *)\n\n(* Convert a string to a format according to an fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_fmtty str fmtty =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt fmtty, str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\"\n      str (string_of_fmtty fmtty)\n\n(* Convert a string to a format compatible with an other format. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_format str (Format (fmt', str')) =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt (fmtty_of_fmt fmt'), str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\" str str'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen Printf\n\nlet printers = ref []\n\nlet locfmt = format_of_string \"File \\\"%s\\\", line %d, characters %d-%d: %s\"\n\nlet field x i =\n  let f = Obj.field x i in\n  if not (Obj.is_block f) then\n    sprintf \"%d\" (Obj.magic f : int)           (* can also be a char *)\n  else if Obj.tag f = Obj.string_tag then\n    sprintf \"%S\" (Obj.magic f : string)\n  else if Obj.tag f = Obj.double_tag then\n    string_of_float (Obj.magic f : float)\n  else\n    \"_\"\n\nlet rec other_fields x i =\n  if i >= Obj.size x then \"\"\n  else sprintf \", %s%s\" (field x i) (other_fields x (i+1))\n\nlet fields x =\n  match Obj.size x with\n  | 0 -> \"\"\n  | 1 -> \"\"\n  | 2 -> sprintf \"(%s)\" (field x 1)\n  | _ -> sprintf \"(%s%s)\" (field x 1) (other_fields x 2)\n\nlet to_string x =\n  let rec conv = function\n    | hd :: tl ->\n        (match try hd x with _ -> None with\n        | Some s -> s\n        | None -> conv tl)\n    | [] ->\n        match x with\n        | Out_of_memory -> \"Out of memory\"\n        | Stack_overflow -> \"Stack overflow\"\n        | Match_failure(file, line, char) ->\n            sprintf locfmt file line char (char+5) \"Pattern matching failed\"\n        | Assert_failure(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Assertion failed\"\n        | Undefined_recursive_module(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Undefined recursive module\"\n        | _ ->\n            let x = Obj.repr x in\n            if Obj.tag x <> 0 then\n              (Obj.magic (Obj.field x 0) : string)\n            else\n              let constructor =\n                (Obj.magic (Obj.field (Obj.field x 0) 0) : string) in\n              constructor ^ (fields x) in\n  conv !printers\n\nlet print fct arg =\n  try\n    fct arg\n  with x ->\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    flush stderr;\n    raise x\n\nlet catch fct arg =\n  try\n    fct arg\n  with x ->\n    flush stdout;\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    exit 2\n\ntype raw_backtrace_slot\ntype raw_backtrace\n\nexternal get_raw_backtrace:\n  unit -> raw_backtrace = \"caml_get_exception_raw_backtrace\"\n\nexternal raise_with_backtrace: exn -> raw_backtrace -> 'a\n  = \"%raise_with_backtrace\"\n\ntype backtrace_slot =\n  | Known_location of {\n      is_raise    : bool;\n      filename    : string;\n      line_number : int;\n      start_char  : int;\n      end_char    : int;\n      is_inline   : bool;\n    }\n  | Unknown_location of {\n      is_raise : bool\n    }\n\n(* to avoid warning *)\nlet _ = [Known_location { is_raise = false; filename = \"\";\n                          line_number = 0; start_char = 0; end_char = 0;\n                          is_inline = false };\n         Unknown_location { is_raise = false }]\n\nexternal convert_raw_backtrace_slot:\n  raw_backtrace_slot -> backtrace_slot = \"caml_convert_raw_backtrace_slot\"\n\nexternal convert_raw_backtrace:\n  raw_backtrace -> backtrace_slot array = \"caml_convert_raw_backtrace\"\n\nlet convert_raw_backtrace bt =\n  try Some (convert_raw_backtrace bt)\n  with Failure _ -> None\n\nlet format_backtrace_slot pos slot =\n  let info is_raise =\n    if is_raise then\n      if pos = 0 then \"Raised at\" else \"Re-raised at\"\n    else\n      if pos = 0 then \"Raised by primitive operation at\" else \"Called from\"\n  in\n  match slot with\n  | Unknown_location l ->\n      if l.is_raise then\n        (* compiler-inserted re-raise, skipped *) None\n      else\n        Some (sprintf \"%s unknown location\" (info false))\n  | Known_location l ->\n      Some (sprintf \"%s file \\\"%s\\\"%s, line %d, characters %d-%d\"\n              (info l.is_raise) l.filename\n              (if l.is_inline then \" (inlined)\" else \"\")\n              l.line_number l.start_char l.end_char)\n\nlet print_exception_backtrace outchan backtrace =\n  match backtrace with\n  | None ->\n      fprintf outchan\n        \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> fprintf outchan \"%s\\n\" str\n      done\n\nlet print_raw_backtrace outchan raw_backtrace =\n  print_exception_backtrace outchan (convert_raw_backtrace raw_backtrace)\n\n(* confusingly named: prints the global current backtrace *)\nlet print_backtrace outchan =\n  print_raw_backtrace outchan (get_raw_backtrace ())\n\nlet backtrace_to_string backtrace =\n  match backtrace with\n  | None ->\n     \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      let b = Buffer.create 1024 in\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> bprintf b \"%s\\n\" str\n      done;\n      Buffer.contents b\n\nlet raw_backtrace_to_string raw_backtrace =\n  backtrace_to_string (convert_raw_backtrace raw_backtrace)\n\nlet backtrace_slot_is_raise = function\n  | Known_location l -> l.is_raise\n  | Unknown_location l -> l.is_raise\n\nlet backtrace_slot_is_inline = function\n  | Known_location l -> l.is_inline\n  | Unknown_location _ -> false\n\ntype location = {\n  filename : string;\n  line_number : int;\n  start_char : int;\n  end_char : int;\n}\n\nlet backtrace_slot_location = function\n  | Unknown_location _ -> None\n  | Known_location l ->\n    Some {\n      filename    = l.filename;\n      line_number = l.line_number;\n      start_char  = l.start_char;\n      end_char    = l.end_char;\n    }\n\nlet backtrace_slots raw_backtrace =\n  (* The documentation of this function guarantees that Some is\n     returned only if a part of the trace is usable. This gives us\n     a bit more work than just convert_raw_backtrace, but it makes the\n     API more user-friendly -- otherwise most users would have to\n     reimplement the \"Program not linked with -g, sorry\" logic\n     themselves. *)\n  match convert_raw_backtrace raw_backtrace with\n    | None -> None\n    | Some backtrace ->\n      let usable_slot = function\n        | Unknown_location _ -> false\n        | Known_location _ -> true in\n      let rec exists_usable = function\n        | (-1) -> false\n        | i -> usable_slot backtrace.(i) || exists_usable (i - 1) in\n      if exists_usable (Array.length backtrace - 1)\n      then Some backtrace\n      else None\n\nmodule Slot = struct\n  type t = backtrace_slot\n  let format = format_backtrace_slot\n  let is_raise = backtrace_slot_is_raise\n  let is_inline = backtrace_slot_is_inline\n  let location = backtrace_slot_location\nend\n\nexternal raw_backtrace_length :\n  raw_backtrace -> int = \"caml_raw_backtrace_length\" [@@noalloc]\n\nexternal get_raw_backtrace_slot :\n  raw_backtrace -> int -> raw_backtrace_slot = \"caml_raw_backtrace_slot\"\n\nexternal get_raw_backtrace_next_slot :\n  raw_backtrace_slot -> raw_backtrace_slot option\n  = \"caml_raw_backtrace_next_slot\"\n\n(* confusingly named:\n   returns the *string* corresponding to the global current backtrace *)\nlet get_backtrace () = raw_backtrace_to_string (get_raw_backtrace ())\n\nexternal record_backtrace: bool -> unit = \"caml_record_backtrace\"\nexternal backtrace_status: unit -> bool = \"caml_backtrace_status\"\n\nlet register_printer fn =\n  printers := fn :: !printers\n\nexternal get_callstack: int -> raw_backtrace = \"caml_get_current_callstack\"\n\nlet exn_slot x =\n  let x = Obj.repr x in\n  if Obj.tag x = 0 then Obj.field x 0 else x\n\nlet exn_slot_id x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 1) : int)\n\nlet exn_slot_name x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 0) : string)\n\n\nlet uncaught_exception_handler = ref None\n\nlet set_uncaught_exception_handler fn = uncaught_exception_handler := Some fn\n\nlet empty_backtrace : raw_backtrace = Obj.obj (Obj.new_block Obj.abstract_tag 0)\n\nlet try_get_raw_backtrace () =\n  try\n    get_raw_backtrace ()\n  with _ (* Out_of_memory? *) ->\n    empty_backtrace\n\nlet handle_uncaught_exception' exn debugger_in_use =\n  try\n    (* Get the backtrace now, in case one of the [at_exit] function\n       destroys it. *)\n    let raw_backtrace =\n      if debugger_in_use (* Same test as in [byterun/printexc.c] *) then\n        empty_backtrace\n      else\n        try_get_raw_backtrace ()\n    in\n    (try Pervasives.do_at_exit () with _ -> ());\n    match !uncaught_exception_handler with\n    | None ->\n        eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n        print_raw_backtrace stderr raw_backtrace;\n        flush stderr\n    | Some handler ->\n        try\n          handler exn raw_backtrace\n        with exn' ->\n          let raw_backtrace' = try_get_raw_backtrace () in\n          eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n          print_raw_backtrace stderr raw_backtrace;\n          eprintf \"Fatal error in uncaught exception handler: exception %s\\n\"\n            (to_string exn');\n          print_raw_backtrace stderr raw_backtrace';\n          flush stderr\n  with\n    | Out_of_memory ->\n        prerr_endline\n          \"Fatal error: out of memory in uncaught exception handler\"\n\n(* This function is called by [caml_fatal_uncaught_exception] in\n   [byterun/printexc.c] which expects no exception is raised. *)\nlet handle_uncaught_exception exn debugger_in_use =\n  try\n    handle_uncaught_exception' exn debugger_in_use\n  with _ ->\n    (* There is not much we can do at this point *)\n    ()\n\nexternal register_named_value : string -> 'a -> unit\n  = \"caml_register_named_value\"\n\nlet () =\n  register_named_value \"Printexc.handle_uncaught_exception\"\n    handle_uncaught_exception\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*               Damien Doligez, projet Para, INRIA Rocquencourt          *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Pseudo-random number generator\n   This is a lagged-Fibonacci F(55, 24, +) with a modified addition\n   function to enhance the mixing of bits.\n   If we use normal addition, the low-order bit fails tests 1 and 7\n   of the Diehard test suite, and bits 1 and 2 also fail test 7.\n   If we use multiplication as suggested by Marsaglia, it doesn't fare\n   much better.\n   By mixing the bits of one of the numbers before addition (XOR the\n   5 high-order bits into the low-order bits), we get a generator that\n   passes all the Diehard tests.\n*)\n\nexternal random_seed: unit -> int array = \"caml_sys_random_seed\"\n\nmodule State = struct\n\n  type t = { st : int array; mutable idx : int }\n\n  let new_state () = { st = Array.make 55 0; idx = 0 }\n  let assign st1 st2 =\n    Array.blit st2.st 0 st1.st 0 55;\n    st1.idx <- st2.idx\n\n\n  let full_init s seed =\n    let combine accu x = Digest.string (accu ^ string_of_int x) in\n    let extract d =\n      Char.code d.[0] + (Char.code d.[1] lsl 8) + (Char.code d.[2] lsl 16)\n      + (Char.code d.[3] lsl 24)\n    in\n    let seed = if Array.length seed = 0 then [| 0 |] else seed in\n    let l = Array.length seed in\n    for i = 0 to 54 do\n      s.st.(i) <- i;\n    done;\n    let accu = ref \"x\" in\n    for i = 0 to 54 + max 55 l do\n      let j = i mod 55 in\n      let k = i mod l in\n      accu := combine !accu seed.(k);\n      s.st.(j) <- (s.st.(j) lxor extract !accu) land 0x3FFFFFFF;  (* PR#5575 *)\n    done;\n    s.idx <- 0\n\n\n  let make seed =\n    let result = new_state () in\n    full_init result seed;\n    result\n\n\n  let make_self_init () = make (random_seed ())\n\n  let copy s =\n    let result = new_state () in\n    assign result s;\n    result\n\n\n  (* Returns 30 random bits as an integer 0 <= x < 1073741824 *)\n  let bits s =\n    s.idx <- (s.idx + 1) mod 55;\n    let curval = s.st.(s.idx) in\n    let newval = s.st.((s.idx + 24) mod 55)\n                 + (curval lxor ((curval lsr 25) land 0x1F)) in\n    let newval30 = newval land 0x3FFFFFFF in  (* PR#5575 *)\n    s.st.(s.idx) <- newval30;\n    newval30\n\n\n  let rec intaux s n =\n    let r = bits s in\n    let v = r mod n in\n    if r - v > 0x3FFFFFFF - n + 1 then intaux s n else v\n\n  let int s bound =\n    if bound > 0x3FFFFFFF || bound <= 0\n    then invalid_arg \"Random.int\"\n    else intaux s bound\n\n\n  let rec int32aux s n =\n    let b1 = Int32.of_int (bits s) in\n    let b2 = Int32.shift_left (Int32.of_int (bits s land 1)) 30 in\n    let r = Int32.logor b1 b2 in\n    let v = Int32.rem r n in\n    if Int32.sub r v > Int32.add (Int32.sub Int32.max_int n) 1l\n    then int32aux s n\n    else v\n\n  let int32 s bound =\n    if bound <= 0l\n    then invalid_arg \"Random.int32\"\n    else int32aux s bound\n\n\n  let rec int64aux s n =\n    let b1 = Int64.of_int (bits s) in\n    let b2 = Int64.shift_left (Int64.of_int (bits s)) 30 in\n    let b3 = Int64.shift_left (Int64.of_int (bits s land 7)) 60 in\n    let r = Int64.logor b1 (Int64.logor b2 b3) in\n    let v = Int64.rem r n in\n    if Int64.sub r v > Int64.add (Int64.sub Int64.max_int n) 1L\n    then int64aux s n\n    else v\n\n  let int64 s bound =\n    if bound <= 0L\n    then invalid_arg \"Random.int64\"\n    else int64aux s bound\n\n\n  let nativeint =\n    if Nativeint.size = 32\n    then fun s bound -> Nativeint.of_int32 (int32 s (Nativeint.to_int32 bound))\n    else fun s bound -> Int64.to_nativeint (int64 s (Int64.of_nativeint bound))\n\n\n  (* Returns a float 0 <= x <= 1 with at most 60 bits of precision. *)\n  let rawfloat s =\n    let scale = 1073741824.0  (* 2^30 *)\n    and r1 = Pervasives.float (bits s)\n    and r2 = Pervasives.float (bits s)\n    in (r1 /. scale +. r2) /. scale\n\n\n  let float s bound = rawfloat s *. bound\n\n  let bool s = (bits s land 1 = 0)\n\nend\n\n(* This is the state you get with [init 27182818] and then applying\n   the \"land 0x3FFFFFFF\" filter to them.  See #5575, #5793, #5977. *)\nlet default = {\n  State.st = [|\n      0x3ae2522b; 0x1d8d4634; 0x15b4fad0; 0x18b14ace; 0x12f8a3c4; 0x3b086c47;\n      0x16d467d6; 0x101d91c7; 0x321df177; 0x0176c193; 0x1ff72bf1; 0x1e889109;\n      0x0b464b18; 0x2b86b97c; 0x0891da48; 0x03137463; 0x085ac5a1; 0x15d61f2f;\n      0x3bced359; 0x29c1c132; 0x3a86766e; 0x366d8c86; 0x1f5b6222; 0x3ce1b59f;\n      0x2ebf78e1; 0x27cd1b86; 0x258f3dc3; 0x389a8194; 0x02e4c44c; 0x18c43f7d;\n      0x0f6e534f; 0x1e7df359; 0x055d0b7e; 0x10e84e7e; 0x126198e4; 0x0e7722cb;\n      0x1cbede28; 0x3391b964; 0x3d40e92a; 0x0c59933d; 0x0b8cd0b7; 0x24efff1c;\n      0x2803fdaa; 0x08ebc72e; 0x0f522e32; 0x05398edc; 0x2144a04c; 0x0aef3cbd;\n      0x01ad4719; 0x35b93cd6; 0x2a559d4f; 0x1e6fd768; 0x26e27f36; 0x186f18c3;\n      0x2fbf967a;\n    |];\n  State.idx = 0;\n}\n\nlet bits () = State.bits default\nlet int bound = State.int default bound\nlet int32 bound = State.int32 default bound\nlet nativeint bound = State.nativeint default bound\nlet int64 bound = State.int64 default bound\nlet float scale = State.float default scale\nlet bool () = State.bool default\n\nlet full_init seed = State.full_init default seed\nlet init seed = State.full_init default [| seed |]\nlet self_init () = full_init (random_seed())\n\n(* Manipulating the current state. *)\n\nlet get_state () = State.copy default\nlet set_state s = State.assign default s\n\n(********************\n\n(* Test functions.  Not included in the library.\n   The [chisquare] function should be called with n > 10r.\n   It returns a triple (low, actual, high).\n   If low <= actual <= high, the [g] function passed the test,\n   otherwise it failed.\n\n  Some results:\n\ninit 27182818; chisquare int 100000 1000\ninit 27182818; chisquare int 100000 100\ninit 27182818; chisquare int 100000 5000\ninit 27182818; chisquare int 1000000 1000\ninit 27182818; chisquare int 100000 1024\ninit 299792643; chisquare int 100000 1024\ninit 14142136; chisquare int 100000 1024\ninit 27182818; init_diff 1024; chisquare diff 100000 1024\ninit 27182818; init_diff 100; chisquare diff 100000 100\ninit 27182818; init_diff2 1024; chisquare diff2 100000 1024\ninit 27182818; init_diff2 100; chisquare diff2 100000 100\ninit 14142136; init_diff2 100; chisquare diff2 100000 100\ninit 299792643; init_diff2 100; chisquare diff2 100000 100\n- : float * float * float = (936.754446796632465, 997.5, 1063.24555320336754)\n# - : float * float * float = (80., 89.7400000000052387, 120.)\n# - : float * float * float = (4858.57864376269, 5045.5, 5141.42135623731)\n# - : float * float * float =\n(936.754446796632465, 944.805999999982305, 1063.24555320336754)\n# - : float * float * float = (960., 1019.19744000000355, 1088.)\n# - : float * float * float = (960., 1059.31776000000536, 1088.)\n# - : float * float * float = (960., 1039.98463999999512, 1088.)\n# - : float * float * float = (960., 1054.38207999999577, 1088.)\n# - : float * float * float = (80., 90.096000000005, 120.)\n# - : float * float * float = (960., 1076.78720000000612, 1088.)\n# - : float * float * float = (80., 85.1760000000067521, 120.)\n# - : float * float * float = (80., 85.2160000000003492, 120.)\n# - : float * float * float = (80., 80.6220000000030268, 120.)\n\n*)\n\n(* Return the sum of the squares of v[i0,i1[ *)\nlet rec sumsq v i0 i1 =\n  if i0 >= i1 then 0.0\n  else if i1 = i0 + 1 then Pervasives.float v.(i0) *. Pervasives.float v.(i0)\n  else sumsq v i0 ((i0+i1)/2) +. sumsq v ((i0+i1)/2) i1\n\n\nlet chisquare g n r =\n  if n <= 10 * r then invalid_arg \"chisquare\";\n  let f = Array.make r 0 in\n  for i = 1 to n do\n    let t = g r in\n    f.(t) <- f.(t) + 1\n  done;\n  let t = sumsq f 0 r\n  and r = Pervasives.float r\n  and n = Pervasives.float n in\n  let sr = 2.0 *. sqrt r in\n  (r -. sr,   (r *. t /. n) -. n,   r +. sr)\n\n\n(* This is to test for linear dependencies between successive random numbers.\n*)\nlet st = ref 0\nlet init_diff r = st := int r\nlet diff r =\n  let x1 = !st\n  and x2 = int r\n  in\n  st := x2;\n  if x1 >= x2 then\n    x1 - x2\n  else\n    r + x1 - x2\n\n\nlet st1 = ref 0\nand st2 = ref 0\n\n\n(* This is to test for quadratic dependencies between successive random\n   numbers.\n*)\nlet init_diff2 r = st1 := int r; st2 := int r\nlet diff2 r =\n  let x1 = !st1\n  and x2 = !st2\n  and x3 = int r\n  in\n  st1 := x2;\n  st2 := x3;\n  (x3 - x2 - x2 + x1 + 2*r) mod r\n\n\n********************)\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Hash tables *)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nexternal old_hash_param :\n  int -> int -> 'a -> int = \"caml_hash_univ_param\" [@@noalloc]\n\nlet hash x = seeded_hash_param 10 100 0 x\nlet hash_param n1 n2 x = seeded_hash_param n1 n2 0 x\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\n\n(* We do dynamic hashing, and resize the table and rehash the elements\n   when buckets become too long. *)\n\ntype ('a, 'b) t =\n  { mutable size: int;                        (* number of entries *)\n    mutable data: ('a, 'b) bucketlist array;  (* the buckets *)\n    mutable seed: int;                        (* for randomization *)\n    mutable initial_size: int;                (* initial array size *)\n  }\n\nand ('a, 'b) bucketlist =\n    Empty\n  | Cons of { mutable key: 'a;\n              mutable data: 'b;\n              mutable next: ('a, 'b) bucketlist }\n\n(* The sign of initial_size encodes the fact that a traversal is\n   ongoing or not.\n\n   This disables the efficient in place implementation of resizing.\n*)\n\nlet ongoing_traversal h =\n  Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n  || h.initial_size < 0\n\nlet flip_ongoing_traversal h =\n  h.initial_size <- - h.initial_size\n\n(* To pick random seeds if requested *)\n\nlet randomized_default =\n  let params =\n    try Sys.getenv \"OCAMLRUNPARAM\" with Not_found ->\n    try Sys.getenv \"CAMLRUNPARAM\" with Not_found -> \"\" in\n  String.contains params 'R'\n\nlet randomized = ref randomized_default\n\nlet randomize () = randomized := true\nlet is_randomized () = !randomized\n\nlet prng = lazy (Random.State.make_self_init())\n\n(* Creating a fresh, empty table *)\n\nlet rec power_2_above x n =\n  if x >= n then x\n  else if x * 2 > Sys.max_array_length then x\n  else power_2_above (x * 2) n\n\nlet create ?(random = !randomized) initial_size =\n  let s = power_2_above 16 initial_size in\n  let seed = if random then Random.State.bits (Lazy.force prng) else 0 in\n  { initial_size = s; size = 0; seed = seed; data = Array.make s Empty }\n\nlet clear h =\n  h.size <- 0;\n  let len = Array.length h.data in\n  for i = 0 to len - 1 do\n    h.data.(i) <- Empty\n  done\n\nlet reset h =\n  let len = Array.length h.data in\n  if Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n    || len = abs h.initial_size then\n    clear h\n  else begin\n    h.size <- 0;\n    h.data <- Array.make (abs h.initial_size) Empty\n  end\n\nlet copy_bucketlist = function\n  | Empty -> Empty\n  | Cons {key; data; next} ->\n      let rec loop prec = function\n        | Empty -> ()\n        | Cons {key; data; next} ->\n            let r = Cons {key; data; next} in\n            begin match prec with\n            | Empty -> assert false\n            | Cons prec ->  prec.next <- r\n            end;\n            loop r next\n      in\n      let r = Cons {key; data; next} in\n      loop r next;\n      r\n\nlet copy h = { h with data = Array.map copy_bucketlist h.data }\n\nlet length h = h.size\n\nlet resize indexfun h =\n  let odata = h.data in\n  let osize = Array.length odata in\n  let nsize = osize * 2 in\n  if nsize < Sys.max_array_length then begin\n    let ndata = Array.make nsize Empty in\n    let ndata_tail = Array.make nsize Empty in\n    let inplace = not (ongoing_traversal h) in\n    h.data <- ndata;          (* so that indexfun sees the new bucket count *)\n    let rec insert_bucket = function\n      | Empty -> ()\n      | Cons {key; data; next} as cell ->\n          let cell =\n            if inplace then cell\n            else Cons {key; data; next = Empty}\n          in\n          let nidx = indexfun h key in\n          begin match ndata_tail.(nidx) with\n          | Empty -> ndata.(nidx) <- cell;\n          | Cons tail -> tail.next <- cell;\n          end;\n          ndata_tail.(nidx) <- cell;\n          insert_bucket next\n    in\n    for i = 0 to osize - 1 do\n      insert_bucket odata.(i)\n    done;\n    if inplace then\n      for i = 0 to nsize - 1 do\n        match ndata_tail.(i) with\n        | Empty -> ()\n        | Cons tail -> tail.next <- Empty\n      done;\n  end\n\nlet key_index h key =\n  (* compatibility with old hash tables *)\n  if Obj.size (Obj.repr h) >= 3\n  then (seeded_hash_param 10 100 h.seed key) land (Array.length h.data - 1)\n  else (old_hash_param 10 100 key) mod (Array.length h.data)\n\nlet add h key data =\n  let i = key_index h key in\n  let bucket = Cons{key; data; next=h.data.(i)} in\n  h.data.(i) <- bucket;\n  h.size <- h.size + 1;\n  if h.size > Array.length h.data lsl 1 then resize key_index h\n\nlet rec remove_bucket h i key prec = function\n  | Empty ->\n      ()\n  | (Cons {key=k; next}) as c ->\n      if compare k key = 0\n      then begin\n        h.size <- h.size - 1;\n        match prec with\n        | Empty -> h.data.(i) <- next\n        | Cons c -> c.next <- next\n      end\n      else remove_bucket h i key c next\n\nlet remove h key =\n  let i = key_index h key in\n  remove_bucket h i key Empty h.data.(i)\n\nlet rec find_rec key = function\n  | Empty ->\n      raise Not_found\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then data else find_rec key next\n\nlet find h key =\n  match h.data.(key_index h key) with\n  | Empty -> raise Not_found\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then d1 else\n      match next1 with\n      | Empty -> raise Not_found\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then d2 else\n          match next2 with\n          | Empty -> raise Not_found\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then d3 else find_rec key next3\n\nlet rec find_rec_opt key = function\n  | Empty ->\n      None\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then Some data else find_rec_opt key next\n\nlet find_opt h key =\n  match h.data.(key_index h key) with\n  | Empty -> None\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then Some d1 else\n      match next1 with\n      | Empty -> None\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then Some d2 else\n          match next2 with\n          | Empty -> None\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then Some d3 else find_rec_opt key next3\n\nlet find_all h key =\n  let rec find_in_bucket = function\n  | Empty ->\n      []\n  | Cons{key=k; data; next} ->\n      if compare k key = 0\n      then data :: find_in_bucket next\n      else find_in_bucket next in\n  find_in_bucket h.data.(key_index h key)\n\nlet rec replace_bucket key data = function\n  | Empty ->\n      true\n  | Cons ({key=k; next} as slot) ->\n      if compare k key = 0\n      then (slot.key <- key; slot.data <- data; false)\n      else replace_bucket key data next\n\nlet replace h key data =\n  let i = key_index h key in\n  let l = h.data.(i) in\n  if replace_bucket key data l then begin\n    h.data.(i) <- Cons{key; data; next=l};\n    h.size <- h.size + 1;\n    if h.size > Array.length h.data lsl 1 then resize key_index h\n  end\n\nlet mem h key =\n  let rec mem_in_bucket = function\n  | Empty ->\n      false\n  | Cons{key=k; next} ->\n      compare k key = 0 || mem_in_bucket next in\n  mem_in_bucket h.data.(key_index h key)\n\nlet iter f h =\n  let rec do_bucket = function\n    | Empty ->\n        ()\n    | Cons{key; data; next} ->\n        f key data; do_bucket next in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    for i = 0 to Array.length d - 1 do\n      do_bucket d.(i)\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet rec filter_map_inplace_bucket f h i prec = function\n  | Empty ->\n      begin match prec with\n      | Empty -> h.data.(i) <- Empty\n      | Cons c -> c.next <- Empty\n      end\n  | (Cons ({key; data; next} as c)) as slot ->\n      begin match f key data with\n      | None ->\n          h.size <- h.size - 1;\n          filter_map_inplace_bucket f h i prec next\n      | Some data ->\n          begin match prec with\n          | Empty -> h.data.(i) <- slot\n          | Cons c -> c.next <- slot\n          end;\n          c.data <- data;\n          filter_map_inplace_bucket f h i slot next\n      end\n\nlet filter_map_inplace f h =\n  let d = h.data in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    for i = 0 to Array.length d - 1 do\n      filter_map_inplace_bucket f h i Empty h.data.(i)\n    done\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet fold f h init =\n  let rec do_bucket b accu =\n    match b with\n      Empty ->\n        accu\n    | Cons{key; data; next} ->\n        do_bucket next (f key data accu) in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    let accu = ref init in\n    for i = 0 to Array.length d - 1 do\n      accu := do_bucket d.(i) !accu\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n    !accu\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\ntype statistics = {\n  num_bindings: int;\n  num_buckets: int;\n  max_bucket_length: int;\n  bucket_histogram: int array\n}\n\nlet rec bucket_length accu = function\n  | Empty -> accu\n  | Cons{next} -> bucket_length (accu + 1) next\n\nlet stats h =\n  let mbl =\n    Array.fold_left (fun m b -> max m (bucket_length 0 b)) 0 h.data in\n  let histo = Array.make (mbl + 1) 0 in\n  Array.iter\n    (fun b ->\n      let l = bucket_length 0 b in\n      histo.(l) <- histo.(l) + 1)\n    h.data;\n  { num_bindings = h.size;\n    num_buckets = Array.length h.data;\n    max_bucket_length = mbl;\n    bucket_histogram = histo }\n\n(* Functorial interface *)\n\nmodule type HashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: t -> int\n  end\n\nmodule type SeededHashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: int -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type 'a t\n    val create: int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy: 'a t -> 'a t\n    val add: 'a t -> key -> 'a -> unit\n    val remove: 'a t -> key -> unit\n    val find: 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all: 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length: 'a t -> int\n    val stats: 'a t -> statistics\n  end\n\nmodule type SeededS =\n  sig\n    type key\n    type 'a t\n    val create : ?random:bool -> int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy : 'a t -> 'a t\n    val add : 'a t -> key -> 'a -> unit\n    val remove : 'a t -> key -> unit\n    val find : 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all : 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter : (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length : 'a t -> int\n    val stats: 'a t -> statistics\n  end\n\nmodule MakeSeeded(H: SeededHashedType): (SeededS with type key = H.t) =\n  struct\n    type key = H.t\n    type 'a hashtbl = (key, 'a) t\n    type 'a t = 'a hashtbl\n    let create = create\n    let clear = clear\n    let reset = reset\n    let copy = copy\n\n    let key_index h key =\n      (H.hash h.seed key) land (Array.length h.data - 1)\n\n    let add h key data =\n      let i = key_index h key in\n      let bucket = Cons{key; data; next=h.data.(i)} in\n      h.data.(i) <- bucket;\n      h.size <- h.size + 1;\n      if h.size > Array.length h.data lsl 1 then resize key_index h\n\n    let rec remove_bucket h i key prec = function\n      | Empty ->\n          ()\n      | (Cons {key=k; next}) as c ->\n          if H.equal k key\n          then begin\n            h.size <- h.size - 1;\n            match prec with\n            | Empty -> h.data.(i) <- next\n            | Cons c -> c.next <- next\n          end\n          else remove_bucket h i key c next\n\n    let remove h key =\n      let i = key_index h key in\n      remove_bucket h i key Empty h.data.(i)\n\n    let rec find_rec key = function\n      | Empty ->\n          raise Not_found\n      | Cons{key=k; data; next} ->\n          if H.equal key k then data else find_rec key next\n\n    let find h key =\n      match h.data.(key_index h key) with\n      | Empty -> raise Not_found\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then d1 else\n          match next1 with\n          | Empty -> raise Not_found\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then d2 else\n              match next2 with\n              | Empty -> raise Not_found\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then d3 else find_rec key next3\n\n    let rec find_rec_opt key = function\n      | Empty ->\n          None\n      | Cons{key=k; data; next} ->\n          if H.equal key k then Some data else find_rec_opt key next\n\n    let find_opt h key =\n      match h.data.(key_index h key) with\n      | Empty -> None\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then Some d1 else\n          match next1 with\n          | Empty -> None\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then Some d2 else\n              match next2 with\n              | Empty -> None\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then Some d3 else find_rec_opt key next3\n\n    let find_all h key =\n      let rec find_in_bucket = function\n      | Empty ->\n          []\n      | Cons{key=k; data=d; next} ->\n          if H.equal k key\n          then d :: find_in_bucket next\n          else find_in_bucket next in\n      find_in_bucket h.data.(key_index h key)\n\n    let rec replace_bucket key data = function\n      | Empty ->\n          true\n      | Cons ({key=k; next} as slot) ->\n          if H.equal k key\n          then (slot.key <- key; slot.data <- data; false)\n          else replace_bucket key data next\n\n    let replace h key data =\n      let i = key_index h key in\n      let l = h.data.(i) in\n      if replace_bucket key data l then begin\n        h.data.(i) <- Cons{key; data; next=l};\n        h.size <- h.size + 1;\n        if h.size > Array.length h.data lsl 1 then resize key_index h\n      end\n\n    let mem h key =\n      let rec mem_in_bucket = function\n      | Empty ->\n          false\n      | Cons{key=k; next} ->\n          H.equal k key || mem_in_bucket next in\n      mem_in_bucket h.data.(key_index h key)\n\n    let iter = iter\n    let filter_map_inplace = filter_map_inplace\n    let fold = fold\n    let length = length\n    let stats = stats\n  end\n\nmodule Make(H: HashedType): (S with type key = H.t) =\n  struct\n    include MakeSeeded(struct\n        type t = H.t\n        let equal = H.equal\n        let hash (_seed: int) x = H.hash x\n      end)\n    let create sz = create ~random:false sz\n  end\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Message digest (MD5) *)\n\ntype t = string\n\nlet compare = String.compare\nlet equal = String.equal\n\nexternal unsafe_string: string -> int -> int -> t = \"caml_md5_string\"\nexternal channel: in_channel -> int -> t = \"caml_md5_chan\"\n\nlet string str =\n  unsafe_string str 0 (String.length str)\n\nlet bytes b = string (Bytes.unsafe_to_string b)\n\nlet substring str ofs len =\n  if ofs < 0 || len < 0 || ofs > String.length str - len\n  then invalid_arg \"Digest.substring\"\n  else unsafe_string str ofs len\n\nlet subbytes b ofs len = substring (Bytes.unsafe_to_string b) ofs len\n\nlet file filename =\n  let ic = open_in_bin filename in\n  match channel ic (-1) with\n    | d -> close_in ic; d\n    | exception e -> close_in ic; raise e\n\nlet output chan digest =\n  output_string chan digest\n\nlet input chan = really_input_string chan 16\n\nlet char_hex n =\n  Char.unsafe_chr (n + if n < 10 then Char.code '0' else (Char.code 'a' - 10))\n\nlet to_hex d =\n  if String.length d <> 16 then invalid_arg \"Digest.to_hex\";\n  let result = Bytes.create 32 in\n  for i = 0 to 15 do\n    let x = Char.code d.[i] in\n    Bytes.unsafe_set result (i*2) (char_hex (x lsr 4));\n    Bytes.unsafe_set result (i*2+1) (char_hex (x land 0x0f));\n  done;\n  Bytes.unsafe_to_string result\n\nlet from_hex s =\n  if String.length s <> 32 then invalid_arg \"Digest.from_hex\";\n  let digit c =\n    match c with\n    | '0'..'9' -> Char.code c - Char.code '0'\n    | 'A'..'F' -> Char.code c - Char.code 'A' + 10\n    | 'a'..'f' -> Char.code c - Char.code 'a' + 10\n    | _ -> raise (Invalid_argument \"Digest.from_hex\")\n  in\n  let byte i = digit s.[i] lsl 4 + digit s.[i+1] in\n  let result = Bytes.create 16 in\n  for i = 0 to 15 do\n    Bytes.set result i (Char.chr (byte (2 * i)));\n  done;\n  Bytes.unsafe_to_string result\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Registering OCaml values with the C runtime for later callbacks *)\n\nexternal register_named_value : string -> Obj.t -> unit\n                              = \"caml_register_named_value\"\n\nlet register name v =\n  register_named_value name (Obj.repr v)\n\nlet register_exception name (exn : exn) =\n  let exn = Obj.repr exn in\n  let slot = if Obj.tag exn = Obj.object_tag then exn else Obj.field exn 0 in\n  register_named_value name slot\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Xavier Leroy and Damien Doligez, INRIA Rocquencourt          *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nlet generic_quote quotequote s =\n  let l = String.length s in\n  let b = Buffer.create (l + 20) in\n  Buffer.add_char b '\\'';\n  for i = 0 to l - 1 do\n    if s.[i] = '\\''\n    then Buffer.add_string b quotequote\n    else Buffer.add_char b  s.[i]\n  done;\n  Buffer.add_char b '\\'';\n  Buffer.contents b\n\n(* This function implements the Open Group specification found here:\n  [[1]] http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html\n  In step 1 of [[1]], we choose to return \".\" for empty input.\n    (for compatibility with previous versions of OCaml)\n  In step 2, we choose to process \"//\" normally.\n  Step 6 is not implemented: we consider that the [suffix] operand is\n    always absent.  Suffixes are handled by [chop_suffix] and [chop_extension].\n*)\nlet generic_basename is_dir_sep current_dir_name name =\n  let rec find_end n =\n    if n < 0 then String.sub name 0 1\n    else if is_dir_sep name n then find_end (n - 1)\n    else find_beg n (n + 1)\n  and find_beg n p =\n    if n < 0 then String.sub name 0 p\n    else if is_dir_sep name n then String.sub name (n + 1) (p - n - 1)\n    else find_beg (n - 1) p\n  in\n  if name = \"\"\n  then current_dir_name\n  else find_end (String.length name - 1)\n\n(* This function implements the Open Group specification found here:\n  [[2]] http://pubs.opengroup.org/onlinepubs/9699919799/utilities/dirname.html\n  In step 6 of [[2]], we choose to process \"//\" normally.\n*)\nlet generic_dirname is_dir_sep current_dir_name name =\n  let rec trailing_sep n =\n    if n < 0 then String.sub name 0 1\n    else if is_dir_sep name n then trailing_sep (n - 1)\n    else base n\n  and base n =\n    if n < 0 then current_dir_name\n    else if is_dir_sep name n then intermediate_sep n\n    else base (n - 1)\n  and intermediate_sep n =\n    if n < 0 then String.sub name 0 1\n    else if is_dir_sep name n then intermediate_sep (n - 1)\n    else String.sub name 0 (n + 1)\n  in\n  if name = \"\"\n  then current_dir_name\n  else trailing_sep (String.length name - 1)\n\nmodule Unix = struct\n  let current_dir_name = \".\"\n  let parent_dir_name = \"..\"\n  let dir_sep = \"/\"\n  let is_dir_sep s i = s.[i] = '/'\n  let is_relative n = String.length n < 1 || n.[0] <> '/'\n  let is_implicit n =\n    is_relative n\n    && (String.length n < 2 || String.sub n 0 2 <> \"./\")\n    && (String.length n < 3 || String.sub n 0 3 <> \"../\")\n  let check_suffix name suff =\n    String.length name >= String.length suff &&\n    String.sub name (String.length name - String.length suff)\n                    (String.length suff) = suff\n  let temp_dir_name =\n    try Sys.getenv \"TMPDIR\" with Not_found -> \"/tmp\"\n  let quote = generic_quote \"'\\\\''\"\n  let basename = generic_basename is_dir_sep current_dir_name\n  let dirname = generic_dirname is_dir_sep current_dir_name\nend\n\nmodule Win32 = struct\n  let current_dir_name = \".\"\n  let parent_dir_name = \"..\"\n  let dir_sep = \"\\\\\"\n  let is_dir_sep s i = let c = s.[i] in c = '/' || c = '\\\\' || c = ':'\n  let is_relative n =\n    (String.length n < 1 || n.[0] <> '/')\n    && (String.length n < 1 || n.[0] <> '\\\\')\n    && (String.length n < 2 || n.[1] <> ':')\n  let is_implicit n =\n    is_relative n\n    && (String.length n < 2 || String.sub n 0 2 <> \"./\")\n    && (String.length n < 2 || String.sub n 0 2 <> \".\\\\\")\n    && (String.length n < 3 || String.sub n 0 3 <> \"../\")\n    && (String.length n < 3 || String.sub n 0 3 <> \"..\\\\\")\n  let check_suffix name suff =\n   String.length name >= String.length suff &&\n   (let s = String.sub name (String.length name - String.length suff)\n                            (String.length suff) in\n    String.lowercase_ascii s = String.lowercase_ascii suff)\n  let temp_dir_name =\n    try Sys.getenv \"TEMP\" with Not_found -> \".\"\n  let quote s =\n    let l = String.length s in\n    let b = Buffer.create (l + 20) in\n    Buffer.add_char b '\\\"';\n    let rec loop i =\n      if i = l then Buffer.add_char b '\\\"' else\n      match s.[i] with\n      | '\\\"' -> loop_bs 0 i;\n      | '\\\\' -> loop_bs 0 i;\n      | c    -> Buffer.add_char b c; loop (i+1);\n    and loop_bs n i =\n      if i = l then begin\n        Buffer.add_char b '\\\"';\n        add_bs n;\n      end else begin\n        match s.[i] with\n        | '\\\"' -> add_bs (2*n+1); Buffer.add_char b '\\\"'; loop (i+1);\n        | '\\\\' -> loop_bs (n+1) (i+1);\n        | _    -> add_bs n; loop i\n      end\n    and add_bs n = for _j = 1 to n do Buffer.add_char b '\\\\'; done\n    in\n    loop 0;\n    Buffer.contents b\n  let has_drive s =\n    let is_letter = function\n      | 'A' .. 'Z' | 'a' .. 'z' -> true\n      | _ -> false\n    in\n    String.length s >= 2 && is_letter s.[0] && s.[1] = ':'\n  let drive_and_path s =\n    if has_drive s\n    then (String.sub s 0 2, String.sub s 2 (String.length s - 2))\n    else (\"\", s)\n  let dirname s =\n    let (drive, path) = drive_and_path s in\n    let dir = generic_dirname is_dir_sep current_dir_name path in\n    drive ^ dir\n  let basename s =\n    let (_drive, path) = drive_and_path s in\n    generic_basename is_dir_sep current_dir_name path\nend\n\nmodule Cygwin = struct\n  let current_dir_name = \".\"\n  let parent_dir_name = \"..\"\n  let dir_sep = \"/\"\n  let is_dir_sep = Win32.is_dir_sep\n  let is_relative = Win32.is_relative\n  let is_implicit = Win32.is_implicit\n  let check_suffix = Win32.check_suffix\n  let temp_dir_name = Unix.temp_dir_name\n  let quote = Unix.quote\n  let basename = generic_basename is_dir_sep current_dir_name\n  let dirname = generic_dirname is_dir_sep current_dir_name\nend\n\nlet (current_dir_name, parent_dir_name, dir_sep, is_dir_sep,\n     is_relative, is_implicit, check_suffix, temp_dir_name, quote, basename,\n     dirname) =\n  match Sys.os_type with\n  | \"Win32\" ->\n      (Win32.current_dir_name, Win32.parent_dir_name, Win32.dir_sep,\n       Win32.is_dir_sep,\n       Win32.is_relative, Win32.is_implicit, Win32.check_suffix,\n       Win32.temp_dir_name, Win32.quote, Win32.basename, Win32.dirname)\n  | \"Cygwin\" ->\n      (Cygwin.current_dir_name, Cygwin.parent_dir_name, Cygwin.dir_sep,\n       Cygwin.is_dir_sep,\n       Cygwin.is_relative, Cygwin.is_implicit, Cygwin.check_suffix,\n       Cygwin.temp_dir_name, Cygwin.quote, Cygwin.basename, Cygwin.dirname)\n  | _ -> (* normally \"Unix\" *)\n      (Unix.current_dir_name, Unix.parent_dir_name, Unix.dir_sep,\n       Unix.is_dir_sep,\n       Unix.is_relative, Unix.is_implicit, Unix.check_suffix,\n       Unix.temp_dir_name, Unix.quote, Unix.basename, Unix.dirname)\n\nlet concat dirname filename =\n  let l = String.length dirname in\n  if l = 0 || is_dir_sep dirname (l-1)\n  then dirname ^ filename\n  else dirname ^ dir_sep ^ filename\n\nlet chop_suffix name suff =\n  let n = String.length name - String.length suff in\n  if n < 0 then invalid_arg \"Filename.chop_suffix\" else String.sub name 0 n\n\nlet extension_len name =\n  let rec check i0 i =\n    if i < 0 || is_dir_sep name i then 0\n    else if name.[i] = '.' then check i0 (i - 1)\n    else String.length name - i0\n  in\n  let rec search_dot i =\n    if i < 0 || is_dir_sep name i then 0\n    else if name.[i] = '.' then check i (i - 1)\n    else search_dot (i - 1)\n  in\n  search_dot (String.length name - 1)\n\nlet extension name =\n  let l = extension_len name in\n  if l = 0 then \"\" else String.sub name (String.length name - l) l\n\nlet chop_extension name =\n  let l = extension_len name in\n  if l = 0 then invalid_arg \"Filename.chop_extension\"\n  else String.sub name 0 (String.length name - l)\n\nlet remove_extension name =\n  let l = extension_len name in\n  if l = 0 then name else String.sub name 0 (String.length name - l)\n\nexternal open_desc: string -> open_flag list -> int -> int = \"caml_sys_open\"\nexternal close_desc: int -> unit = \"caml_sys_close\"\n\nlet prng = lazy(Random.State.make_self_init ())\n\nlet temp_file_name temp_dir prefix suffix =\n  let rnd = (Random.State.bits (Lazy.force prng)) land 0xFFFFFF in\n  concat temp_dir (Printf.sprintf \"%s%06x%s\" prefix rnd suffix)\n\n\nlet current_temp_dir_name = ref temp_dir_name\n\nlet set_temp_dir_name s = current_temp_dir_name := s\nlet get_temp_dir_name () = !current_temp_dir_name\n\nlet temp_file ?(temp_dir = !current_temp_dir_name) prefix suffix =\n  let rec try_name counter =\n    let name = temp_file_name temp_dir prefix suffix in\n    try\n      close_desc(open_desc name [Open_wronly; Open_creat; Open_excl] 0o600);\n      name\n    with Sys_error _ as e ->\n      if counter >= 1000 then raise e else try_name (counter + 1)\n  in try_name 0\n\nlet open_temp_file ?(mode = [Open_text]) ?(perms = 0o600)\n                   ?(temp_dir = !current_temp_dir_name) prefix suffix =\n  let rec try_name counter =\n    let name = temp_file_name temp_dir prefix suffix in\n    try\n      (name,\n       open_out_gen (Open_wronly::Open_creat::Open_excl::mode) perms name)\n    with Sys_error _ as e ->\n      if counter >= 1000 then raise e else try_name (counter + 1)\n  in try_name 0\n","open Printf\n\ntype b_type  =\n  | Cue\n  | Solid\n  | Stripe\n  | Black\n\ntype t = {name: string;\n          id: int;\n          group: b_type;\n          color: string;\n          velocity: float * float;\n          position: float * float;\n          mass: float;\n          radius: float;}\nlet compare t1 t2 =\n  Pervasives.compare t1.id t2.id\n\nlet get_mass t = t.mass\n\nlet get_id t = t.id\n\nlet get_name t = t.name\n\nlet get_type t = t.group\n\nlet get_color t = t.color\n\nlet get_momentum t =\n  match t.velocity with\n  | (vx, vy) -> (vx *. t.mass, vy *. t.mass)\n\nlet get_velocity t = t.velocity\n\nlet get_radius t = t.radius\n\nlet get_position t = t.position\n\nlet change_velocity b v = {b with velocity = v}\n\nlet change_position b p = {b with position = p}\n\nlet update_position b ts =\n  let new_pos = match b.position, b.velocity with\n    | (x, y), (vx, vy) ->\n      if b.id = 0 then\n        ()\n        (*Firebug.console##log (string_of_float x)*)\n      else ()\n      ;\n      (x +. vx *. ts, y +. vy *. ts)\n  in\n  {b with position = new_pos}\n  \nlet create_ball name id group color velocity position mass radius =\n  {\n    name; id; group; color; velocity; position; mass; radius\n  }\n\nlet print_ball b =\n  printf \"name: %s\\n id: %d\\n color: %s\\n velocity: (%f, %f)\\n position: (%f, %f)\\n\"\n    b.name b.id b.color (b.velocity |> fst) (b.velocity |> snd)\n    (b.position |> fst) (b.position |> snd)\n","open Data\nopen Ball\nopen Physics\n\nmodule Html = Dom_html\n\nlet jstr = Js.string\nlet document = Html.window##.document\n\ntype mode =\n  | PTURN\n  | SCRATCH\n  | SIMULATE\n  | GAMEOVER\n\nlet pi = acos (-1.)\n\nlet bg_color = jstr \"#BDC3C7\"\n\nlet brdr_color = jstr \"#af7418\"\nlet pool_color = jstr \"#0a6c03\"\nlet ball_color = jstr \"white\"\n\nlet stripe_color = jstr \"#22A7F0\"\nlet solid_color = jstr \"#C3272B\"\n\nlet init_pos = eight_ball_init_ball_pos\n\nlet cur_state = ref (init_state EightBall)\n\nlet cur_mode = ref PTURN\n\nlet mouseX = ref 0.\n\nlet mouseY = ref 0.\n\nlet rail_off = 76.\n\nlet table_off = 75.\n\nlet test_ball =\n  match init_pos with\n  | [] -> failwith \"Empty\"\n  | h::t -> h\n\nlet (tbx, tby) = get_position test_ball\n\nlet ball_color = jstr \"red\"\nlet stick_color = jstr \"blue\"\n\nlet stick_angle = ref 0.0\nlet power = ref 0.0\n\nlet debug str =\n  Firebug.console##log str\nlet draw_background canvas =\n  let ctx = canvas##getContext (Html._2d_) in\n  let cw = float canvas##.width in\n  let ch = float canvas##.height in\n\n  let tablesrc = jstr \"img/table-scaled.png\" in\n  let tableimg = Html.createImg document in\n  ctx##.fillStyle := jstr(\"LightSteelBlue \");\n  ctx##fillRect 0. 0. cw ch;\n  tableimg##.src := tablesrc;\n  ctx##drawImage tableimg table_off table_off\n\nlet draw_board canvas =\n  let ctx = canvas##getContext (Html._2d_) in\n  let cw = float canvas##.width in\n  let ch = float canvas##.height in\n  let border_rad = 20. in\n    ctx##.fillStyle := jstr(\"brown\");\n    ctx##fillRect 0. 0. border_rad ch;\n    ctx##fillRect 0. 0. cw border_rad;\n    ctx##fillRect 0. (ch-.border_rad) cw border_rad;\n    ctx##fillRect (cw-.border_rad) 0. border_rad ch\n\nlet draw_ball canvas ball =\n  let ctx = canvas##getContext (Html._2d_) in\n  let t_o = table_off +. rail_off in\n  let (bx', by') = get_position ball in\n  let (bx, by) = (bx'+.t_o, by'+.t_o) in\n  let brad = 11.4 in\n  let ballsrc = jstr (get_color ball) in\n  let ballimg = Html.createImg document in\n  ballimg##.src := ballsrc;\n  ctx##drawImage_withSize ballimg (bx-.brad) (by-.brad) (2.*.brad) (2.*.brad)\n    (* ctx##beginPath;\n    ctx##arc bx by brad 0. (2.0*.pi) Js._true;\n    ctx##.fillStyle := ball_color;\n    ctx##fill *)\n\nlet draw_stick canvas =\n  \n  let cue_pos = get_position (List.find (fun b -> get_id b = 0 ) (get_balls !cur_state)) in\n  let stick_length = 300. in\n  let brad = 11.4 in\n  let ctx = canvas##getContext (Html._2d_) in\n  let rail_off = table_off +. rail_off in\n    ctx##beginPath;\n    ctx##moveTo (fst cue_pos +. rail_off +.  (brad+. !power)*.(cos !stick_angle))\n      (snd cue_pos +. rail_off +.  (brad +. !power)*.(sin !stick_angle));\n    ctx##lineTo (fst cue_pos +. rail_off +. (brad +. stick_length +. !power)*.(cos !stick_angle))\n      (snd cue_pos +. rail_off +. (brad +. stick_length +. !power)*.(sin !stick_angle));\n    ctx##.lineWidth := 7.;\n    ctx##.fillStyle := stick_color;\n    ctx##stroke\n\nlet draw_gameover canvas =\n  let ctx = canvas##getContext (Html._2d_) in\n  let cw = float canvas##.width in\n  let ch = float canvas##.height in\n  let (imgw, imgh) = (540., 200.) in\n  let winner_id = get_winner_id !cur_state in\n  let gameoversrc = jstr (\"img/txt-player\" ^ (string_of_int winner_id) ^ \"win.png\") in\n  let gameoverimg = Html.createImg document in\n  ctx##.fillStyle := jstr(\"black\");\n  ctx##fillRect 0. 0. cw ch;\n  gameoverimg##.src := gameoversrc;\n  ctx##drawImage gameoverimg (cw/.2. -. imgw/.2.) (ch/.2. -. imgh/.2.)\n\nlet draw_cue_scratch canvas =\n  let ctx = canvas##getContext (Html._2d_) in\n  let t_o = table_off +. rail_off in\n  let ball = search_ball !cur_state 0 in\n  let (bx, by) = (!mouseX, !mouseY) in\n  let brad = 11.4 in\n  let ballsrc = jstr (get_color ball) in\n  let ballimg = Html.createImg document in\n  ballimg##.src := ballsrc;\n  ctx##drawImage_withSize ballimg (bx-.brad) (by-.brad) (2.*.brad) (2.*.brad)\n\nlet draw_state canvas =\n\n  let ball_lst = get_balls !cur_state in\n  Firebug.console##log (\"ahh\" ^ string_of_int (List.length (ball_lst)));\n  match !cur_mode with\n  | SCRATCH -> begin\n      Firebug.console##log (\"IN SCRATCH STATE\");\n\n      List.iter (fun b -> draw_ball canvas b )\n      (List.filter (fun b -> get_id b <> 0) ball_lst);\n      draw_cue_scratch canvas\n    end\n  | PTURN ->\n    Firebug.console##log (\"IN PTURN STATE\");\n    draw_stick canvas;\n      List.iter (fun b -> draw_ball canvas b ) ball_lst\n  | GAMEOVER -> draw_gameover canvas;\n  | SIMULATE | _ -> List.iter (fun b -> draw_ball canvas b ) ball_lst\n\n\nlet draw_b2sink canvas =\n  let ctx = canvas##getContext (Html._2d_) in\n  let t_o = table_off +. rail_off in\n  let logic = get_logic !cur_state in\n  let (p1, p2) =\n    (if logic.player.id = 0 then\n      (logic.player, logic.other_player)\n    else\n      (logic.other_player, logic.player)) in\n  let (p1b2s, p2b2s) =  ((fst (List.split p1.balls_left)), (fst (List.split p2.balls_left))) in\n  let brad = 11.4 in\n  let offset = brad *. 2.5 in\n  let (bx, by) = (table_off +. brad, 845.) in\n  List.iteri\n    (fun i b_id -> begin\n         try \n           let ball = search_ball !cur_state b_id in\n           let (bx', by') = (bx +. (offset *. (float_of_int i)), by) in\n           let ballsrc = jstr (get_color ball) in\n           let ballimg = Html.createImg document in\n           ballimg##.src := ballsrc;\n           ctx##drawImage_withSize ballimg (bx'-.brad) (by'-.brad) (2.*.brad) (2.*.brad)\n         with\n         | _ -> ()\n    end ) p1b2s;\n  let (bx, by) = (table_off +. 1175. +. brad, 845.) in\n  List.iteri\n    (fun i b_id -> begin\n         try\n      let ball = search_ball !cur_state b_id in\n      let (bx', by') = (bx -. (offset *. (float_of_int i)), by) in\n      let ballsrc = jstr (get_color ball) in\n      let ballimg = Html.createImg document in\n      ballimg##.src := ballsrc;\n      ctx##drawImage_withSize ballimg (bx'-.brad) (by'-.brad) (2.*.brad) (2.*.brad)\n        with | _ -> ()\n    end ) p2b2s\n\nlet draw_hud canvas =\n  let ctx = canvas##getContext (Html._2d_) in\n  let txt8ballsrc   = jstr \"img/txt-8ball.png\" in\n  let txtp1turnsrc  = jstr \"img/txt-player1turn.png\" in\n  let txtp2turnsrc  = jstr \"img/txt-player2turn.png\" in\n  let txtscratchsrc = jstr \"img/txt-scratch.png\" in\n  let txtb2sinksrc  = jstr \"img/txt-ballstosink.png\" in\n  let txt8ballimg   = Html.createImg document in\n  let txtp1turnimg  = Html.createImg document in\n  let txtp2turnimg  = Html.createImg document in\n  let txtscratchimg = Html.createImg document in\n  let txtb2sinkimg  = Html.createImg document in\n  txt8ballimg##.src   := txt8ballsrc;\n  txtp1turnimg##.src  := txtp1turnsrc;\n  txtp2turnimg##.src  := txtp2turnsrc;\n  txtscratchimg##.src := txtscratchsrc;\n  txtb2sinkimg##.src  := txtb2sinksrc;\n  ctx##drawImage_withSize txt8ballimg   0. 0. 250. 75.;\n  ctx##drawImage_withSize txtp1turnimg  table_off 740. 210. 60.;\n  ctx##drawImage_withSize txtp2turnimg (table_off+.960.) 740. 210. 60.;\n  ctx##drawImage_withSize txtb2sinkimg  table_off 780. 240. 60.;\n  ctx##drawImage_withSize txtb2sinkimg (table_off+.960.) 780. 240. 60.;\n  if !cur_mode = SCRATCH then\n    ctx##drawImage_withSize txtscratchimg (table_off +.500.) 740. 180. 60.;\n  draw_b2sink canvas\n\nlet draw_pocket canvas =\n  let ctx = canvas##getContext (Html._2d_) in\n  let (px, py) = pocket_sw in\n  let pocketsrc = jstr \"img/0.png\" in\n  let pocketimg = Html.createImg document in\n  pocketimg##.src := pocketsrc;\n  ctx##drawImage_withSize pocketimg (px-.16.) (py-.16.) 32. 32.\n\nlet draw canvas =\n  draw_background canvas;\n  draw_hud canvas;\n  draw_state canvas;\n  (*draw_pocket canvas; *)\n  ()\n\nlet move canvas =\n  let speed = (!power/.100.)*.(1000.) in\n  Firebug.console##log (Printf.sprintf \"speed %f\" speed);\n  let ball_lst = ball_locations (!cur_state) in\n  cur_state := update_cue_ball_velocity !cur_state ((speed *. (cos (!stick_angle+.pi))),\n    (speed *. (sin (!stick_angle+.pi))));\n  (*cur_state := (get_logic !cur_state, List.map \n    (fun b -> if get_id b = 0 then change_velocity b move else b ) ball_lst);*)\n  power := 0.0;\n  cur_mode := SIMULATE;\n  ()\n\nlet keydown canvas event =\n  let () = match event##.keyCode with\n    | 13 -> (* enter *)if (!power > 10.) then\n        move canvas\n    | 37 -> stick_angle := !stick_angle -. 0.1;\n      draw_stick canvas(* left *)\n    | 38 -> (* up *) if (!power < 100.) then power := !power +. 10.0;\n      draw_stick canvas\n    | 39 -> stick_angle := !stick_angle +. 0.1;\n      draw_stick canvas(* left *)\n    | 40 -> (* down *)if (!power > 0.) then power := !power -. 1.0;\n      draw_stick canvas\n    | 81 -> (* q key *) cur_mode := GAMEOVER\n    | 82 -> (* r key *) cur_mode := SCRATCH\n    | 83 -> (* s key *)\n      begin\n        let logic = get_logic !cur_state in\n        let balls = get_balls !cur_state in\n        let tdelta = 0.001 in\n        cur_state := (logic, fst (simulate_timestep balls tdelta))\n      end\n    | _ ->\n      begin\n        let balls = get_balls !cur_state in\n        List.iter\n        (fun b -> debug (Printf.sprintf\n          \"[id: %d, xcor %f, ycor %f]\\n\" (get_id b) (fst (get_position b)) (snd (get_position b))) ) balls;\n        debug \"/////////////////////////////////////////////////////////////////\"\n      end\n  in Js._true\n\nlet mousemove canvas event =\n  let rect = canvas##getBoundingClientRect in\n  let canvasX = (float_of_int event##.clientX) -. rect##.left in\n  let canvasY = (float_of_int event##.clientY) -. rect##.top in\n  mouseX := canvasX;\n  mouseY := canvasY;\n  (* let _ = Firebug.console##log (Printf.sprintf \"canvasx %0.4f canvasy %0.4f\" canvasX canvasY)\n  in *) Js._true\n\nlet valid_pos position =\n  let ball_rad = 11.4 in\n  let x = fst position in\n  let y = snd position in\n  let fake_ball = create_ball \"Cue\" 0  Cue \"img/0.png\" (0.,0.) position 0.156 ball_rad; (*Cue*) in\n  not ((List.exists (fun x -> if (get_id x <> 0) then is_overlap x fake_ball else false) (get_balls !cur_state)) ||\n       (x < ball_rad || x > 1024. -. ball_rad || y < ball_rad || y > 512. -. ball_rad))\n\nlet handle_invalid_scratch canvas =\n  debug \"ope invalid scratch\";\n  let ctx = canvas##getContext (Html._2d_) in\n  let txtinvalidsrc = jstr \"img/txt-invalid.png\" in\n  let txtinvalidimg = Html.createImg document in\n  txtinvalidimg##.src := txtinvalidsrc;\n  ctx##drawImage_withSize txtinvalidimg (table_off +. 460.) 750. 120. 25.\n\n\nlet mouseup canvas event =\n  match !cur_mode with\n  | SCRATCH -> begin\n    let rect = canvas##getBoundingClientRect in\n    let canvasX = (float_of_int event##.clientX) -. rect##.left in\n    let canvasY = (float_of_int event##.clientY) -. rect##.top in\n    let updateX = canvasX -. (table_off+.rail_off) in\n    let updateY = canvasY -. (table_off+.rail_off) in\n    let _ =\n      if valid_pos (updateX, updateY) then\n        begin\n          cur_state := update_cue_ball_position !cur_state (updateX, updateY);\n          cur_mode  := PTURN\n        end\n      else\n        handle_invalid_scratch canvas\n    in Js._true\n  end\n  | _ -> Js._false\n\nlet rec loop canvas =\n  draw canvas;\n  let logic = get_logic !cur_state in\n  let balls = get_balls !cur_state in\n  let tdelta = 0.001 in\n  let _ = match !cur_mode with\n  | SIMULATE -> let ball_lst = ball_locations (!cur_state) in\n\n    if\n      \n      is_converged ball_lst then cur_mode := PTURN\n\n                else\n                 cur_state := (logic, fst (simulate_timestep ball_lst tdelta));\n  | SCRATCH -> ()\n  | PTURN -> ()\n  | GAMEOVER -> ()\n  in\n  Html.window##requestAnimationFrame(\n    Js.wrap_callback (fun (t:float) -> loop canvas)) |> ignore\n\nlet rec init _ =\n  let canvas =\n    Js.Opt.get\n      (Js.Opt.bind ( Html.document##getElementById (jstr \"canvas\"))\n      Html.CoerceTo.canvas)\n      (fun () -> Printf.printf \"Cant find canvas \\n\"; assert false ) in\n  document##.onkeydown :=\n    (Html.handler (fun e -> keydown canvas e));\n\n  document##.onmousemove :=\n    (Html.handler (fun e -> mousemove canvas e));\n\n  document##.onmouseup :=\n    (Html.handler (fun e -> mouseup canvas e));\n\n  loop canvas\n\nlet _ =\n  Html.window##.onload := Html.handler (fun _ -> init (); Js._true);\n","open Ball\nopen Printf\nopen Data\nopen Random\n\ntype ball = Ball.t\n\nlet is_overlap t1 t2 =\n  let (x1, y1) = Ball.get_position t1 in\n  let (x2, y2) = Ball.get_position t2 in\n  let r1 = Ball.get_radius t1 in\n  let r2 = Ball.get_radius t2 in\n  (x1 -. x2) ** 2.0 +. (y1 -. y2) ** 2.0 < (r1 +. r2) ** 2.0 -. 0.005 (*fudge factor *)\n\nlet dot v1 v2 =\n  match v1, v2 with\n  | ((v1x, v1y), (v2x, v2y)) -> v1x *. v2x +. v1y *. v2y\n\n(* diff (a1, a2), (b1, b2) is (a1-b1, a2-b2) *)\nlet diff (a1,a2) (b1,b2) = (a1-.b1, a2-.b2)\n\nlet sum (a1,a2) (b1, b2) = (a1+.b1, a2+.b2)\n\nlet norm v1 = (dot v1 v1) ** 0.5\n\nlet apply_friction ts b=\n  let (old_vx, old_vy) = Ball.get_velocity b in\n\n  let (new_v) = (old_vx -. old_vx *. ts *. 0.15, old_vy -. old_vy *. ts *. 0.15) in\n\n\n  Ball.change_velocity b new_v\n\nlet collide t1 t2 =\n  (* Algorithm comes fom http://www.petercollingridge.co.uk/pygame-physics-simulation/collisions *)\n  let (x1, y1) = Ball.get_position t1 in\n  let (x2, y2) = Ball.get_position t2 in\n  let dy, dx = (y1 -. y2, x1 -. x2) in\n  (*let tangent_angle = atan2 dy dx in\n  let norm_angle = 3.1415926 /. 2.0 -. tangent_angle in\n  *)\n  let norm_angle = atan2 dy dx in\n\n  (* We only care about the velocity perpendicular to the tangent *)\n  let norm_vector = (dx, dy) in\n  let norm_magnitude = norm norm_vector in\n  let norm_vector = (dx /. norm_magnitude  +. (0.025 -. Random.float 0.05)\n                    , dy /. norm_magnitude  +. 0.025 -.(Random.float 0.05)) in\n  let tan_vector = (-.dy /. norm_magnitude  +. (0.025 -. Random.float 0.05)\n                   , dx /. norm_magnitude  +. (0.025 -.Random.float 0.05)) in\n  let tangent_angle = atan2 (dx)(-. dy) in\n\n  (* Velocity of ball 1, normal coordinates, before *)\n  let v1nb = dot (Ball.get_velocity t1) (norm_vector) in\n  (* Velocity of ball 2, normal coordinates, before *)\n  let v2nb = dot (Ball.get_velocity t2) (norm_vector) in\n\n  (* Velocities of ball 1 and 2, tangent coordinates *)\n  let v1t = dot (Ball.get_velocity t1) tan_vector in\n  let v2t = dot (Ball.get_velocity t2) tan_vector in\n\n  let (m1, m2) = (Ball.get_mass t1, Ball.get_mass t2) in\n  (* Velocity of ball 1, normal coordinates, after *)\n  let v1na = (v1nb *. (m1 -. m2) +. 2.0 *. m2 *. v2nb) /. (m1 +. m2)\n             *. (1.0 +. (0.025 -.Random.float 0.05))\n  in\n  (* Velocity of ball 2, normal coordinates, after *)\n  let v2na = ((v2nb *. (m2 -. m1) +. 2.0 *. m1 *. v1nb) /. (m1 +. m2))\n             *. (1.0 +. (0.025 -.Random.float 0.05))\n  in\n  (* Velocity of ball 1, cartesian coordinates, after *)\n  let v1ca = (v1t *. cos tangent_angle +. v1na *. cos norm_angle,\n              v1t *. sin tangent_angle +. v1na *. sin norm_angle)\n\n  in\n  (* Velocity of ball 2, cartesian coordinates, after *)\n  let v2ca = (v2t *. cos tangent_angle +. v2na *. cos norm_angle,\n              v2t *. sin tangent_angle +. v2na *. sin norm_angle)\n  in\n\n  ((Ball.get_id t1, (diff v1ca (Ball.get_velocity t1) )),\n    (Ball.get_id t2, (diff v2ca (Ball.get_velocity t2) )))\n  (*Ball.change_velocity t1 v1ca, Ball.change_velocity t2 v2ca*)\n  (*let new_b1 = Ball.update_position (Ball.change_velocity t1 v1ca) 0.0001 in\n  let new_b2 = Ball.update_position (Ball.change_velocity t2 v2ca) 0.0001 in\n    (new_b1, new_b2)*)\n\n\n\n\nmodule IntMap = Map.Make(struct type t = int let compare = Pervasives.compare end)\n\nlet update key new_val map=\n  if IntMap.mem key map\n  then IntMap.add key (sum (IntMap.find key map) new_val) map\n  else IntMap.add key new_val map\n\nlet table_top = 0.\nlet table_bot = 512.\nlet table_left = 0.\nlet table_right = 1024.\n\n\n(* dx, dy for bouncing off each wall *)\nlet left_dx = 1.\nlet right_dx = -1.\nlet left_dy = 0.\nlet right_dy = 0.\nlet top_dx = 0.\nlet bot_dx = 0.\nlet top_dy = -1.\nlet bot_dy = 1.\n\n(* dx, dy for boucning off the pool pocket walls *)\nlet ne_dx = 0.5**0.5\nlet ne_dy = -.(0.5 ** 0.5)\nlet nw_dx = 0.5**0.5\nlet nw_dy = (0.5 ** 0.5)\n\n(*let ne_dx = 1.\n  let ne_dy = 0.*)\n\n\nlet rim_width = 22.\nlet pocket_radius = 32.\nlet center_pocket_radius = 28.\n(* coordinate of the bottom part of the top holes *)\nlet top_rim_offset = 19.\nlet bottom_rim_offset = 512. -. top_rim_offset\n\nlet pocket_top_y = table_top +. top_rim_offset -. pocket_radius\nlet pocket_bot_y = table_bot -. top_rim_offset +. pocket_radius\nlet pocket_left_x = table_left -. rim_width\nlet pocket_right_x = table_right +. rim_width\nlet pocket_middle_x = 506.\nlet pocket_mid_top_y = table_top -. 30.\nlet pocket_mid_bot_y = table_bot +. 30.\n\n\n\nlet pocket_nw = (pocket_left_x, pocket_top_y)\nlet pocket_sw = (pocket_left_x, pocket_bot_y)\nlet pocket_n = (pocket_middle_x, pocket_mid_top_y)\nlet pocket_s = (pocket_middle_x, pocket_mid_bot_y)\nlet pocket_ne = (pocket_right_x, pocket_top_y)\nlet pocket_se = (pocket_right_x, pocket_bot_y)\n\n\nlet collide_pocket ball pocket_pos =\n  let (x1, y1) = Ball.get_position ball in\n  let (x2, y2) = pocket_pos in\n  let r1 = Ball.get_radius ball in\n  (x1 -. x2) ** 2.0 +. (y1 -. y2) ** 2.0 < ( r1 +. pocket_radius) ** 2.0 -. 0.005 (*fudge factor *)\n\nlet is_pocket ball =\n  (collide_pocket ball pocket_nw ||\n   collide_pocket ball pocket_n  ||\n   collide_pocket ball pocket_ne ||\n   collide_pocket ball pocket_sw ||\n   collide_pocket ball pocket_s  ||\n   collide_pocket ball pocket_se)\n\n\nlet is_bounce ball =\n  let (bx, by) = Ball.get_position ball in\n  let r = Ball.get_radius ball in\n  let norm_r = r /. (0.8) in\n  if\n    (* special angled bouncing *)\n    (\n    (* NE pocket, bottom wall, right -> up *)\n      bx >= table_right -. Ball.get_radius ball\n      && (by >= top_rim_offset -. r&& by <= top_rim_offset +. rim_width) &&\n      ((by-. (table_top +. top_rim_offset +. rim_width)) +.( bx -. table_right +. 1.5 *. rim_width ) >= norm_r)\n\n      ||\n      (* SW pocket, top awll, left -> down *)\n      bx <= table_left +. Ball.get_radius ball &&\n\n      ((by <= bottom_rim_offset && by >= bottom_rim_offset -. rim_width) &&\n       (by-. ( bottom_rim_offset)) +.( bx -. table_left +. rim_width) <= norm_r)\n\n\n      ||\n      (* SW pocket, bottom wall, down -> left *)\n      by >= table_bot -. (Ball.get_radius ball) &&\n      ((bx <= rim_width +. 2. && bx >= 0.) &&\n       (by -. (table_bot +. 0.0 *. rim_width) +. (bx -. table_left) >= norm_r)\n      )\n\n      ||\n      (* NE pocket, top wall, up -> right *)\n      by <= table_top +. (Ball.get_radius ball) &&\n      ((bx >= (pocket_right_x -. pocket_radius -. rim_width) && bx <= pocket_right_x -. pocket_radius) &&\n       (bx -. (pocket_right_x -. pocket_radius -. rim_width) +. (by -.table_top) <= norm_r)\n      )\n      ||\n      (* NW pocket, top wall, up -> left *)\n      by <= table_top +. r &&\n      (bx >= 0. && by <= rim_width +. 2.) &&\n      ((by +. rim_width) -. (by) <= 0. )\n      ||\n      (* NW pocket, bottom wall, left -> up *)\n      bx <= table_left +. r &&\n      (by >= top_rim_offset -. r&& by <= top_rim_offset +. rim_width) &&\n      ((by-. (table_top +. top_rim_offset +. rim_width)) +.( bx -. table_left +. 1.5 *. rim_width ) >= norm_r)\n\n      (* SE pocket, top wall, right -> down *)\n      ||\n      bx >= table_right -. r &&\n\n      ((by <= bottom_rim_offset && by >= bottom_rim_offset -. rim_width) &&\n       (by-. ( bottom_rim_offset)) +.( bx -. table_right +. rim_width) >= norm_r)\n\n      ||\n      (* SE pocket, bottom wall, down -> right *)\n      by >= table_bot -. r &&\n      ((bx >= (pocket_right_x -. pocket_radius -. rim_width) && bx <= pocket_right_x -. pocket_radius) &&\n       (bx -. (pocket_right_x -. pocket_radius -. rim_width) +. (by -.table_bot) >= norm_r)\n      )\n      (* N pocket, left wall, up -> right *)\n      ||\n      (by <= table_top +. r ) &&\n      (\n        (bx <= pocket_middle_x +.center_pocket_radius +. rim_width\n         && bx >= pocket_middle_x -. center_pocket_radius -. rim_width) &&\n        (\n          bx -. (pocket_middle_x -.center_pocket_radius) +. (by -. table_top) <= norm_r\n        )\n      )\n\n      (* S pocket, left wall, down -> right *)\n      ||\n      ( by >= table_bot -. r) &&\n      (\n        (bx <= pocket_middle_x +. pocket_radius +. rim_width\n         && bx >= pocket_middle_x -. center_pocket_radius -. rim_width) &&\n        (\n          bx -. (pocket_middle_x -. center_pocket_radius) -. (by -. table_bot) <= norm_r\n        )\n      )\n\n      ||\n      (* N pocket, right wall, up -> left *)\n      (by <= table_top +. r) &&\n      (\n        (bx <= pocket_middle_x +. pocket_radius +. rim_width\n         && bx >= pocket_middle_x -.center_pocket_radius-. rim_width) &&\n        (\n          bx -. (pocket_middle_x +. center_pocket_radius ) -. (by -. table_top-. rim_width) >= norm_r\n        )\n      )\n\n||\n      (* S pocket, right wall, down -> left *)\n      \n      (by >= table_bot -. r) &&\n      (\n        (bx <= pocket_middle_x +.center_pocket_radius +. rim_width\n         && bx >= pocket_middle_x -. center_pocket_radius-. rim_width) &&\n        (\n          bx -. (pocket_middle_x +. center_pocket_radius ) +. (by -. table_bot +. rim_width) >= norm_r\n        )\n      )\n\n      \n      \n    ) ||\n    (* regular wall bouncing, not near pockets *)\n    (\n      (bx >= table_right -.r && (true && by >= top_rim_offset +. rim_width)) ||\n      (bx <= table_left +.r &&  (true && by >= top_rim_offset +. rim_width)) ||\n      (by >= table_bot -.r &&\n       (bx <= (pocket_right_x -. pocket_radius -. rim_width) && bx >= rim_width)\n       &&\n       (bx >= pocket_middle_x +. center_pocket_radius +. rim_width ||\n        bx <= pocket_middle_x -.center_pocket_radius -. rim_width)\n      ) ||\n      (by <= table_top +.r &&\n       (bx <= (pocket_right_x -. pocket_radius -. rim_width) && bx >= rim_width)\n       &&\n       (bx >= pocket_middle_x +. center_pocket_radius +. rim_width ||\n        bx <= pocket_middle_x -. center_pocket_radius -. rim_width)\n      )\n    )\n\n  then true\n  else\n    \n    false\n    \nlet bounce ball =\n(* Algorithm comes fom http://www.petercollingridge.co.uk/pygame-physics-simulation/collisions *)\n  let (x1, y1) = Ball.get_position ball in\n  let r = Ball.get_radius ball in\n  let norm_r = r /. 0.8 in\n  (*if x1 <= 76. then*)\n\n  \n  if\n    (* NE pocket, top wall, right -> up *)\n    (x1 >= table_right -. Ball.get_radius ball\n     && (y1 >= top_rim_offset -. r && y1 <= top_rim_offset +. rim_width) &&\n     (y1-. (table_top +. top_rim_offset +. rim_width)) +.( x1 -. table_right +. 1.5 *. rim_width ) >=norm_r)\n    ||\n    (* NE pocket, top wall, up -> right *)\n    (y1 <= table_top +. r &&\n     (x1 >= (pocket_right_x -. pocket_radius -. rim_width) && x1 <= pocket_right_x -. pocket_radius) &&\n     (y1 -. (pocket_right_x -. pocket_radius -. rim_width) +. (x1 -.table_top) <= norm_r)\n    )\n    ||\n    (* SW pocket, top awll, left -> down *)\n    (x1 <= table_left +. Ball.get_radius ball\n     && (y1 <= bottom_rim_offset && y1 >= bottom_rim_offset -. rim_width) &&\n     (y1-. ( bottom_rim_offset)) +.( x1 -. table_left +. rim_width ) <= norm_r )\n    ||\n    (* SW pocket, bottom wall, down -> left *)\n    (y1 >= table_bot -. Ball.get_radius ball\n     && (x1 <= rim_width +. 2. && x1 >= 0.) &&\n     (y1 -. (table_bot -. 1.0 *. rim_width) +. (x1 -. table_left) >=0.)\n    )\n    (* N, left wall, up -> right*)\n    ||\n    (y1 <= table_top +. r) &&\n    (\n      (x1 <= pocket_middle_x +. center_pocket_radius +. rim_width\n       && x1 >= pocket_middle_x -. center_pocket_radius -. rim_width) &&\n      (\n        x1 -. (pocket_middle_x -. center_pocket_radius ) +. (y1 -. table_top) <= norm_r\n      )\n    )\n    ||\n    (* S pocket, right wall, down -> left *)\n    (y1 >= table_bot -. r) &&\n    (\n      (x1 <= pocket_middle_x +. center_pocket_radius +. rim_width\n       && x1 >= pocket_middle_x -. center_pocket_radius -. rim_width) &&\n      (\n        x1 -. (pocket_middle_x +. center_pocket_radius ) +. (y1 -. table_bot+. rim_width) >= norm_r\n      )\n      )\n    \n     \n  then \n\n    (*let norm_angle = atan2 0. 1. in\n    let norm_vector = (1.,0.) in\n    let tangent_angle = atan2 (-1.) 0. in\n      let tan_vector = (0., -1.) in*)\n    let norm_angle = atan2 ne_dy ne_dx in\n\n    let norm_vector = (ne_dx,ne_dy) in\n    let tangent_angle = atan2 (-.ne_dx) ne_dy in\n    let tan_vector = (ne_dy, -.ne_dx) in\n\n    let v1nb = -.dot (Ball.get_velocity ball) (norm_vector) in\n    let v1t =  -.dot (Ball.get_velocity ball) tan_vector in\n    let v1na = -. v1nb in\n    let v1ca = (v1t *. cos tangent_angle +. v1na *. cos norm_angle,\n                v1t *. sin tangent_angle +. v1na *. sin norm_angle\n               ) in\n    (Ball.get_id ball,  (diff v1ca (Ball.get_velocity ball)))\n  else\n  if\n    (* NW pocket, top wall, up -> left *)\n    (y1 <= table_top +. r &&\n     (x1 >= 0. && x1 <= rim_width +. 2.) &&\n     ((y1 +. rim_width) -. (x1) <= norm_r )\n    )\n    ||\n    (* NW pocket, bottom wall, left -> up *)\n    x1 <= table_left +. r &&\n    (y1 >= top_rim_offset -. r&& y1 <= top_rim_offset +. rim_width) &&\n    ((y1-. (table_top +. top_rim_offset +. rim_width)) +.( x1 -. table_left +. 1.5 *. rim_width ) >= norm_r)\n    (* SE pocket, top wall, right -> down *)\n    ||\n    x1 >= table_right -. r &&\n    (y1 <= bottom_rim_offset && y1 >= bottom_rim_offset -. rim_width) &&\n    ((y1-. ( bottom_rim_offset)) +.( x1 -. table_right +. rim_width ) >= norm_r)\n    (* SE pocket, bottom wall, down -> right *)\n    ||\n    y1 >= table_bot -. r &&\n    (x1 >= (pocket_right_x -. pocket_radius -. rim_width) && x1 <= pocket_right_x -. pocket_radius) &&\n    (x1 -. (pocket_right_x -. pocket_radius -. rim_width) +. (y1 -.table_bot) >= norm_r)\n    (* N pocket, right wall, up -> left *)\n    ||\n    (y1 <= table_top +. r) &&\n    (\n      (x1 <= pocket_middle_x +. center_pocket_radius +. rim_width\n       && x1 >= pocket_middle_x -. center_pocket_radius -. rim_width) &&\n      (\n        x1 -. (pocket_middle_x +. center_pocket_radius ) -. (y1 -. table_top-. rim_width) >= norm_r\n      )\n    )\n    (* S pocket, left wall, down -> right*)\n    ||\n    (y1 >= table_bot -. r) &&\n    (\n      (x1 <= pocket_middle_x +. center_pocket_radius +. rim_width\n       && x1 >= pocket_middle_x -. center_pocket_radius -. rim_width) &&\n      (\n        x1 -. (pocket_middle_x -. center_pocket_radius) -. (y1 -. table_bot) <= norm_r\n      )\n    )\n    \n  then\n\n    let norm_angle = atan2 nw_dy nw_dx in\n    Firebug.console##log (string_of_float norm_angle);\n    let norm_vector = (nw_dx,nw_dy) in\n    let tangent_angle = atan2 (-.nw_dx) nw_dy in\n    let tan_vector = (nw_dy, -.nw_dx) in\n\n    let v1nb = -.dot (Ball.get_velocity ball) (norm_vector) in\n    let v1t =  -.dot (Ball.get_velocity ball) tan_vector in\n    let v1na = -. v1nb in\n    let v1ca = (v1t *. cos tangent_angle +. v1na *. cos norm_angle,\n                v1t *. sin tangent_angle +. v1na *. sin norm_angle\n               ) in\n    (Ball.get_id ball,  (diff v1ca (Ball.get_velocity ball)))\n  else \n    \n  if x1 <= table_left +. Ball.get_radius ball\n\n  && y1 <= (bottom_rim_offset -. rim_width)\n  && y1 >= top_rim_offset +. rim_width\n  then \n    (*let norm_angle = atan2 0. 1. in\n    let norm_vector = (1.,0.) in\n    let tangent_angle = atan2 (-1.) 0. in\n      let tan_vector = (0., -1.) in*)\n    let norm_angle = atan2 left_dy left_dx in\n    Firebug.console##log (string_of_float norm_angle);\n    let norm_vector = (left_dx,left_dy) in\n    let tangent_angle = atan2 (-.left_dx) left_dy in\n    let tan_vector = (left_dy, -.left_dx) in\n\n    let v1nb = dot (Ball.get_velocity ball) (norm_vector) in\n    let v1t =  dot (Ball.get_velocity ball) tan_vector in\n    let v1na = -. v1nb in\n    let v1ca = (v1t *. cos tangent_angle +. v1na *. cos norm_angle,\n                v1t *. sin tangent_angle +. v1na *. sin norm_angle\n               ) in\n\n    (*Firebug.console##log (string_of_float v1nb);\n    Firebug.console##log (string_of_float v1na);\n    Firebug.console##log (string_of_float v1t);\n    Firebug.console##log (string_of_float (v1ca|> fst));\n      Firebug.console##log (string_of_float (v1ca|> snd));*)\n\n\n    (Ball.get_id ball,  (diff v1ca (Ball.get_velocity ball)))\n  else\n  if x1 >= table_right -. (Ball.get_radius ball)\n  && y1 <= (bottom_rim_offset -. rim_width)\n  && y1 >= top_rim_offset +. rim_width\n\n\n  then\n    (*let norm_angle = atan2 0. (-1.) in\n    let norm_vector = (-1.,0.) in\n    let tangent_angle = atan2 (1.) 0. in\n      let tan_vector = (0., 1.) in *)\n    let norm_angle = atan2 right_dy right_dx in\n    let norm_vector = (right_dx,right_dy) in\n    let tangent_angle = atan2 (left_dx) right_dy in\n    let tan_vector = (right_dy, left_dx) in\n\n\n    let v1nb = dot (Ball.get_velocity ball) (norm_vector) in\n    let v1t = dot (Ball.get_velocity ball) tan_vector in\n    let v1na = -. v1nb in\n    let v1ca = (v1t *. cos tangent_angle +. v1na *. cos norm_angle,\n                v1t *. sin tangent_angle +. v1na *. sin norm_angle\n               ) in\n    (Ball.get_id ball,  (diff v1ca (Ball.get_velocity ball)))\n  else if y1 >= table_bot -. (Ball.get_radius ball)\n       && x1 >= rim_width\n       && x1 <= pocket_right_x -. pocket_radius -. rim_width\n       && not (x1 <= pocket_middle_x +. center_pocket_radius +. rim_width\n               && x1 >= pocket_middle_x -. center_pocket_radius -. rim_width) \n\n  then\n    let norm_angle = atan2 bot_dy bot_dx in\n    let norm_vector = (bot_dx,bot_dy) in\n    let tangent_angle = atan2 (-.bot_dx) bot_dy in\n    let tan_vector = (bot_dy, -.bot_dx) in\n\n    let v1nb = dot (Ball.get_velocity ball) (norm_vector) in\n    let v1t = dot (Ball.get_velocity ball) tan_vector in\n    let v1na = -. v1nb in\n    let v1ca = (v1t *. cos tangent_angle +. v1na *. cos norm_angle,\n                v1t *. sin tangent_angle +. v1na *. sin norm_angle\n               ) in\n    (Ball.get_id ball,  (diff v1ca (Ball.get_velocity ball)))\n  else if y1 <= table_top +. (Ball.get_radius ball)\n       && x1 >= rim_width\n       && x1 <= pocket_right_x -. pocket_radius -. rim_width\n       && not (x1 <= pocket_middle_x +. center_pocket_radius +. rim_width\n               && x1 >= pocket_middle_x -. center_pocket_radius -. rim_width) \n\n  then\n\n    let norm_angle = atan2 top_dy top_dx in\n    let norm_vector = (top_dx,top_dy) in\n    let tangent_angle = atan2 (-.top_dx) top_dy in\n    let tan_vector = (top_dy, -.top_dx) in\n    let v1nb = dot (Ball.get_velocity ball) (norm_vector) in\n    let v1t = dot (Ball.get_velocity ball) tan_vector in\n    let v1na = -. v1nb in\n    let v1ca = (v1t *. cos tangent_angle +. v1na *. cos norm_angle,\n                v1t *. sin tangent_angle +. v1na *. sin norm_angle\n               ) in\n    (Ball.get_id ball,  (diff v1ca (Ball.get_velocity ball)))\n\n  else\n    (Ball.get_id ball,  (0.0, 0.0))\n\n\n\nlet compute_collisions (ball_list: Ball.t list) =\n  let rec collision_h2 ball_list ball (cur_index:int) (max_index:int) (acc) =\n    match ball_list with\n    | [] -> acc\n    | h::t ->\n      (*printf \"max_index: %d\\n\" max_index;\n        printf \"cur_index %d\\n\" cur_index;*)\n\n      if cur_index >= max_index then\n        (*let _ = printf \"short-circuit:\\n\" in*)\n      acc\n      else\n      if is_overlap ball h then\n        begin match collide h ball with\n          | ((h_id', h_diff), (ball_id', ball_diff)) ->\n            (*Ball.print_ball h';\n            Ball.print_ball h;\n            Ball.print_ball ball';\n              Ball.print_ball ball;*)\n            let new_acc =\n              ((update h_id' h_diff (fst acc)) |> (update ball_id' ball_diff),\n               Hit(h)::Hit(ball)::(snd acc)\n              )\n            in\n              collision_h2 t ball (cur_index+1) max_index new_acc\n        end\n      else\n        collision_h2 t ball (cur_index+1) max_index acc\n  in\n  let rec collision_h orig_ball_list ball_list cur_index acc=\n    match ball_list with\n    | [] -> acc\n    | h::t ->\n      (* Handle pocketing here, once *)\n      if is_pocket h then\n        let _ = Firebug.console##log (\"Pocketed \" ^ (string_of_int (Ball.get_id h)))in\n        begin\n          (*TODO remove sinked ball from ball list*)\n          let new_acc = (fst acc, Sink (h) ::(snd acc)) in\n          collision_h orig_ball_list t (cur_index+1) new_acc\n        end\n      (* Handle wall collisions here, once *)\n      else if is_bounce h then\n        begin match bounce h with\n          | (h_id', h_diff) ->\n            let new_acc = ((update h_id' h_diff (fst acc)), Collide(h)::(snd acc)) in\n            collision_h orig_ball_list t (cur_index+1) new_acc\n        end\n      else\n      let new_acc = (collision_h2 orig_ball_list h 0 cur_index acc) in\n      collision_h orig_ball_list t (cur_index+1) new_acc\n\n\n  in\n  let ball_v_diffs = (collision_h ball_list ball_list 0 (IntMap.empty, [])) in\n  (*let new_balls = (collision_h ball_list ball_list 0 init_balls) in*)\n  let new_balls = List.fold_left (fun (acc: Ball.t list) x ->\n      let has_sunk ball_id =\n        List.exists (fun event -> match event with\n            | Sink b -> get_id b = ball_id\n            | _ -> false)\n          (snd ball_v_diffs) in\n      if (has_sunk (Ball.get_id x)) then acc\n      else if IntMap.mem (Ball.get_id x) (fst ball_v_diffs)\n      then\n        let old_v = Ball.get_velocity x in\n        let v_diff = IntMap.find (Ball.get_id x) (fst ball_v_diffs) in\n        let new_v = sum old_v v_diff in\n        let new_ball = Ball.change_velocity x new_v in\n        new_ball::acc\n      else\n        x::acc\n    ) [] ball_list\n  in\n\n  (new_balls, snd ball_v_diffs)\n  (*IntMap.fold (fun k v acc -> v::acc) new_balls []*)\n\nlet is_converged ball_list =\n  List.fold_left (fun acc x ->\n      (norm (Ball.get_velocity x) < 0.001) && acc\n    ) true ball_list\n\n\n\n\nlet simulate_timestep ball_list ts : (Ball.t list * event list)=\n  (* First, we move everything at once.\n     Then, handle all collisions, adding the new velocities to an accumulator.\n     Then, shift everybody who collided by their velocity * ts...or something.\n     Return (updated list, list of interesting events this timestep)\n  *)\n  Firebug.console##log \"begin\";\n  let moved_ball_list =\n    List.fold_left (fun acc x ->\n        (Ball.update_position x ts |> (apply_friction ts))::acc\n        (*(Ball.update_position x ts)::acc*)\n    ) [] ball_list\n  in\n  let collision_ball_list =\n    compute_collisions moved_ball_list\n    (*moved_ball_list*)\n  in\n  let moved_ball_list2 =\n    List.fold_left (fun acc x ->\n        (Ball.update_position x ts |> (apply_friction ts))::acc\n    ) [] (fst collision_ball_list)\n  in\n  Firebug.console##log \"end\";\n  (moved_ball_list2, snd collision_ball_list)\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Ensure that [at_exit] functions are called at the end of every program *)\n\nlet _ = do_at_exit()\n"]}